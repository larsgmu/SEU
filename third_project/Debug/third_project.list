
third_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004808  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f0  080049f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f8  080049f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08004a70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004a70  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000893b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182a  00000000  00000000  000289d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140d7  00000000  00000000  0002b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c81  00000000  00000000  0003f1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b91a  00000000  00000000  00048e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c477a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002048  00000000  00000000  000c47d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048b0 	.word	0x080048b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080048b0 	.word	0x080048b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	1c08      	adds	r0, r1, #0
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 f9bb 	bl	80005c8 <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f93f 	bl	80004e0 <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f9ad 	bl	80005c8 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f9a3 	bl	80005c8 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f94d 	bl	8000530 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 f943 	bl	8000530 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_uldivmod>:
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d111      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d10f      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d100      	bne.n	80002c6 <__aeabi_uldivmod+0xe>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d002      	beq.n	80002ce <__aeabi_uldivmod+0x16>
 80002c8:	2100      	movs	r1, #0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	1c08      	adds	r0, r1, #0
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <__aeabi_uldivmod+0x24>)
 80002d2:	a102      	add	r1, pc, #8	; (adr r1, 80002dc <__aeabi_uldivmod+0x24>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	ffffff65 	.word	0xffffff65
 80002e0:	b403      	push	{r0, r1}
 80002e2:	4668      	mov	r0, sp
 80002e4:	b501      	push	{r0, lr}
 80002e6:	9802      	ldr	r0, [sp, #8]
 80002e8:	f000 f82e 	bl	8000348 <__udivmoddi4>
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	469e      	mov	lr, r3
 80002f0:	b002      	add	sp, #8
 80002f2:	bc0c      	pop	{r2, r3}
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_lmul>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	0415      	lsls	r5, r2, #16
 80002fc:	0c2d      	lsrs	r5, r5, #16
 80002fe:	000f      	movs	r7, r1
 8000300:	0001      	movs	r1, r0
 8000302:	002e      	movs	r6, r5
 8000304:	46c6      	mov	lr, r8
 8000306:	4684      	mov	ip, r0
 8000308:	0400      	lsls	r0, r0, #16
 800030a:	0c14      	lsrs	r4, r2, #16
 800030c:	0c00      	lsrs	r0, r0, #16
 800030e:	0c09      	lsrs	r1, r1, #16
 8000310:	4346      	muls	r6, r0
 8000312:	434d      	muls	r5, r1
 8000314:	4360      	muls	r0, r4
 8000316:	4361      	muls	r1, r4
 8000318:	1940      	adds	r0, r0, r5
 800031a:	0c34      	lsrs	r4, r6, #16
 800031c:	1824      	adds	r4, r4, r0
 800031e:	b500      	push	{lr}
 8000320:	42a5      	cmp	r5, r4
 8000322:	d903      	bls.n	800032c <__aeabi_lmul+0x34>
 8000324:	2080      	movs	r0, #128	; 0x80
 8000326:	0240      	lsls	r0, r0, #9
 8000328:	4680      	mov	r8, r0
 800032a:	4441      	add	r1, r8
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	186d      	adds	r5, r5, r1
 8000330:	4661      	mov	r1, ip
 8000332:	4359      	muls	r1, r3
 8000334:	437a      	muls	r2, r7
 8000336:	0430      	lsls	r0, r6, #16
 8000338:	1949      	adds	r1, r1, r5
 800033a:	0424      	lsls	r4, r4, #16
 800033c:	0c00      	lsrs	r0, r0, #16
 800033e:	1820      	adds	r0, r4, r0
 8000340:	1889      	adds	r1, r1, r2
 8000342:	bc80      	pop	{r7}
 8000344:	46b8      	mov	r8, r7
 8000346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000348 <__udivmoddi4>:
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800034a:	4657      	mov	r7, sl
 800034c:	464e      	mov	r6, r9
 800034e:	4645      	mov	r5, r8
 8000350:	46de      	mov	lr, fp
 8000352:	b5e0      	push	{r5, r6, r7, lr}
 8000354:	0004      	movs	r4, r0
 8000356:	000d      	movs	r5, r1
 8000358:	4692      	mov	sl, r2
 800035a:	4699      	mov	r9, r3
 800035c:	b083      	sub	sp, #12
 800035e:	428b      	cmp	r3, r1
 8000360:	d830      	bhi.n	80003c4 <__udivmoddi4+0x7c>
 8000362:	d02d      	beq.n	80003c0 <__udivmoddi4+0x78>
 8000364:	4649      	mov	r1, r9
 8000366:	4650      	mov	r0, sl
 8000368:	f000 fff6 	bl	8001358 <__clzdi2>
 800036c:	0029      	movs	r1, r5
 800036e:	0006      	movs	r6, r0
 8000370:	0020      	movs	r0, r4
 8000372:	f000 fff1 	bl	8001358 <__clzdi2>
 8000376:	1a33      	subs	r3, r6, r0
 8000378:	4698      	mov	r8, r3
 800037a:	3b20      	subs	r3, #32
 800037c:	469b      	mov	fp, r3
 800037e:	d433      	bmi.n	80003e8 <__udivmoddi4+0xa0>
 8000380:	465a      	mov	r2, fp
 8000382:	4653      	mov	r3, sl
 8000384:	4093      	lsls	r3, r2
 8000386:	4642      	mov	r2, r8
 8000388:	001f      	movs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d83a      	bhi.n	800040a <__udivmoddi4+0xc2>
 8000394:	42af      	cmp	r7, r5
 8000396:	d100      	bne.n	800039a <__udivmoddi4+0x52>
 8000398:	e078      	b.n	800048c <__udivmoddi4+0x144>
 800039a:	465b      	mov	r3, fp
 800039c:	1ba4      	subs	r4, r4, r6
 800039e:	41bd      	sbcs	r5, r7
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	da00      	bge.n	80003a6 <__udivmoddi4+0x5e>
 80003a4:	e075      	b.n	8000492 <__udivmoddi4+0x14a>
 80003a6:	2200      	movs	r2, #0
 80003a8:	2300      	movs	r3, #0
 80003aa:	9200      	str	r2, [sp, #0]
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	2301      	movs	r3, #1
 80003b0:	465a      	mov	r2, fp
 80003b2:	4093      	lsls	r3, r2
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	2301      	movs	r3, #1
 80003b8:	4642      	mov	r2, r8
 80003ba:	4093      	lsls	r3, r2
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	e028      	b.n	8000412 <__udivmoddi4+0xca>
 80003c0:	4282      	cmp	r2, r0
 80003c2:	d9cf      	bls.n	8000364 <__udivmoddi4+0x1c>
 80003c4:	2200      	movs	r2, #0
 80003c6:	2300      	movs	r3, #0
 80003c8:	9200      	str	r2, [sp, #0]
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <__udivmoddi4+0x8e>
 80003d2:	601c      	str	r4, [r3, #0]
 80003d4:	605d      	str	r5, [r3, #4]
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	b003      	add	sp, #12
 80003dc:	bcf0      	pop	{r4, r5, r6, r7}
 80003de:	46bb      	mov	fp, r7
 80003e0:	46b2      	mov	sl, r6
 80003e2:	46a9      	mov	r9, r5
 80003e4:	46a0      	mov	r8, r4
 80003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e8:	4642      	mov	r2, r8
 80003ea:	2320      	movs	r3, #32
 80003ec:	1a9b      	subs	r3, r3, r2
 80003ee:	4652      	mov	r2, sl
 80003f0:	40da      	lsrs	r2, r3
 80003f2:	4641      	mov	r1, r8
 80003f4:	0013      	movs	r3, r2
 80003f6:	464a      	mov	r2, r9
 80003f8:	408a      	lsls	r2, r1
 80003fa:	0017      	movs	r7, r2
 80003fc:	4642      	mov	r2, r8
 80003fe:	431f      	orrs	r7, r3
 8000400:	4653      	mov	r3, sl
 8000402:	4093      	lsls	r3, r2
 8000404:	001e      	movs	r6, r3
 8000406:	42af      	cmp	r7, r5
 8000408:	d9c4      	bls.n	8000394 <__udivmoddi4+0x4c>
 800040a:	2200      	movs	r2, #0
 800040c:	2300      	movs	r3, #0
 800040e:	9200      	str	r2, [sp, #0]
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	4643      	mov	r3, r8
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0d9      	beq.n	80003cc <__udivmoddi4+0x84>
 8000418:	07fb      	lsls	r3, r7, #31
 800041a:	0872      	lsrs	r2, r6, #1
 800041c:	431a      	orrs	r2, r3
 800041e:	4646      	mov	r6, r8
 8000420:	087b      	lsrs	r3, r7, #1
 8000422:	e00e      	b.n	8000442 <__udivmoddi4+0xfa>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d101      	bne.n	800042c <__udivmoddi4+0xe4>
 8000428:	42a2      	cmp	r2, r4
 800042a:	d80c      	bhi.n	8000446 <__udivmoddi4+0xfe>
 800042c:	1aa4      	subs	r4, r4, r2
 800042e:	419d      	sbcs	r5, r3
 8000430:	2001      	movs	r0, #1
 8000432:	1924      	adds	r4, r4, r4
 8000434:	416d      	adcs	r5, r5
 8000436:	2100      	movs	r1, #0
 8000438:	3e01      	subs	r6, #1
 800043a:	1824      	adds	r4, r4, r0
 800043c:	414d      	adcs	r5, r1
 800043e:	2e00      	cmp	r6, #0
 8000440:	d006      	beq.n	8000450 <__udivmoddi4+0x108>
 8000442:	42ab      	cmp	r3, r5
 8000444:	d9ee      	bls.n	8000424 <__udivmoddi4+0xdc>
 8000446:	3e01      	subs	r6, #1
 8000448:	1924      	adds	r4, r4, r4
 800044a:	416d      	adcs	r5, r5
 800044c:	2e00      	cmp	r6, #0
 800044e:	d1f8      	bne.n	8000442 <__udivmoddi4+0xfa>
 8000450:	9800      	ldr	r0, [sp, #0]
 8000452:	9901      	ldr	r1, [sp, #4]
 8000454:	465b      	mov	r3, fp
 8000456:	1900      	adds	r0, r0, r4
 8000458:	4169      	adcs	r1, r5
 800045a:	2b00      	cmp	r3, #0
 800045c:	db24      	blt.n	80004a8 <__udivmoddi4+0x160>
 800045e:	002b      	movs	r3, r5
 8000460:	465a      	mov	r2, fp
 8000462:	4644      	mov	r4, r8
 8000464:	40d3      	lsrs	r3, r2
 8000466:	002a      	movs	r2, r5
 8000468:	40e2      	lsrs	r2, r4
 800046a:	001c      	movs	r4, r3
 800046c:	465b      	mov	r3, fp
 800046e:	0015      	movs	r5, r2
 8000470:	2b00      	cmp	r3, #0
 8000472:	db2a      	blt.n	80004ca <__udivmoddi4+0x182>
 8000474:	0026      	movs	r6, r4
 8000476:	409e      	lsls	r6, r3
 8000478:	0033      	movs	r3, r6
 800047a:	0026      	movs	r6, r4
 800047c:	4647      	mov	r7, r8
 800047e:	40be      	lsls	r6, r7
 8000480:	0032      	movs	r2, r6
 8000482:	1a80      	subs	r0, r0, r2
 8000484:	4199      	sbcs	r1, r3
 8000486:	9000      	str	r0, [sp, #0]
 8000488:	9101      	str	r1, [sp, #4]
 800048a:	e79f      	b.n	80003cc <__udivmoddi4+0x84>
 800048c:	42a3      	cmp	r3, r4
 800048e:	d8bc      	bhi.n	800040a <__udivmoddi4+0xc2>
 8000490:	e783      	b.n	800039a <__udivmoddi4+0x52>
 8000492:	4642      	mov	r2, r8
 8000494:	2320      	movs	r3, #32
 8000496:	2100      	movs	r1, #0
 8000498:	1a9b      	subs	r3, r3, r2
 800049a:	2200      	movs	r2, #0
 800049c:	9100      	str	r1, [sp, #0]
 800049e:	9201      	str	r2, [sp, #4]
 80004a0:	2201      	movs	r2, #1
 80004a2:	40da      	lsrs	r2, r3
 80004a4:	9201      	str	r2, [sp, #4]
 80004a6:	e786      	b.n	80003b6 <__udivmoddi4+0x6e>
 80004a8:	4642      	mov	r2, r8
 80004aa:	2320      	movs	r3, #32
 80004ac:	1a9b      	subs	r3, r3, r2
 80004ae:	002a      	movs	r2, r5
 80004b0:	4646      	mov	r6, r8
 80004b2:	409a      	lsls	r2, r3
 80004b4:	0023      	movs	r3, r4
 80004b6:	40f3      	lsrs	r3, r6
 80004b8:	4644      	mov	r4, r8
 80004ba:	4313      	orrs	r3, r2
 80004bc:	002a      	movs	r2, r5
 80004be:	40e2      	lsrs	r2, r4
 80004c0:	001c      	movs	r4, r3
 80004c2:	465b      	mov	r3, fp
 80004c4:	0015      	movs	r5, r2
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dad4      	bge.n	8000474 <__udivmoddi4+0x12c>
 80004ca:	4642      	mov	r2, r8
 80004cc:	002f      	movs	r7, r5
 80004ce:	2320      	movs	r3, #32
 80004d0:	0026      	movs	r6, r4
 80004d2:	4097      	lsls	r7, r2
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	40de      	lsrs	r6, r3
 80004d8:	003b      	movs	r3, r7
 80004da:	4333      	orrs	r3, r6
 80004dc:	e7cd      	b.n	800047a <__udivmoddi4+0x132>
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__eqsf2>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	0042      	lsls	r2, r0, #1
 80004e4:	024e      	lsls	r6, r1, #9
 80004e6:	004c      	lsls	r4, r1, #1
 80004e8:	0245      	lsls	r5, r0, #9
 80004ea:	0a6d      	lsrs	r5, r5, #9
 80004ec:	0e12      	lsrs	r2, r2, #24
 80004ee:	0fc3      	lsrs	r3, r0, #31
 80004f0:	0a76      	lsrs	r6, r6, #9
 80004f2:	0e24      	lsrs	r4, r4, #24
 80004f4:	0fc9      	lsrs	r1, r1, #31
 80004f6:	2aff      	cmp	r2, #255	; 0xff
 80004f8:	d00f      	beq.n	800051a <__eqsf2+0x3a>
 80004fa:	2cff      	cmp	r4, #255	; 0xff
 80004fc:	d011      	beq.n	8000522 <__eqsf2+0x42>
 80004fe:	2001      	movs	r0, #1
 8000500:	42a2      	cmp	r2, r4
 8000502:	d000      	beq.n	8000506 <__eqsf2+0x26>
 8000504:	bd70      	pop	{r4, r5, r6, pc}
 8000506:	42b5      	cmp	r5, r6
 8000508:	d1fc      	bne.n	8000504 <__eqsf2+0x24>
 800050a:	428b      	cmp	r3, r1
 800050c:	d00d      	beq.n	800052a <__eqsf2+0x4a>
 800050e:	2a00      	cmp	r2, #0
 8000510:	d1f8      	bne.n	8000504 <__eqsf2+0x24>
 8000512:	0028      	movs	r0, r5
 8000514:	1e45      	subs	r5, r0, #1
 8000516:	41a8      	sbcs	r0, r5
 8000518:	e7f4      	b.n	8000504 <__eqsf2+0x24>
 800051a:	2001      	movs	r0, #1
 800051c:	2d00      	cmp	r5, #0
 800051e:	d1f1      	bne.n	8000504 <__eqsf2+0x24>
 8000520:	e7eb      	b.n	80004fa <__eqsf2+0x1a>
 8000522:	2001      	movs	r0, #1
 8000524:	2e00      	cmp	r6, #0
 8000526:	d1ed      	bne.n	8000504 <__eqsf2+0x24>
 8000528:	e7e9      	b.n	80004fe <__eqsf2+0x1e>
 800052a:	2000      	movs	r0, #0
 800052c:	e7ea      	b.n	8000504 <__eqsf2+0x24>
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__gesf2>:
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	0042      	lsls	r2, r0, #1
 8000534:	0246      	lsls	r6, r0, #9
 8000536:	024d      	lsls	r5, r1, #9
 8000538:	004c      	lsls	r4, r1, #1
 800053a:	0fc3      	lsrs	r3, r0, #31
 800053c:	0a76      	lsrs	r6, r6, #9
 800053e:	0e12      	lsrs	r2, r2, #24
 8000540:	0a6d      	lsrs	r5, r5, #9
 8000542:	0e24      	lsrs	r4, r4, #24
 8000544:	0fc8      	lsrs	r0, r1, #31
 8000546:	2aff      	cmp	r2, #255	; 0xff
 8000548:	d01f      	beq.n	800058a <__gesf2+0x5a>
 800054a:	2cff      	cmp	r4, #255	; 0xff
 800054c:	d010      	beq.n	8000570 <__gesf2+0x40>
 800054e:	2a00      	cmp	r2, #0
 8000550:	d11f      	bne.n	8000592 <__gesf2+0x62>
 8000552:	4271      	negs	r1, r6
 8000554:	4171      	adcs	r1, r6
 8000556:	2c00      	cmp	r4, #0
 8000558:	d101      	bne.n	800055e <__gesf2+0x2e>
 800055a:	2d00      	cmp	r5, #0
 800055c:	d01e      	beq.n	800059c <__gesf2+0x6c>
 800055e:	2900      	cmp	r1, #0
 8000560:	d10e      	bne.n	8000580 <__gesf2+0x50>
 8000562:	4283      	cmp	r3, r0
 8000564:	d01e      	beq.n	80005a4 <__gesf2+0x74>
 8000566:	2102      	movs	r1, #2
 8000568:	1e58      	subs	r0, r3, #1
 800056a:	4008      	ands	r0, r1
 800056c:	3801      	subs	r0, #1
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	2d00      	cmp	r5, #0
 8000572:	d126      	bne.n	80005c2 <__gesf2+0x92>
 8000574:	2a00      	cmp	r2, #0
 8000576:	d1f4      	bne.n	8000562 <__gesf2+0x32>
 8000578:	4271      	negs	r1, r6
 800057a:	4171      	adcs	r1, r6
 800057c:	2900      	cmp	r1, #0
 800057e:	d0f0      	beq.n	8000562 <__gesf2+0x32>
 8000580:	2800      	cmp	r0, #0
 8000582:	d1f4      	bne.n	800056e <__gesf2+0x3e>
 8000584:	2001      	movs	r0, #1
 8000586:	4240      	negs	r0, r0
 8000588:	e7f1      	b.n	800056e <__gesf2+0x3e>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d119      	bne.n	80005c2 <__gesf2+0x92>
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d0ee      	beq.n	8000570 <__gesf2+0x40>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d1e5      	bne.n	8000562 <__gesf2+0x32>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d1e3      	bne.n	8000562 <__gesf2+0x32>
 800059a:	e7e4      	b.n	8000566 <__gesf2+0x36>
 800059c:	2000      	movs	r0, #0
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d0e5      	beq.n	800056e <__gesf2+0x3e>
 80005a2:	e7e0      	b.n	8000566 <__gesf2+0x36>
 80005a4:	42a2      	cmp	r2, r4
 80005a6:	dc05      	bgt.n	80005b4 <__gesf2+0x84>
 80005a8:	dbea      	blt.n	8000580 <__gesf2+0x50>
 80005aa:	42ae      	cmp	r6, r5
 80005ac:	d802      	bhi.n	80005b4 <__gesf2+0x84>
 80005ae:	d3e7      	bcc.n	8000580 <__gesf2+0x50>
 80005b0:	2000      	movs	r0, #0
 80005b2:	e7dc      	b.n	800056e <__gesf2+0x3e>
 80005b4:	4241      	negs	r1, r0
 80005b6:	4141      	adcs	r1, r0
 80005b8:	4248      	negs	r0, r1
 80005ba:	2102      	movs	r1, #2
 80005bc:	4008      	ands	r0, r1
 80005be:	3801      	subs	r0, #1
 80005c0:	e7d5      	b.n	800056e <__gesf2+0x3e>
 80005c2:	2002      	movs	r0, #2
 80005c4:	4240      	negs	r0, r0
 80005c6:	e7d2      	b.n	800056e <__gesf2+0x3e>

080005c8 <__lesf2>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	0042      	lsls	r2, r0, #1
 80005cc:	0246      	lsls	r6, r0, #9
 80005ce:	024d      	lsls	r5, r1, #9
 80005d0:	004c      	lsls	r4, r1, #1
 80005d2:	0fc3      	lsrs	r3, r0, #31
 80005d4:	0a76      	lsrs	r6, r6, #9
 80005d6:	0e12      	lsrs	r2, r2, #24
 80005d8:	0a6d      	lsrs	r5, r5, #9
 80005da:	0e24      	lsrs	r4, r4, #24
 80005dc:	0fc8      	lsrs	r0, r1, #31
 80005de:	2aff      	cmp	r2, #255	; 0xff
 80005e0:	d00d      	beq.n	80005fe <__lesf2+0x36>
 80005e2:	2cff      	cmp	r4, #255	; 0xff
 80005e4:	d00f      	beq.n	8000606 <__lesf2+0x3e>
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d123      	bne.n	8000632 <__lesf2+0x6a>
 80005ea:	4271      	negs	r1, r6
 80005ec:	4171      	adcs	r1, r6
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d10f      	bne.n	8000612 <__lesf2+0x4a>
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d10d      	bne.n	8000612 <__lesf2+0x4a>
 80005f6:	2000      	movs	r0, #0
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d014      	beq.n	8000626 <__lesf2+0x5e>
 80005fc:	e00d      	b.n	800061a <__lesf2+0x52>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d110      	bne.n	8000624 <__lesf2+0x5c>
 8000602:	2cff      	cmp	r4, #255	; 0xff
 8000604:	d115      	bne.n	8000632 <__lesf2+0x6a>
 8000606:	2d00      	cmp	r5, #0
 8000608:	d10c      	bne.n	8000624 <__lesf2+0x5c>
 800060a:	2a00      	cmp	r2, #0
 800060c:	d103      	bne.n	8000616 <__lesf2+0x4e>
 800060e:	4271      	negs	r1, r6
 8000610:	4171      	adcs	r1, r6
 8000612:	2900      	cmp	r1, #0
 8000614:	d108      	bne.n	8000628 <__lesf2+0x60>
 8000616:	4283      	cmp	r3, r0
 8000618:	d010      	beq.n	800063c <__lesf2+0x74>
 800061a:	2102      	movs	r1, #2
 800061c:	1e58      	subs	r0, r3, #1
 800061e:	4008      	ands	r0, r1
 8000620:	3801      	subs	r0, #1
 8000622:	e000      	b.n	8000626 <__lesf2+0x5e>
 8000624:	2002      	movs	r0, #2
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	2800      	cmp	r0, #0
 800062a:	d1fc      	bne.n	8000626 <__lesf2+0x5e>
 800062c:	2001      	movs	r0, #1
 800062e:	4240      	negs	r0, r0
 8000630:	e7f9      	b.n	8000626 <__lesf2+0x5e>
 8000632:	2c00      	cmp	r4, #0
 8000634:	d1ef      	bne.n	8000616 <__lesf2+0x4e>
 8000636:	2d00      	cmp	r5, #0
 8000638:	d1ed      	bne.n	8000616 <__lesf2+0x4e>
 800063a:	e7ee      	b.n	800061a <__lesf2+0x52>
 800063c:	42a2      	cmp	r2, r4
 800063e:	dc05      	bgt.n	800064c <__lesf2+0x84>
 8000640:	dbf2      	blt.n	8000628 <__lesf2+0x60>
 8000642:	42ae      	cmp	r6, r5
 8000644:	d802      	bhi.n	800064c <__lesf2+0x84>
 8000646:	d3ef      	bcc.n	8000628 <__lesf2+0x60>
 8000648:	2000      	movs	r0, #0
 800064a:	e7ec      	b.n	8000626 <__lesf2+0x5e>
 800064c:	4241      	negs	r1, r0
 800064e:	4141      	adcs	r1, r0
 8000650:	4248      	negs	r0, r1
 8000652:	2102      	movs	r1, #2
 8000654:	4008      	ands	r0, r1
 8000656:	3801      	subs	r0, #1
 8000658:	e7e5      	b.n	8000626 <__lesf2+0x5e>
 800065a:	46c0      	nop			; (mov r8, r8)

0800065c <__aeabi_ui2f>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	1e05      	subs	r5, r0, #0
 8000660:	d00e      	beq.n	8000680 <__aeabi_ui2f+0x24>
 8000662:	f000 fe5b 	bl	800131c <__clzsi2>
 8000666:	239e      	movs	r3, #158	; 0x9e
 8000668:	0004      	movs	r4, r0
 800066a:	1a1b      	subs	r3, r3, r0
 800066c:	2b96      	cmp	r3, #150	; 0x96
 800066e:	dc0c      	bgt.n	800068a <__aeabi_ui2f+0x2e>
 8000670:	2808      	cmp	r0, #8
 8000672:	dd01      	ble.n	8000678 <__aeabi_ui2f+0x1c>
 8000674:	3c08      	subs	r4, #8
 8000676:	40a5      	lsls	r5, r4
 8000678:	026d      	lsls	r5, r5, #9
 800067a:	0a6d      	lsrs	r5, r5, #9
 800067c:	b2d8      	uxtb	r0, r3
 800067e:	e001      	b.n	8000684 <__aeabi_ui2f+0x28>
 8000680:	2000      	movs	r0, #0
 8000682:	2500      	movs	r5, #0
 8000684:	05c0      	lsls	r0, r0, #23
 8000686:	4328      	orrs	r0, r5
 8000688:	bd70      	pop	{r4, r5, r6, pc}
 800068a:	2b99      	cmp	r3, #153	; 0x99
 800068c:	dd09      	ble.n	80006a2 <__aeabi_ui2f+0x46>
 800068e:	0002      	movs	r2, r0
 8000690:	0029      	movs	r1, r5
 8000692:	321b      	adds	r2, #27
 8000694:	4091      	lsls	r1, r2
 8000696:	1e4a      	subs	r2, r1, #1
 8000698:	4191      	sbcs	r1, r2
 800069a:	2205      	movs	r2, #5
 800069c:	1a12      	subs	r2, r2, r0
 800069e:	40d5      	lsrs	r5, r2
 80006a0:	430d      	orrs	r5, r1
 80006a2:	2c05      	cmp	r4, #5
 80006a4:	dd01      	ble.n	80006aa <__aeabi_ui2f+0x4e>
 80006a6:	1f62      	subs	r2, r4, #5
 80006a8:	4095      	lsls	r5, r2
 80006aa:	0029      	movs	r1, r5
 80006ac:	4e08      	ldr	r6, [pc, #32]	; (80006d0 <__aeabi_ui2f+0x74>)
 80006ae:	4031      	ands	r1, r6
 80006b0:	076a      	lsls	r2, r5, #29
 80006b2:	d009      	beq.n	80006c8 <__aeabi_ui2f+0x6c>
 80006b4:	200f      	movs	r0, #15
 80006b6:	4028      	ands	r0, r5
 80006b8:	2804      	cmp	r0, #4
 80006ba:	d005      	beq.n	80006c8 <__aeabi_ui2f+0x6c>
 80006bc:	3104      	adds	r1, #4
 80006be:	014a      	lsls	r2, r1, #5
 80006c0:	d502      	bpl.n	80006c8 <__aeabi_ui2f+0x6c>
 80006c2:	239f      	movs	r3, #159	; 0x9f
 80006c4:	4031      	ands	r1, r6
 80006c6:	1b1b      	subs	r3, r3, r4
 80006c8:	0189      	lsls	r1, r1, #6
 80006ca:	0a4d      	lsrs	r5, r1, #9
 80006cc:	b2d8      	uxtb	r0, r3
 80006ce:	e7d9      	b.n	8000684 <__aeabi_ui2f+0x28>
 80006d0:	fbffffff 	.word	0xfbffffff

080006d4 <__aeabi_ddiv>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	4657      	mov	r7, sl
 80006d8:	464e      	mov	r6, r9
 80006da:	4645      	mov	r5, r8
 80006dc:	46de      	mov	lr, fp
 80006de:	b5e0      	push	{r5, r6, r7, lr}
 80006e0:	4681      	mov	r9, r0
 80006e2:	0005      	movs	r5, r0
 80006e4:	030c      	lsls	r4, r1, #12
 80006e6:	0048      	lsls	r0, r1, #1
 80006e8:	4692      	mov	sl, r2
 80006ea:	001f      	movs	r7, r3
 80006ec:	b085      	sub	sp, #20
 80006ee:	0b24      	lsrs	r4, r4, #12
 80006f0:	0d40      	lsrs	r0, r0, #21
 80006f2:	0fce      	lsrs	r6, r1, #31
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d059      	beq.n	80007ac <__aeabi_ddiv+0xd8>
 80006f8:	4b87      	ldr	r3, [pc, #540]	; (8000918 <__aeabi_ddiv+0x244>)
 80006fa:	4298      	cmp	r0, r3
 80006fc:	d100      	bne.n	8000700 <__aeabi_ddiv+0x2c>
 80006fe:	e098      	b.n	8000832 <__aeabi_ddiv+0x15e>
 8000700:	0f6b      	lsrs	r3, r5, #29
 8000702:	00e4      	lsls	r4, r4, #3
 8000704:	431c      	orrs	r4, r3
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	041b      	lsls	r3, r3, #16
 800070a:	4323      	orrs	r3, r4
 800070c:	4698      	mov	r8, r3
 800070e:	4b83      	ldr	r3, [pc, #524]	; (800091c <__aeabi_ddiv+0x248>)
 8000710:	00ed      	lsls	r5, r5, #3
 8000712:	469b      	mov	fp, r3
 8000714:	2300      	movs	r3, #0
 8000716:	4699      	mov	r9, r3
 8000718:	4483      	add	fp, r0
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	033c      	lsls	r4, r7, #12
 800071e:	007b      	lsls	r3, r7, #1
 8000720:	4650      	mov	r0, sl
 8000722:	0b24      	lsrs	r4, r4, #12
 8000724:	0d5b      	lsrs	r3, r3, #21
 8000726:	0fff      	lsrs	r7, r7, #31
 8000728:	2b00      	cmp	r3, #0
 800072a:	d067      	beq.n	80007fc <__aeabi_ddiv+0x128>
 800072c:	4a7a      	ldr	r2, [pc, #488]	; (8000918 <__aeabi_ddiv+0x244>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d018      	beq.n	8000764 <__aeabi_ddiv+0x90>
 8000732:	497a      	ldr	r1, [pc, #488]	; (800091c <__aeabi_ddiv+0x248>)
 8000734:	0f42      	lsrs	r2, r0, #29
 8000736:	468c      	mov	ip, r1
 8000738:	00e4      	lsls	r4, r4, #3
 800073a:	4659      	mov	r1, fp
 800073c:	4314      	orrs	r4, r2
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	4463      	add	r3, ip
 8000742:	0412      	lsls	r2, r2, #16
 8000744:	1acb      	subs	r3, r1, r3
 8000746:	4314      	orrs	r4, r2
 8000748:	469b      	mov	fp, r3
 800074a:	00c2      	lsls	r2, r0, #3
 800074c:	2000      	movs	r0, #0
 800074e:	0033      	movs	r3, r6
 8000750:	407b      	eors	r3, r7
 8000752:	469a      	mov	sl, r3
 8000754:	464b      	mov	r3, r9
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d900      	bls.n	800075c <__aeabi_ddiv+0x88>
 800075a:	e0ef      	b.n	800093c <__aeabi_ddiv+0x268>
 800075c:	4970      	ldr	r1, [pc, #448]	; (8000920 <__aeabi_ddiv+0x24c>)
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	58cb      	ldr	r3, [r1, r3]
 8000762:	469f      	mov	pc, r3
 8000764:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <__aeabi_ddiv+0x250>)
 8000766:	4652      	mov	r2, sl
 8000768:	469c      	mov	ip, r3
 800076a:	4322      	orrs	r2, r4
 800076c:	44e3      	add	fp, ip
 800076e:	2a00      	cmp	r2, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_ddiv+0xa0>
 8000772:	e095      	b.n	80008a0 <__aeabi_ddiv+0x1cc>
 8000774:	4649      	mov	r1, r9
 8000776:	2302      	movs	r3, #2
 8000778:	4319      	orrs	r1, r3
 800077a:	4689      	mov	r9, r1
 800077c:	2400      	movs	r4, #0
 800077e:	2002      	movs	r0, #2
 8000780:	e7e5      	b.n	800074e <__aeabi_ddiv+0x7a>
 8000782:	2300      	movs	r3, #0
 8000784:	2400      	movs	r4, #0
 8000786:	2500      	movs	r5, #0
 8000788:	4652      	mov	r2, sl
 800078a:	051b      	lsls	r3, r3, #20
 800078c:	4323      	orrs	r3, r4
 800078e:	07d2      	lsls	r2, r2, #31
 8000790:	4313      	orrs	r3, r2
 8000792:	0028      	movs	r0, r5
 8000794:	0019      	movs	r1, r3
 8000796:	b005      	add	sp, #20
 8000798:	bcf0      	pop	{r4, r5, r6, r7}
 800079a:	46bb      	mov	fp, r7
 800079c:	46b2      	mov	sl, r6
 800079e:	46a9      	mov	r9, r5
 80007a0:	46a0      	mov	r8, r4
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a4:	2400      	movs	r4, #0
 80007a6:	2500      	movs	r5, #0
 80007a8:	4b5b      	ldr	r3, [pc, #364]	; (8000918 <__aeabi_ddiv+0x244>)
 80007aa:	e7ed      	b.n	8000788 <__aeabi_ddiv+0xb4>
 80007ac:	464b      	mov	r3, r9
 80007ae:	4323      	orrs	r3, r4
 80007b0:	4698      	mov	r8, r3
 80007b2:	d100      	bne.n	80007b6 <__aeabi_ddiv+0xe2>
 80007b4:	e089      	b.n	80008ca <__aeabi_ddiv+0x1f6>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_ddiv+0xe8>
 80007ba:	e1e0      	b.n	8000b7e <__aeabi_ddiv+0x4aa>
 80007bc:	0020      	movs	r0, r4
 80007be:	f000 fdad 	bl	800131c <__clzsi2>
 80007c2:	0001      	movs	r1, r0
 80007c4:	0002      	movs	r2, r0
 80007c6:	390b      	subs	r1, #11
 80007c8:	231d      	movs	r3, #29
 80007ca:	1a5b      	subs	r3, r3, r1
 80007cc:	4649      	mov	r1, r9
 80007ce:	0010      	movs	r0, r2
 80007d0:	40d9      	lsrs	r1, r3
 80007d2:	3808      	subs	r0, #8
 80007d4:	4084      	lsls	r4, r0
 80007d6:	000b      	movs	r3, r1
 80007d8:	464d      	mov	r5, r9
 80007da:	4323      	orrs	r3, r4
 80007dc:	4698      	mov	r8, r3
 80007de:	4085      	lsls	r5, r0
 80007e0:	4851      	ldr	r0, [pc, #324]	; (8000928 <__aeabi_ddiv+0x254>)
 80007e2:	033c      	lsls	r4, r7, #12
 80007e4:	1a83      	subs	r3, r0, r2
 80007e6:	469b      	mov	fp, r3
 80007e8:	2300      	movs	r3, #0
 80007ea:	4699      	mov	r9, r3
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	007b      	lsls	r3, r7, #1
 80007f0:	4650      	mov	r0, sl
 80007f2:	0b24      	lsrs	r4, r4, #12
 80007f4:	0d5b      	lsrs	r3, r3, #21
 80007f6:	0fff      	lsrs	r7, r7, #31
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d197      	bne.n	800072c <__aeabi_ddiv+0x58>
 80007fc:	4652      	mov	r2, sl
 80007fe:	4322      	orrs	r2, r4
 8000800:	d055      	beq.n	80008ae <__aeabi_ddiv+0x1da>
 8000802:	2c00      	cmp	r4, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_ddiv+0x134>
 8000806:	e1ca      	b.n	8000b9e <__aeabi_ddiv+0x4ca>
 8000808:	0020      	movs	r0, r4
 800080a:	f000 fd87 	bl	800131c <__clzsi2>
 800080e:	0002      	movs	r2, r0
 8000810:	3a0b      	subs	r2, #11
 8000812:	231d      	movs	r3, #29
 8000814:	0001      	movs	r1, r0
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	4652      	mov	r2, sl
 800081a:	3908      	subs	r1, #8
 800081c:	40da      	lsrs	r2, r3
 800081e:	408c      	lsls	r4, r1
 8000820:	4314      	orrs	r4, r2
 8000822:	4652      	mov	r2, sl
 8000824:	408a      	lsls	r2, r1
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <__aeabi_ddiv+0x258>)
 8000828:	4458      	add	r0, fp
 800082a:	469b      	mov	fp, r3
 800082c:	4483      	add	fp, r0
 800082e:	2000      	movs	r0, #0
 8000830:	e78d      	b.n	800074e <__aeabi_ddiv+0x7a>
 8000832:	464b      	mov	r3, r9
 8000834:	4323      	orrs	r3, r4
 8000836:	4698      	mov	r8, r3
 8000838:	d140      	bne.n	80008bc <__aeabi_ddiv+0x1e8>
 800083a:	2308      	movs	r3, #8
 800083c:	4699      	mov	r9, r3
 800083e:	3b06      	subs	r3, #6
 8000840:	2500      	movs	r5, #0
 8000842:	4683      	mov	fp, r0
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	e769      	b.n	800071c <__aeabi_ddiv+0x48>
 8000848:	46b2      	mov	sl, r6
 800084a:	9b00      	ldr	r3, [sp, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d0a9      	beq.n	80007a4 <__aeabi_ddiv+0xd0>
 8000850:	2b03      	cmp	r3, #3
 8000852:	d100      	bne.n	8000856 <__aeabi_ddiv+0x182>
 8000854:	e211      	b.n	8000c7a <__aeabi_ddiv+0x5a6>
 8000856:	2b01      	cmp	r3, #1
 8000858:	d093      	beq.n	8000782 <__aeabi_ddiv+0xae>
 800085a:	4a35      	ldr	r2, [pc, #212]	; (8000930 <__aeabi_ddiv+0x25c>)
 800085c:	445a      	add	r2, fp
 800085e:	2a00      	cmp	r2, #0
 8000860:	dc00      	bgt.n	8000864 <__aeabi_ddiv+0x190>
 8000862:	e13c      	b.n	8000ade <__aeabi_ddiv+0x40a>
 8000864:	076b      	lsls	r3, r5, #29
 8000866:	d000      	beq.n	800086a <__aeabi_ddiv+0x196>
 8000868:	e1a7      	b.n	8000bba <__aeabi_ddiv+0x4e6>
 800086a:	08ed      	lsrs	r5, r5, #3
 800086c:	4643      	mov	r3, r8
 800086e:	01db      	lsls	r3, r3, #7
 8000870:	d506      	bpl.n	8000880 <__aeabi_ddiv+0x1ac>
 8000872:	4642      	mov	r2, r8
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <__aeabi_ddiv+0x260>)
 8000876:	401a      	ands	r2, r3
 8000878:	4690      	mov	r8, r2
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	445a      	add	r2, fp
 8000880:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <__aeabi_ddiv+0x264>)
 8000882:	429a      	cmp	r2, r3
 8000884:	dc8e      	bgt.n	80007a4 <__aeabi_ddiv+0xd0>
 8000886:	4643      	mov	r3, r8
 8000888:	0552      	lsls	r2, r2, #21
 800088a:	0758      	lsls	r0, r3, #29
 800088c:	025c      	lsls	r4, r3, #9
 800088e:	4305      	orrs	r5, r0
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	0d53      	lsrs	r3, r2, #21
 8000894:	e778      	b.n	8000788 <__aeabi_ddiv+0xb4>
 8000896:	46ba      	mov	sl, r7
 8000898:	46a0      	mov	r8, r4
 800089a:	0015      	movs	r5, r2
 800089c:	9000      	str	r0, [sp, #0]
 800089e:	e7d4      	b.n	800084a <__aeabi_ddiv+0x176>
 80008a0:	464a      	mov	r2, r9
 80008a2:	2303      	movs	r3, #3
 80008a4:	431a      	orrs	r2, r3
 80008a6:	4691      	mov	r9, r2
 80008a8:	2003      	movs	r0, #3
 80008aa:	4652      	mov	r2, sl
 80008ac:	e74f      	b.n	800074e <__aeabi_ddiv+0x7a>
 80008ae:	4649      	mov	r1, r9
 80008b0:	2301      	movs	r3, #1
 80008b2:	4319      	orrs	r1, r3
 80008b4:	4689      	mov	r9, r1
 80008b6:	2400      	movs	r4, #0
 80008b8:	2001      	movs	r0, #1
 80008ba:	e748      	b.n	800074e <__aeabi_ddiv+0x7a>
 80008bc:	230c      	movs	r3, #12
 80008be:	4699      	mov	r9, r3
 80008c0:	3b09      	subs	r3, #9
 80008c2:	46a0      	mov	r8, r4
 80008c4:	4683      	mov	fp, r0
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	e728      	b.n	800071c <__aeabi_ddiv+0x48>
 80008ca:	2304      	movs	r3, #4
 80008cc:	4699      	mov	r9, r3
 80008ce:	2300      	movs	r3, #0
 80008d0:	469b      	mov	fp, r3
 80008d2:	3301      	adds	r3, #1
 80008d4:	2500      	movs	r5, #0
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	e720      	b.n	800071c <__aeabi_ddiv+0x48>
 80008da:	2300      	movs	r3, #0
 80008dc:	2480      	movs	r4, #128	; 0x80
 80008de:	469a      	mov	sl, r3
 80008e0:	2500      	movs	r5, #0
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <__aeabi_ddiv+0x244>)
 80008e4:	0324      	lsls	r4, r4, #12
 80008e6:	e74f      	b.n	8000788 <__aeabi_ddiv+0xb4>
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	4641      	mov	r1, r8
 80008ec:	031b      	lsls	r3, r3, #12
 80008ee:	4219      	tst	r1, r3
 80008f0:	d008      	beq.n	8000904 <__aeabi_ddiv+0x230>
 80008f2:	421c      	tst	r4, r3
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x230>
 80008f6:	431c      	orrs	r4, r3
 80008f8:	0324      	lsls	r4, r4, #12
 80008fa:	46ba      	mov	sl, r7
 80008fc:	0015      	movs	r5, r2
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <__aeabi_ddiv+0x244>)
 8000900:	0b24      	lsrs	r4, r4, #12
 8000902:	e741      	b.n	8000788 <__aeabi_ddiv+0xb4>
 8000904:	2480      	movs	r4, #128	; 0x80
 8000906:	4643      	mov	r3, r8
 8000908:	0324      	lsls	r4, r4, #12
 800090a:	431c      	orrs	r4, r3
 800090c:	0324      	lsls	r4, r4, #12
 800090e:	46b2      	mov	sl, r6
 8000910:	4b01      	ldr	r3, [pc, #4]	; (8000918 <__aeabi_ddiv+0x244>)
 8000912:	0b24      	lsrs	r4, r4, #12
 8000914:	e738      	b.n	8000788 <__aeabi_ddiv+0xb4>
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	000007ff 	.word	0x000007ff
 800091c:	fffffc01 	.word	0xfffffc01
 8000920:	080048d0 	.word	0x080048d0
 8000924:	fffff801 	.word	0xfffff801
 8000928:	fffffc0d 	.word	0xfffffc0d
 800092c:	000003f3 	.word	0x000003f3
 8000930:	000003ff 	.word	0x000003ff
 8000934:	feffffff 	.word	0xfeffffff
 8000938:	000007fe 	.word	0x000007fe
 800093c:	4544      	cmp	r4, r8
 800093e:	d200      	bcs.n	8000942 <__aeabi_ddiv+0x26e>
 8000940:	e116      	b.n	8000b70 <__aeabi_ddiv+0x49c>
 8000942:	d100      	bne.n	8000946 <__aeabi_ddiv+0x272>
 8000944:	e111      	b.n	8000b6a <__aeabi_ddiv+0x496>
 8000946:	2301      	movs	r3, #1
 8000948:	425b      	negs	r3, r3
 800094a:	469c      	mov	ip, r3
 800094c:	002e      	movs	r6, r5
 800094e:	4640      	mov	r0, r8
 8000950:	2500      	movs	r5, #0
 8000952:	44e3      	add	fp, ip
 8000954:	0223      	lsls	r3, r4, #8
 8000956:	0e14      	lsrs	r4, r2, #24
 8000958:	431c      	orrs	r4, r3
 800095a:	0c1b      	lsrs	r3, r3, #16
 800095c:	4699      	mov	r9, r3
 800095e:	0423      	lsls	r3, r4, #16
 8000960:	0c1f      	lsrs	r7, r3, #16
 8000962:	0212      	lsls	r2, r2, #8
 8000964:	4649      	mov	r1, r9
 8000966:	9200      	str	r2, [sp, #0]
 8000968:	9701      	str	r7, [sp, #4]
 800096a:	f7ff fc65 	bl	8000238 <__aeabi_uidivmod>
 800096e:	0002      	movs	r2, r0
 8000970:	437a      	muls	r2, r7
 8000972:	040b      	lsls	r3, r1, #16
 8000974:	0c31      	lsrs	r1, r6, #16
 8000976:	4680      	mov	r8, r0
 8000978:	4319      	orrs	r1, r3
 800097a:	428a      	cmp	r2, r1
 800097c:	d90b      	bls.n	8000996 <__aeabi_ddiv+0x2c2>
 800097e:	2301      	movs	r3, #1
 8000980:	425b      	negs	r3, r3
 8000982:	469c      	mov	ip, r3
 8000984:	1909      	adds	r1, r1, r4
 8000986:	44e0      	add	r8, ip
 8000988:	428c      	cmp	r4, r1
 800098a:	d804      	bhi.n	8000996 <__aeabi_ddiv+0x2c2>
 800098c:	428a      	cmp	r2, r1
 800098e:	d902      	bls.n	8000996 <__aeabi_ddiv+0x2c2>
 8000990:	1e83      	subs	r3, r0, #2
 8000992:	4698      	mov	r8, r3
 8000994:	1909      	adds	r1, r1, r4
 8000996:	1a88      	subs	r0, r1, r2
 8000998:	4649      	mov	r1, r9
 800099a:	f7ff fc4d 	bl	8000238 <__aeabi_uidivmod>
 800099e:	0409      	lsls	r1, r1, #16
 80009a0:	468c      	mov	ip, r1
 80009a2:	0431      	lsls	r1, r6, #16
 80009a4:	4666      	mov	r6, ip
 80009a6:	9a01      	ldr	r2, [sp, #4]
 80009a8:	0c09      	lsrs	r1, r1, #16
 80009aa:	4342      	muls	r2, r0
 80009ac:	0003      	movs	r3, r0
 80009ae:	4331      	orrs	r1, r6
 80009b0:	428a      	cmp	r2, r1
 80009b2:	d904      	bls.n	80009be <__aeabi_ddiv+0x2ea>
 80009b4:	1909      	adds	r1, r1, r4
 80009b6:	3b01      	subs	r3, #1
 80009b8:	428c      	cmp	r4, r1
 80009ba:	d800      	bhi.n	80009be <__aeabi_ddiv+0x2ea>
 80009bc:	e111      	b.n	8000be2 <__aeabi_ddiv+0x50e>
 80009be:	1a89      	subs	r1, r1, r2
 80009c0:	4642      	mov	r2, r8
 80009c2:	9e00      	ldr	r6, [sp, #0]
 80009c4:	0412      	lsls	r2, r2, #16
 80009c6:	431a      	orrs	r2, r3
 80009c8:	0c33      	lsrs	r3, r6, #16
 80009ca:	001f      	movs	r7, r3
 80009cc:	0c10      	lsrs	r0, r2, #16
 80009ce:	4690      	mov	r8, r2
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	0413      	lsls	r3, r2, #16
 80009d4:	0432      	lsls	r2, r6, #16
 80009d6:	0c16      	lsrs	r6, r2, #16
 80009d8:	0032      	movs	r2, r6
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	435a      	muls	r2, r3
 80009de:	9603      	str	r6, [sp, #12]
 80009e0:	437b      	muls	r3, r7
 80009e2:	4346      	muls	r6, r0
 80009e4:	4378      	muls	r0, r7
 80009e6:	0c17      	lsrs	r7, r2, #16
 80009e8:	46bc      	mov	ip, r7
 80009ea:	199b      	adds	r3, r3, r6
 80009ec:	4463      	add	r3, ip
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d903      	bls.n	80009fa <__aeabi_ddiv+0x326>
 80009f2:	2680      	movs	r6, #128	; 0x80
 80009f4:	0276      	lsls	r6, r6, #9
 80009f6:	46b4      	mov	ip, r6
 80009f8:	4460      	add	r0, ip
 80009fa:	0c1e      	lsrs	r6, r3, #16
 80009fc:	1830      	adds	r0, r6, r0
 80009fe:	0416      	lsls	r6, r2, #16
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	0c36      	lsrs	r6, r6, #16
 8000a04:	199e      	adds	r6, r3, r6
 8000a06:	4281      	cmp	r1, r0
 8000a08:	d200      	bcs.n	8000a0c <__aeabi_ddiv+0x338>
 8000a0a:	e09c      	b.n	8000b46 <__aeabi_ddiv+0x472>
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_ddiv+0x33c>
 8000a0e:	e097      	b.n	8000b40 <__aeabi_ddiv+0x46c>
 8000a10:	1bae      	subs	r6, r5, r6
 8000a12:	1a09      	subs	r1, r1, r0
 8000a14:	42b5      	cmp	r5, r6
 8000a16:	4180      	sbcs	r0, r0
 8000a18:	4240      	negs	r0, r0
 8000a1a:	1a08      	subs	r0, r1, r0
 8000a1c:	4284      	cmp	r4, r0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_ddiv+0x34e>
 8000a20:	e111      	b.n	8000c46 <__aeabi_ddiv+0x572>
 8000a22:	4649      	mov	r1, r9
 8000a24:	f7ff fc08 	bl	8000238 <__aeabi_uidivmod>
 8000a28:	9a01      	ldr	r2, [sp, #4]
 8000a2a:	040b      	lsls	r3, r1, #16
 8000a2c:	4342      	muls	r2, r0
 8000a2e:	0c31      	lsrs	r1, r6, #16
 8000a30:	0005      	movs	r5, r0
 8000a32:	4319      	orrs	r1, r3
 8000a34:	428a      	cmp	r2, r1
 8000a36:	d907      	bls.n	8000a48 <__aeabi_ddiv+0x374>
 8000a38:	1909      	adds	r1, r1, r4
 8000a3a:	3d01      	subs	r5, #1
 8000a3c:	428c      	cmp	r4, r1
 8000a3e:	d803      	bhi.n	8000a48 <__aeabi_ddiv+0x374>
 8000a40:	428a      	cmp	r2, r1
 8000a42:	d901      	bls.n	8000a48 <__aeabi_ddiv+0x374>
 8000a44:	1e85      	subs	r5, r0, #2
 8000a46:	1909      	adds	r1, r1, r4
 8000a48:	1a88      	subs	r0, r1, r2
 8000a4a:	4649      	mov	r1, r9
 8000a4c:	f7ff fbf4 	bl	8000238 <__aeabi_uidivmod>
 8000a50:	0409      	lsls	r1, r1, #16
 8000a52:	468c      	mov	ip, r1
 8000a54:	0431      	lsls	r1, r6, #16
 8000a56:	4666      	mov	r6, ip
 8000a58:	9a01      	ldr	r2, [sp, #4]
 8000a5a:	0c09      	lsrs	r1, r1, #16
 8000a5c:	4342      	muls	r2, r0
 8000a5e:	0003      	movs	r3, r0
 8000a60:	4331      	orrs	r1, r6
 8000a62:	428a      	cmp	r2, r1
 8000a64:	d907      	bls.n	8000a76 <__aeabi_ddiv+0x3a2>
 8000a66:	1909      	adds	r1, r1, r4
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	428c      	cmp	r4, r1
 8000a6c:	d803      	bhi.n	8000a76 <__aeabi_ddiv+0x3a2>
 8000a6e:	428a      	cmp	r2, r1
 8000a70:	d901      	bls.n	8000a76 <__aeabi_ddiv+0x3a2>
 8000a72:	1e83      	subs	r3, r0, #2
 8000a74:	1909      	adds	r1, r1, r4
 8000a76:	9e03      	ldr	r6, [sp, #12]
 8000a78:	1a89      	subs	r1, r1, r2
 8000a7a:	0032      	movs	r2, r6
 8000a7c:	042d      	lsls	r5, r5, #16
 8000a7e:	431d      	orrs	r5, r3
 8000a80:	9f02      	ldr	r7, [sp, #8]
 8000a82:	042b      	lsls	r3, r5, #16
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	435a      	muls	r2, r3
 8000a88:	437b      	muls	r3, r7
 8000a8a:	469c      	mov	ip, r3
 8000a8c:	0c28      	lsrs	r0, r5, #16
 8000a8e:	4346      	muls	r6, r0
 8000a90:	0c13      	lsrs	r3, r2, #16
 8000a92:	44b4      	add	ip, r6
 8000a94:	4463      	add	r3, ip
 8000a96:	4378      	muls	r0, r7
 8000a98:	429e      	cmp	r6, r3
 8000a9a:	d903      	bls.n	8000aa4 <__aeabi_ddiv+0x3d0>
 8000a9c:	2680      	movs	r6, #128	; 0x80
 8000a9e:	0276      	lsls	r6, r6, #9
 8000aa0:	46b4      	mov	ip, r6
 8000aa2:	4460      	add	r0, ip
 8000aa4:	0c1e      	lsrs	r6, r3, #16
 8000aa6:	0412      	lsls	r2, r2, #16
 8000aa8:	041b      	lsls	r3, r3, #16
 8000aaa:	0c12      	lsrs	r2, r2, #16
 8000aac:	1830      	adds	r0, r6, r0
 8000aae:	189b      	adds	r3, r3, r2
 8000ab0:	4281      	cmp	r1, r0
 8000ab2:	d306      	bcc.n	8000ac2 <__aeabi_ddiv+0x3ee>
 8000ab4:	d002      	beq.n	8000abc <__aeabi_ddiv+0x3e8>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	431d      	orrs	r5, r3
 8000aba:	e6ce      	b.n	800085a <__aeabi_ddiv+0x186>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_ddiv+0x3ee>
 8000ac0:	e6cb      	b.n	800085a <__aeabi_ddiv+0x186>
 8000ac2:	1861      	adds	r1, r4, r1
 8000ac4:	1e6e      	subs	r6, r5, #1
 8000ac6:	42a1      	cmp	r1, r4
 8000ac8:	d200      	bcs.n	8000acc <__aeabi_ddiv+0x3f8>
 8000aca:	e0a4      	b.n	8000c16 <__aeabi_ddiv+0x542>
 8000acc:	4281      	cmp	r1, r0
 8000ace:	d200      	bcs.n	8000ad2 <__aeabi_ddiv+0x3fe>
 8000ad0:	e0c9      	b.n	8000c66 <__aeabi_ddiv+0x592>
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_ddiv+0x402>
 8000ad4:	e0d9      	b.n	8000c8a <__aeabi_ddiv+0x5b6>
 8000ad6:	0035      	movs	r5, r6
 8000ad8:	e7ed      	b.n	8000ab6 <__aeabi_ddiv+0x3e2>
 8000ada:	2501      	movs	r5, #1
 8000adc:	426d      	negs	r5, r5
 8000ade:	2101      	movs	r1, #1
 8000ae0:	1a89      	subs	r1, r1, r2
 8000ae2:	2938      	cmp	r1, #56	; 0x38
 8000ae4:	dd00      	ble.n	8000ae8 <__aeabi_ddiv+0x414>
 8000ae6:	e64c      	b.n	8000782 <__aeabi_ddiv+0xae>
 8000ae8:	291f      	cmp	r1, #31
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_ddiv+0x41a>
 8000aec:	e07f      	b.n	8000bee <__aeabi_ddiv+0x51a>
 8000aee:	231f      	movs	r3, #31
 8000af0:	425b      	negs	r3, r3
 8000af2:	1a9a      	subs	r2, r3, r2
 8000af4:	4643      	mov	r3, r8
 8000af6:	40d3      	lsrs	r3, r2
 8000af8:	2920      	cmp	r1, #32
 8000afa:	d004      	beq.n	8000b06 <__aeabi_ddiv+0x432>
 8000afc:	4644      	mov	r4, r8
 8000afe:	4a65      	ldr	r2, [pc, #404]	; (8000c94 <__aeabi_ddiv+0x5c0>)
 8000b00:	445a      	add	r2, fp
 8000b02:	4094      	lsls	r4, r2
 8000b04:	4325      	orrs	r5, r4
 8000b06:	1e6a      	subs	r2, r5, #1
 8000b08:	4195      	sbcs	r5, r2
 8000b0a:	2207      	movs	r2, #7
 8000b0c:	432b      	orrs	r3, r5
 8000b0e:	0015      	movs	r5, r2
 8000b10:	2400      	movs	r4, #0
 8000b12:	401d      	ands	r5, r3
 8000b14:	421a      	tst	r2, r3
 8000b16:	d100      	bne.n	8000b1a <__aeabi_ddiv+0x446>
 8000b18:	e0a1      	b.n	8000c5e <__aeabi_ddiv+0x58a>
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	2400      	movs	r4, #0
 8000b1e:	401a      	ands	r2, r3
 8000b20:	2a04      	cmp	r2, #4
 8000b22:	d100      	bne.n	8000b26 <__aeabi_ddiv+0x452>
 8000b24:	e098      	b.n	8000c58 <__aeabi_ddiv+0x584>
 8000b26:	1d1a      	adds	r2, r3, #4
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	419b      	sbcs	r3, r3
 8000b2c:	425b      	negs	r3, r3
 8000b2e:	18e4      	adds	r4, r4, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	0222      	lsls	r2, r4, #8
 8000b34:	d400      	bmi.n	8000b38 <__aeabi_ddiv+0x464>
 8000b36:	e08f      	b.n	8000c58 <__aeabi_ddiv+0x584>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	2400      	movs	r4, #0
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	e623      	b.n	8000788 <__aeabi_ddiv+0xb4>
 8000b40:	42b5      	cmp	r5, r6
 8000b42:	d300      	bcc.n	8000b46 <__aeabi_ddiv+0x472>
 8000b44:	e764      	b.n	8000a10 <__aeabi_ddiv+0x33c>
 8000b46:	4643      	mov	r3, r8
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	9b00      	ldr	r3, [sp, #0]
 8000b4c:	469c      	mov	ip, r3
 8000b4e:	4465      	add	r5, ip
 8000b50:	001f      	movs	r7, r3
 8000b52:	429d      	cmp	r5, r3
 8000b54:	419b      	sbcs	r3, r3
 8000b56:	425b      	negs	r3, r3
 8000b58:	191b      	adds	r3, r3, r4
 8000b5a:	18c9      	adds	r1, r1, r3
 8000b5c:	428c      	cmp	r4, r1
 8000b5e:	d23a      	bcs.n	8000bd6 <__aeabi_ddiv+0x502>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	d863      	bhi.n	8000c2c <__aeabi_ddiv+0x558>
 8000b64:	d060      	beq.n	8000c28 <__aeabi_ddiv+0x554>
 8000b66:	4690      	mov	r8, r2
 8000b68:	e752      	b.n	8000a10 <__aeabi_ddiv+0x33c>
 8000b6a:	42aa      	cmp	r2, r5
 8000b6c:	d900      	bls.n	8000b70 <__aeabi_ddiv+0x49c>
 8000b6e:	e6ea      	b.n	8000946 <__aeabi_ddiv+0x272>
 8000b70:	4643      	mov	r3, r8
 8000b72:	07de      	lsls	r6, r3, #31
 8000b74:	0858      	lsrs	r0, r3, #1
 8000b76:	086b      	lsrs	r3, r5, #1
 8000b78:	431e      	orrs	r6, r3
 8000b7a:	07ed      	lsls	r5, r5, #31
 8000b7c:	e6ea      	b.n	8000954 <__aeabi_ddiv+0x280>
 8000b7e:	4648      	mov	r0, r9
 8000b80:	f000 fbcc 	bl	800131c <__clzsi2>
 8000b84:	0001      	movs	r1, r0
 8000b86:	0002      	movs	r2, r0
 8000b88:	3115      	adds	r1, #21
 8000b8a:	3220      	adds	r2, #32
 8000b8c:	291c      	cmp	r1, #28
 8000b8e:	dc00      	bgt.n	8000b92 <__aeabi_ddiv+0x4be>
 8000b90:	e61a      	b.n	80007c8 <__aeabi_ddiv+0xf4>
 8000b92:	464b      	mov	r3, r9
 8000b94:	3808      	subs	r0, #8
 8000b96:	4083      	lsls	r3, r0
 8000b98:	2500      	movs	r5, #0
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	e620      	b.n	80007e0 <__aeabi_ddiv+0x10c>
 8000b9e:	f000 fbbd 	bl	800131c <__clzsi2>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	3215      	adds	r2, #21
 8000ba8:	3020      	adds	r0, #32
 8000baa:	2a1c      	cmp	r2, #28
 8000bac:	dc00      	bgt.n	8000bb0 <__aeabi_ddiv+0x4dc>
 8000bae:	e630      	b.n	8000812 <__aeabi_ddiv+0x13e>
 8000bb0:	4654      	mov	r4, sl
 8000bb2:	3b08      	subs	r3, #8
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	409c      	lsls	r4, r3
 8000bb8:	e635      	b.n	8000826 <__aeabi_ddiv+0x152>
 8000bba:	230f      	movs	r3, #15
 8000bbc:	402b      	ands	r3, r5
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x4f0>
 8000bc2:	e652      	b.n	800086a <__aeabi_ddiv+0x196>
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	42ab      	cmp	r3, r5
 8000bca:	419b      	sbcs	r3, r3
 8000bcc:	3504      	adds	r5, #4
 8000bce:	425b      	negs	r3, r3
 8000bd0:	08ed      	lsrs	r5, r5, #3
 8000bd2:	4498      	add	r8, r3
 8000bd4:	e64a      	b.n	800086c <__aeabi_ddiv+0x198>
 8000bd6:	428c      	cmp	r4, r1
 8000bd8:	d1c5      	bne.n	8000b66 <__aeabi_ddiv+0x492>
 8000bda:	42af      	cmp	r7, r5
 8000bdc:	d9c0      	bls.n	8000b60 <__aeabi_ddiv+0x48c>
 8000bde:	4690      	mov	r8, r2
 8000be0:	e716      	b.n	8000a10 <__aeabi_ddiv+0x33c>
 8000be2:	428a      	cmp	r2, r1
 8000be4:	d800      	bhi.n	8000be8 <__aeabi_ddiv+0x514>
 8000be6:	e6ea      	b.n	80009be <__aeabi_ddiv+0x2ea>
 8000be8:	1e83      	subs	r3, r0, #2
 8000bea:	1909      	adds	r1, r1, r4
 8000bec:	e6e7      	b.n	80009be <__aeabi_ddiv+0x2ea>
 8000bee:	4a2a      	ldr	r2, [pc, #168]	; (8000c98 <__aeabi_ddiv+0x5c4>)
 8000bf0:	0028      	movs	r0, r5
 8000bf2:	445a      	add	r2, fp
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	4093      	lsls	r3, r2
 8000bfa:	40c8      	lsrs	r0, r1
 8000bfc:	1e6a      	subs	r2, r5, #1
 8000bfe:	4195      	sbcs	r5, r2
 8000c00:	4644      	mov	r4, r8
 8000c02:	4303      	orrs	r3, r0
 8000c04:	432b      	orrs	r3, r5
 8000c06:	40cc      	lsrs	r4, r1
 8000c08:	075a      	lsls	r2, r3, #29
 8000c0a:	d092      	beq.n	8000b32 <__aeabi_ddiv+0x45e>
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	401a      	ands	r2, r3
 8000c10:	2a04      	cmp	r2, #4
 8000c12:	d188      	bne.n	8000b26 <__aeabi_ddiv+0x452>
 8000c14:	e78d      	b.n	8000b32 <__aeabi_ddiv+0x45e>
 8000c16:	0035      	movs	r5, r6
 8000c18:	4281      	cmp	r1, r0
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_ddiv+0x54a>
 8000c1c:	e74b      	b.n	8000ab6 <__aeabi_ddiv+0x3e2>
 8000c1e:	9a00      	ldr	r2, [sp, #0]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d000      	beq.n	8000c26 <__aeabi_ddiv+0x552>
 8000c24:	e747      	b.n	8000ab6 <__aeabi_ddiv+0x3e2>
 8000c26:	e618      	b.n	800085a <__aeabi_ddiv+0x186>
 8000c28:	42ae      	cmp	r6, r5
 8000c2a:	d99c      	bls.n	8000b66 <__aeabi_ddiv+0x492>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	425b      	negs	r3, r3
 8000c30:	469c      	mov	ip, r3
 8000c32:	9b00      	ldr	r3, [sp, #0]
 8000c34:	44e0      	add	r8, ip
 8000c36:	469c      	mov	ip, r3
 8000c38:	4465      	add	r5, ip
 8000c3a:	429d      	cmp	r5, r3
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	425b      	negs	r3, r3
 8000c40:	191b      	adds	r3, r3, r4
 8000c42:	18c9      	adds	r1, r1, r3
 8000c44:	e6e4      	b.n	8000a10 <__aeabi_ddiv+0x33c>
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <__aeabi_ddiv+0x5c8>)
 8000c48:	445a      	add	r2, fp
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	dc00      	bgt.n	8000c50 <__aeabi_ddiv+0x57c>
 8000c4e:	e744      	b.n	8000ada <__aeabi_ddiv+0x406>
 8000c50:	2301      	movs	r3, #1
 8000c52:	2500      	movs	r5, #0
 8000c54:	4498      	add	r8, r3
 8000c56:	e609      	b.n	800086c <__aeabi_ddiv+0x198>
 8000c58:	0765      	lsls	r5, r4, #29
 8000c5a:	0264      	lsls	r4, r4, #9
 8000c5c:	0b24      	lsrs	r4, r4, #12
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	431d      	orrs	r5, r3
 8000c62:	2300      	movs	r3, #0
 8000c64:	e590      	b.n	8000788 <__aeabi_ddiv+0xb4>
 8000c66:	9e00      	ldr	r6, [sp, #0]
 8000c68:	3d02      	subs	r5, #2
 8000c6a:	0072      	lsls	r2, r6, #1
 8000c6c:	42b2      	cmp	r2, r6
 8000c6e:	41bf      	sbcs	r7, r7
 8000c70:	427f      	negs	r7, r7
 8000c72:	193c      	adds	r4, r7, r4
 8000c74:	1909      	adds	r1, r1, r4
 8000c76:	9200      	str	r2, [sp, #0]
 8000c78:	e7ce      	b.n	8000c18 <__aeabi_ddiv+0x544>
 8000c7a:	2480      	movs	r4, #128	; 0x80
 8000c7c:	4643      	mov	r3, r8
 8000c7e:	0324      	lsls	r4, r4, #12
 8000c80:	431c      	orrs	r4, r3
 8000c82:	0324      	lsls	r4, r4, #12
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <__aeabi_ddiv+0x5cc>)
 8000c86:	0b24      	lsrs	r4, r4, #12
 8000c88:	e57e      	b.n	8000788 <__aeabi_ddiv+0xb4>
 8000c8a:	9a00      	ldr	r2, [sp, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3ea      	bcc.n	8000c66 <__aeabi_ddiv+0x592>
 8000c90:	0035      	movs	r5, r6
 8000c92:	e7c4      	b.n	8000c1e <__aeabi_ddiv+0x54a>
 8000c94:	0000043e 	.word	0x0000043e
 8000c98:	0000041e 	.word	0x0000041e
 8000c9c:	000003ff 	.word	0x000003ff
 8000ca0:	000007ff 	.word	0x000007ff

08000ca4 <__aeabi_dmul>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	464e      	mov	r6, r9
 8000caa:	4645      	mov	r5, r8
 8000cac:	46de      	mov	lr, fp
 8000cae:	b5e0      	push	{r5, r6, r7, lr}
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	030c      	lsls	r4, r1, #12
 8000cb4:	004b      	lsls	r3, r1, #1
 8000cb6:	0006      	movs	r6, r0
 8000cb8:	4692      	mov	sl, r2
 8000cba:	b087      	sub	sp, #28
 8000cbc:	0b24      	lsrs	r4, r4, #12
 8000cbe:	0d5b      	lsrs	r3, r3, #21
 8000cc0:	0fcf      	lsrs	r7, r1, #31
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d06c      	beq.n	8000da0 <__aeabi_dmul+0xfc>
 8000cc6:	4add      	ldr	r2, [pc, #884]	; (800103c <__aeabi_dmul+0x398>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d100      	bne.n	8000cce <__aeabi_dmul+0x2a>
 8000ccc:	e086      	b.n	8000ddc <__aeabi_dmul+0x138>
 8000cce:	0f42      	lsrs	r2, r0, #29
 8000cd0:	00e4      	lsls	r4, r4, #3
 8000cd2:	4314      	orrs	r4, r2
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	0412      	lsls	r2, r2, #16
 8000cd8:	4314      	orrs	r4, r2
 8000cda:	4ad9      	ldr	r2, [pc, #868]	; (8001040 <__aeabi_dmul+0x39c>)
 8000cdc:	00c5      	lsls	r5, r0, #3
 8000cde:	4694      	mov	ip, r2
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	469b      	mov	fp, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	4642      	mov	r2, r8
 8000cee:	031e      	lsls	r6, r3, #12
 8000cf0:	0fd2      	lsrs	r2, r2, #31
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4650      	mov	r0, sl
 8000cf6:	4690      	mov	r8, r2
 8000cf8:	0b36      	lsrs	r6, r6, #12
 8000cfa:	0d5b      	lsrs	r3, r3, #21
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dmul+0x5c>
 8000cfe:	e078      	b.n	8000df2 <__aeabi_dmul+0x14e>
 8000d00:	4ace      	ldr	r2, [pc, #824]	; (800103c <__aeabi_dmul+0x398>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d01d      	beq.n	8000d42 <__aeabi_dmul+0x9e>
 8000d06:	49ce      	ldr	r1, [pc, #824]	; (8001040 <__aeabi_dmul+0x39c>)
 8000d08:	0f42      	lsrs	r2, r0, #29
 8000d0a:	468c      	mov	ip, r1
 8000d0c:	9900      	ldr	r1, [sp, #0]
 8000d0e:	4463      	add	r3, ip
 8000d10:	00f6      	lsls	r6, r6, #3
 8000d12:	468c      	mov	ip, r1
 8000d14:	4316      	orrs	r6, r2
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	449c      	add	ip, r3
 8000d1a:	0412      	lsls	r2, r2, #16
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	4316      	orrs	r6, r2
 8000d20:	00c2      	lsls	r2, r0, #3
 8000d22:	2000      	movs	r0, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	9900      	ldr	r1, [sp, #0]
 8000d28:	4643      	mov	r3, r8
 8000d2a:	3101      	adds	r1, #1
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	4649      	mov	r1, r9
 8000d30:	407b      	eors	r3, r7
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	290f      	cmp	r1, #15
 8000d36:	d900      	bls.n	8000d3a <__aeabi_dmul+0x96>
 8000d38:	e07e      	b.n	8000e38 <__aeabi_dmul+0x194>
 8000d3a:	4bc2      	ldr	r3, [pc, #776]	; (8001044 <__aeabi_dmul+0x3a0>)
 8000d3c:	0089      	lsls	r1, r1, #2
 8000d3e:	5859      	ldr	r1, [r3, r1]
 8000d40:	468f      	mov	pc, r1
 8000d42:	4652      	mov	r2, sl
 8000d44:	9b00      	ldr	r3, [sp, #0]
 8000d46:	4332      	orrs	r2, r6
 8000d48:	d000      	beq.n	8000d4c <__aeabi_dmul+0xa8>
 8000d4a:	e156      	b.n	8000ffa <__aeabi_dmul+0x356>
 8000d4c:	49bb      	ldr	r1, [pc, #748]	; (800103c <__aeabi_dmul+0x398>)
 8000d4e:	2600      	movs	r6, #0
 8000d50:	468c      	mov	ip, r1
 8000d52:	4463      	add	r3, ip
 8000d54:	4649      	mov	r1, r9
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2302      	movs	r3, #2
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2002      	movs	r0, #2
 8000d60:	e7e1      	b.n	8000d26 <__aeabi_dmul+0x82>
 8000d62:	4643      	mov	r3, r8
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	0034      	movs	r4, r6
 8000d68:	0015      	movs	r5, r2
 8000d6a:	4683      	mov	fp, r0
 8000d6c:	465b      	mov	r3, fp
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d05e      	beq.n	8000e30 <__aeabi_dmul+0x18c>
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dmul+0xd4>
 8000d76:	e1f3      	b.n	8001160 <__aeabi_dmul+0x4bc>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d000      	beq.n	8000d7e <__aeabi_dmul+0xda>
 8000d7c:	e118      	b.n	8000fb0 <__aeabi_dmul+0x30c>
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2400      	movs	r4, #0
 8000d82:	2500      	movs	r5, #0
 8000d84:	9b01      	ldr	r3, [sp, #4]
 8000d86:	0512      	lsls	r2, r2, #20
 8000d88:	4322      	orrs	r2, r4
 8000d8a:	07db      	lsls	r3, r3, #31
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	0028      	movs	r0, r5
 8000d90:	0011      	movs	r1, r2
 8000d92:	b007      	add	sp, #28
 8000d94:	bcf0      	pop	{r4, r5, r6, r7}
 8000d96:	46bb      	mov	fp, r7
 8000d98:	46b2      	mov	sl, r6
 8000d9a:	46a9      	mov	r9, r5
 8000d9c:	46a0      	mov	r8, r4
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	0025      	movs	r5, r4
 8000da2:	4305      	orrs	r5, r0
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dmul+0x104>
 8000da6:	e141      	b.n	800102c <__aeabi_dmul+0x388>
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dmul+0x10a>
 8000dac:	e1ad      	b.n	800110a <__aeabi_dmul+0x466>
 8000dae:	0020      	movs	r0, r4
 8000db0:	f000 fab4 	bl	800131c <__clzsi2>
 8000db4:	0001      	movs	r1, r0
 8000db6:	0002      	movs	r2, r0
 8000db8:	390b      	subs	r1, #11
 8000dba:	231d      	movs	r3, #29
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	1a5b      	subs	r3, r3, r1
 8000dc0:	0031      	movs	r1, r6
 8000dc2:	0035      	movs	r5, r6
 8000dc4:	3808      	subs	r0, #8
 8000dc6:	4084      	lsls	r4, r0
 8000dc8:	40d9      	lsrs	r1, r3
 8000dca:	4085      	lsls	r5, r0
 8000dcc:	430c      	orrs	r4, r1
 8000dce:	489e      	ldr	r0, [pc, #632]	; (8001048 <__aeabi_dmul+0x3a4>)
 8000dd0:	1a83      	subs	r3, r0, r2
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	469b      	mov	fp, r3
 8000dda:	e786      	b.n	8000cea <__aeabi_dmul+0x46>
 8000ddc:	0005      	movs	r5, r0
 8000dde:	4325      	orrs	r5, r4
 8000de0:	d000      	beq.n	8000de4 <__aeabi_dmul+0x140>
 8000de2:	e11c      	b.n	800101e <__aeabi_dmul+0x37a>
 8000de4:	2208      	movs	r2, #8
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2302      	movs	r3, #2
 8000dea:	2400      	movs	r4, #0
 8000dec:	4691      	mov	r9, r2
 8000dee:	469b      	mov	fp, r3
 8000df0:	e77b      	b.n	8000cea <__aeabi_dmul+0x46>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4332      	orrs	r2, r6
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dmul+0x156>
 8000df8:	e10a      	b.n	8001010 <__aeabi_dmul+0x36c>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dmul+0x15c>
 8000dfe:	e176      	b.n	80010ee <__aeabi_dmul+0x44a>
 8000e00:	0030      	movs	r0, r6
 8000e02:	f000 fa8b 	bl	800131c <__clzsi2>
 8000e06:	0002      	movs	r2, r0
 8000e08:	3a0b      	subs	r2, #11
 8000e0a:	231d      	movs	r3, #29
 8000e0c:	0001      	movs	r1, r0
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	4652      	mov	r2, sl
 8000e12:	3908      	subs	r1, #8
 8000e14:	40da      	lsrs	r2, r3
 8000e16:	408e      	lsls	r6, r1
 8000e18:	4316      	orrs	r6, r2
 8000e1a:	4652      	mov	r2, sl
 8000e1c:	408a      	lsls	r2, r1
 8000e1e:	9b00      	ldr	r3, [sp, #0]
 8000e20:	4989      	ldr	r1, [pc, #548]	; (8001048 <__aeabi_dmul+0x3a4>)
 8000e22:	1a18      	subs	r0, r3, r0
 8000e24:	0003      	movs	r3, r0
 8000e26:	468c      	mov	ip, r1
 8000e28:	4463      	add	r3, ip
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	e77a      	b.n	8000d26 <__aeabi_dmul+0x82>
 8000e30:	2400      	movs	r4, #0
 8000e32:	2500      	movs	r5, #0
 8000e34:	4a81      	ldr	r2, [pc, #516]	; (800103c <__aeabi_dmul+0x398>)
 8000e36:	e7a5      	b.n	8000d84 <__aeabi_dmul+0xe0>
 8000e38:	0c2f      	lsrs	r7, r5, #16
 8000e3a:	042d      	lsls	r5, r5, #16
 8000e3c:	0c2d      	lsrs	r5, r5, #16
 8000e3e:	002b      	movs	r3, r5
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	0412      	lsls	r2, r2, #16
 8000e44:	0c12      	lsrs	r2, r2, #16
 8000e46:	4353      	muls	r3, r2
 8000e48:	4698      	mov	r8, r3
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	437b      	muls	r3, r7
 8000e50:	4699      	mov	r9, r3
 8000e52:	4348      	muls	r0, r1
 8000e54:	4448      	add	r0, r9
 8000e56:	4683      	mov	fp, r0
 8000e58:	4640      	mov	r0, r8
 8000e5a:	000b      	movs	r3, r1
 8000e5c:	0c00      	lsrs	r0, r0, #16
 8000e5e:	4682      	mov	sl, r0
 8000e60:	4658      	mov	r0, fp
 8000e62:	437b      	muls	r3, r7
 8000e64:	4450      	add	r0, sl
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	4581      	cmp	r9, r0
 8000e6a:	d906      	bls.n	8000e7a <__aeabi_dmul+0x1d6>
 8000e6c:	469a      	mov	sl, r3
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	025b      	lsls	r3, r3, #9
 8000e72:	4699      	mov	r9, r3
 8000e74:	44ca      	add	sl, r9
 8000e76:	4653      	mov	r3, sl
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0c03      	lsrs	r3, r0, #16
 8000e7c:	469b      	mov	fp, r3
 8000e7e:	4643      	mov	r3, r8
 8000e80:	041b      	lsls	r3, r3, #16
 8000e82:	0400      	lsls	r0, r0, #16
 8000e84:	0c1b      	lsrs	r3, r3, #16
 8000e86:	4698      	mov	r8, r3
 8000e88:	0003      	movs	r3, r0
 8000e8a:	4443      	add	r3, r8
 8000e8c:	9304      	str	r3, [sp, #16]
 8000e8e:	0c33      	lsrs	r3, r6, #16
 8000e90:	4699      	mov	r9, r3
 8000e92:	002b      	movs	r3, r5
 8000e94:	0436      	lsls	r6, r6, #16
 8000e96:	0c36      	lsrs	r6, r6, #16
 8000e98:	4373      	muls	r3, r6
 8000e9a:	4698      	mov	r8, r3
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	437b      	muls	r3, r7
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	435d      	muls	r5, r3
 8000ea6:	435f      	muls	r7, r3
 8000ea8:	4643      	mov	r3, r8
 8000eaa:	4455      	add	r5, sl
 8000eac:	0c18      	lsrs	r0, r3, #16
 8000eae:	1940      	adds	r0, r0, r5
 8000eb0:	4582      	cmp	sl, r0
 8000eb2:	d903      	bls.n	8000ebc <__aeabi_dmul+0x218>
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	469a      	mov	sl, r3
 8000eba:	4457      	add	r7, sl
 8000ebc:	0c05      	lsrs	r5, r0, #16
 8000ebe:	19eb      	adds	r3, r5, r7
 8000ec0:	9305      	str	r3, [sp, #20]
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	041d      	lsls	r5, r3, #16
 8000ec6:	0c2d      	lsrs	r5, r5, #16
 8000ec8:	0400      	lsls	r0, r0, #16
 8000eca:	1940      	adds	r0, r0, r5
 8000ecc:	0c25      	lsrs	r5, r4, #16
 8000ece:	0424      	lsls	r4, r4, #16
 8000ed0:	0c24      	lsrs	r4, r4, #16
 8000ed2:	0027      	movs	r7, r4
 8000ed4:	4357      	muls	r7, r2
 8000ed6:	436a      	muls	r2, r5
 8000ed8:	4690      	mov	r8, r2
 8000eda:	002a      	movs	r2, r5
 8000edc:	0c3b      	lsrs	r3, r7, #16
 8000ede:	469a      	mov	sl, r3
 8000ee0:	434a      	muls	r2, r1
 8000ee2:	4361      	muls	r1, r4
 8000ee4:	4441      	add	r1, r8
 8000ee6:	4451      	add	r1, sl
 8000ee8:	4483      	add	fp, r0
 8000eea:	4588      	cmp	r8, r1
 8000eec:	d903      	bls.n	8000ef6 <__aeabi_dmul+0x252>
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	025b      	lsls	r3, r3, #9
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	4442      	add	r2, r8
 8000ef6:	043f      	lsls	r7, r7, #16
 8000ef8:	0c0b      	lsrs	r3, r1, #16
 8000efa:	0c3f      	lsrs	r7, r7, #16
 8000efc:	0409      	lsls	r1, r1, #16
 8000efe:	19c9      	adds	r1, r1, r7
 8000f00:	0027      	movs	r7, r4
 8000f02:	4698      	mov	r8, r3
 8000f04:	464b      	mov	r3, r9
 8000f06:	4377      	muls	r7, r6
 8000f08:	435c      	muls	r4, r3
 8000f0a:	436e      	muls	r6, r5
 8000f0c:	435d      	muls	r5, r3
 8000f0e:	0c3b      	lsrs	r3, r7, #16
 8000f10:	4699      	mov	r9, r3
 8000f12:	19a4      	adds	r4, r4, r6
 8000f14:	444c      	add	r4, r9
 8000f16:	4442      	add	r2, r8
 8000f18:	9503      	str	r5, [sp, #12]
 8000f1a:	42a6      	cmp	r6, r4
 8000f1c:	d904      	bls.n	8000f28 <__aeabi_dmul+0x284>
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	025b      	lsls	r3, r3, #9
 8000f22:	4698      	mov	r8, r3
 8000f24:	4445      	add	r5, r8
 8000f26:	9503      	str	r5, [sp, #12]
 8000f28:	9b02      	ldr	r3, [sp, #8]
 8000f2a:	043f      	lsls	r7, r7, #16
 8000f2c:	445b      	add	r3, fp
 8000f2e:	001e      	movs	r6, r3
 8000f30:	4283      	cmp	r3, r0
 8000f32:	4180      	sbcs	r0, r0
 8000f34:	0423      	lsls	r3, r4, #16
 8000f36:	4698      	mov	r8, r3
 8000f38:	9b05      	ldr	r3, [sp, #20]
 8000f3a:	0c3f      	lsrs	r7, r7, #16
 8000f3c:	4447      	add	r7, r8
 8000f3e:	4698      	mov	r8, r3
 8000f40:	1876      	adds	r6, r6, r1
 8000f42:	428e      	cmp	r6, r1
 8000f44:	4189      	sbcs	r1, r1
 8000f46:	4447      	add	r7, r8
 8000f48:	4240      	negs	r0, r0
 8000f4a:	183d      	adds	r5, r7, r0
 8000f4c:	46a8      	mov	r8, r5
 8000f4e:	4693      	mov	fp, r2
 8000f50:	4249      	negs	r1, r1
 8000f52:	468a      	mov	sl, r1
 8000f54:	44c3      	add	fp, r8
 8000f56:	429f      	cmp	r7, r3
 8000f58:	41bf      	sbcs	r7, r7
 8000f5a:	4580      	cmp	r8, r0
 8000f5c:	4180      	sbcs	r0, r0
 8000f5e:	9b03      	ldr	r3, [sp, #12]
 8000f60:	44da      	add	sl, fp
 8000f62:	4698      	mov	r8, r3
 8000f64:	4653      	mov	r3, sl
 8000f66:	4240      	negs	r0, r0
 8000f68:	427f      	negs	r7, r7
 8000f6a:	4307      	orrs	r7, r0
 8000f6c:	0c24      	lsrs	r4, r4, #16
 8000f6e:	4593      	cmp	fp, r2
 8000f70:	4192      	sbcs	r2, r2
 8000f72:	458a      	cmp	sl, r1
 8000f74:	4189      	sbcs	r1, r1
 8000f76:	193f      	adds	r7, r7, r4
 8000f78:	0ddc      	lsrs	r4, r3, #23
 8000f7a:	9b04      	ldr	r3, [sp, #16]
 8000f7c:	0275      	lsls	r5, r6, #9
 8000f7e:	431d      	orrs	r5, r3
 8000f80:	1e68      	subs	r0, r5, #1
 8000f82:	4185      	sbcs	r5, r0
 8000f84:	4653      	mov	r3, sl
 8000f86:	4252      	negs	r2, r2
 8000f88:	4249      	negs	r1, r1
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	18bf      	adds	r7, r7, r2
 8000f8e:	4447      	add	r7, r8
 8000f90:	0df6      	lsrs	r6, r6, #23
 8000f92:	027f      	lsls	r7, r7, #9
 8000f94:	4335      	orrs	r5, r6
 8000f96:	025a      	lsls	r2, r3, #9
 8000f98:	433c      	orrs	r4, r7
 8000f9a:	4315      	orrs	r5, r2
 8000f9c:	01fb      	lsls	r3, r7, #7
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dmul+0x2fe>
 8000fa0:	e0c1      	b.n	8001126 <__aeabi_dmul+0x482>
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	086a      	lsrs	r2, r5, #1
 8000fa6:	400d      	ands	r5, r1
 8000fa8:	4315      	orrs	r5, r2
 8000faa:	07e2      	lsls	r2, r4, #31
 8000fac:	4315      	orrs	r5, r2
 8000fae:	0864      	lsrs	r4, r4, #1
 8000fb0:	4926      	ldr	r1, [pc, #152]	; (800104c <__aeabi_dmul+0x3a8>)
 8000fb2:	4461      	add	r1, ip
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	dd56      	ble.n	8001066 <__aeabi_dmul+0x3c2>
 8000fb8:	076b      	lsls	r3, r5, #29
 8000fba:	d009      	beq.n	8000fd0 <__aeabi_dmul+0x32c>
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	402a      	ands	r2, r5
 8000fc0:	2a04      	cmp	r2, #4
 8000fc2:	d005      	beq.n	8000fd0 <__aeabi_dmul+0x32c>
 8000fc4:	1d2a      	adds	r2, r5, #4
 8000fc6:	42aa      	cmp	r2, r5
 8000fc8:	41ad      	sbcs	r5, r5
 8000fca:	426d      	negs	r5, r5
 8000fcc:	1964      	adds	r4, r4, r5
 8000fce:	0015      	movs	r5, r2
 8000fd0:	01e3      	lsls	r3, r4, #7
 8000fd2:	d504      	bpl.n	8000fde <__aeabi_dmul+0x33a>
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <__aeabi_dmul+0x3ac>)
 8000fd8:	00c9      	lsls	r1, r1, #3
 8000fda:	4014      	ands	r4, r2
 8000fdc:	4461      	add	r1, ip
 8000fde:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <__aeabi_dmul+0x3b0>)
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	dd00      	ble.n	8000fe6 <__aeabi_dmul+0x342>
 8000fe4:	e724      	b.n	8000e30 <__aeabi_dmul+0x18c>
 8000fe6:	0762      	lsls	r2, r4, #29
 8000fe8:	08ed      	lsrs	r5, r5, #3
 8000fea:	0264      	lsls	r4, r4, #9
 8000fec:	0549      	lsls	r1, r1, #21
 8000fee:	4315      	orrs	r5, r2
 8000ff0:	0b24      	lsrs	r4, r4, #12
 8000ff2:	0d4a      	lsrs	r2, r1, #21
 8000ff4:	e6c6      	b.n	8000d84 <__aeabi_dmul+0xe0>
 8000ff6:	9701      	str	r7, [sp, #4]
 8000ff8:	e6b8      	b.n	8000d6c <__aeabi_dmul+0xc8>
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <__aeabi_dmul+0x398>)
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	4694      	mov	ip, r2
 8001000:	4463      	add	r3, ip
 8001002:	464a      	mov	r2, r9
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2303      	movs	r3, #3
 8001008:	431a      	orrs	r2, r3
 800100a:	4691      	mov	r9, r2
 800100c:	4652      	mov	r2, sl
 800100e:	e68a      	b.n	8000d26 <__aeabi_dmul+0x82>
 8001010:	4649      	mov	r1, r9
 8001012:	2301      	movs	r3, #1
 8001014:	4319      	orrs	r1, r3
 8001016:	4689      	mov	r9, r1
 8001018:	2600      	movs	r6, #0
 800101a:	2001      	movs	r0, #1
 800101c:	e683      	b.n	8000d26 <__aeabi_dmul+0x82>
 800101e:	220c      	movs	r2, #12
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2303      	movs	r3, #3
 8001024:	0005      	movs	r5, r0
 8001026:	4691      	mov	r9, r2
 8001028:	469b      	mov	fp, r3
 800102a:	e65e      	b.n	8000cea <__aeabi_dmul+0x46>
 800102c:	2304      	movs	r3, #4
 800102e:	4699      	mov	r9, r3
 8001030:	2300      	movs	r3, #0
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	2400      	movs	r4, #0
 8001038:	469b      	mov	fp, r3
 800103a:	e656      	b.n	8000cea <__aeabi_dmul+0x46>
 800103c:	000007ff 	.word	0x000007ff
 8001040:	fffffc01 	.word	0xfffffc01
 8001044:	08004910 	.word	0x08004910
 8001048:	fffffc0d 	.word	0xfffffc0d
 800104c:	000003ff 	.word	0x000003ff
 8001050:	feffffff 	.word	0xfeffffff
 8001054:	000007fe 	.word	0x000007fe
 8001058:	2300      	movs	r3, #0
 800105a:	2480      	movs	r4, #128	; 0x80
 800105c:	2500      	movs	r5, #0
 800105e:	4a44      	ldr	r2, [pc, #272]	; (8001170 <__aeabi_dmul+0x4cc>)
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	0324      	lsls	r4, r4, #12
 8001064:	e68e      	b.n	8000d84 <__aeabi_dmul+0xe0>
 8001066:	2001      	movs	r0, #1
 8001068:	1a40      	subs	r0, r0, r1
 800106a:	2838      	cmp	r0, #56	; 0x38
 800106c:	dd00      	ble.n	8001070 <__aeabi_dmul+0x3cc>
 800106e:	e686      	b.n	8000d7e <__aeabi_dmul+0xda>
 8001070:	281f      	cmp	r0, #31
 8001072:	dd5b      	ble.n	800112c <__aeabi_dmul+0x488>
 8001074:	221f      	movs	r2, #31
 8001076:	0023      	movs	r3, r4
 8001078:	4252      	negs	r2, r2
 800107a:	1a51      	subs	r1, r2, r1
 800107c:	40cb      	lsrs	r3, r1
 800107e:	0019      	movs	r1, r3
 8001080:	2820      	cmp	r0, #32
 8001082:	d003      	beq.n	800108c <__aeabi_dmul+0x3e8>
 8001084:	4a3b      	ldr	r2, [pc, #236]	; (8001174 <__aeabi_dmul+0x4d0>)
 8001086:	4462      	add	r2, ip
 8001088:	4094      	lsls	r4, r2
 800108a:	4325      	orrs	r5, r4
 800108c:	1e6a      	subs	r2, r5, #1
 800108e:	4195      	sbcs	r5, r2
 8001090:	002a      	movs	r2, r5
 8001092:	430a      	orrs	r2, r1
 8001094:	2107      	movs	r1, #7
 8001096:	000d      	movs	r5, r1
 8001098:	2400      	movs	r4, #0
 800109a:	4015      	ands	r5, r2
 800109c:	4211      	tst	r1, r2
 800109e:	d05b      	beq.n	8001158 <__aeabi_dmul+0x4b4>
 80010a0:	210f      	movs	r1, #15
 80010a2:	2400      	movs	r4, #0
 80010a4:	4011      	ands	r1, r2
 80010a6:	2904      	cmp	r1, #4
 80010a8:	d053      	beq.n	8001152 <__aeabi_dmul+0x4ae>
 80010aa:	1d11      	adds	r1, r2, #4
 80010ac:	4291      	cmp	r1, r2
 80010ae:	4192      	sbcs	r2, r2
 80010b0:	4252      	negs	r2, r2
 80010b2:	18a4      	adds	r4, r4, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	0223      	lsls	r3, r4, #8
 80010b8:	d54b      	bpl.n	8001152 <__aeabi_dmul+0x4ae>
 80010ba:	2201      	movs	r2, #1
 80010bc:	2400      	movs	r4, #0
 80010be:	2500      	movs	r5, #0
 80010c0:	e660      	b.n	8000d84 <__aeabi_dmul+0xe0>
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	031b      	lsls	r3, r3, #12
 80010c6:	421c      	tst	r4, r3
 80010c8:	d009      	beq.n	80010de <__aeabi_dmul+0x43a>
 80010ca:	421e      	tst	r6, r3
 80010cc:	d107      	bne.n	80010de <__aeabi_dmul+0x43a>
 80010ce:	4333      	orrs	r3, r6
 80010d0:	031c      	lsls	r4, r3, #12
 80010d2:	4643      	mov	r3, r8
 80010d4:	0015      	movs	r5, r2
 80010d6:	0b24      	lsrs	r4, r4, #12
 80010d8:	4a25      	ldr	r2, [pc, #148]	; (8001170 <__aeabi_dmul+0x4cc>)
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	e652      	b.n	8000d84 <__aeabi_dmul+0xe0>
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	0312      	lsls	r2, r2, #12
 80010e2:	4314      	orrs	r4, r2
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <__aeabi_dmul+0x4cc>)
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	9701      	str	r7, [sp, #4]
 80010ec:	e64a      	b.n	8000d84 <__aeabi_dmul+0xe0>
 80010ee:	f000 f915 	bl	800131c <__clzsi2>
 80010f2:	0003      	movs	r3, r0
 80010f4:	001a      	movs	r2, r3
 80010f6:	3215      	adds	r2, #21
 80010f8:	3020      	adds	r0, #32
 80010fa:	2a1c      	cmp	r2, #28
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_dmul+0x45c>
 80010fe:	e684      	b.n	8000e0a <__aeabi_dmul+0x166>
 8001100:	4656      	mov	r6, sl
 8001102:	3b08      	subs	r3, #8
 8001104:	2200      	movs	r2, #0
 8001106:	409e      	lsls	r6, r3
 8001108:	e689      	b.n	8000e1e <__aeabi_dmul+0x17a>
 800110a:	f000 f907 	bl	800131c <__clzsi2>
 800110e:	0001      	movs	r1, r0
 8001110:	0002      	movs	r2, r0
 8001112:	3115      	adds	r1, #21
 8001114:	3220      	adds	r2, #32
 8001116:	291c      	cmp	r1, #28
 8001118:	dc00      	bgt.n	800111c <__aeabi_dmul+0x478>
 800111a:	e64e      	b.n	8000dba <__aeabi_dmul+0x116>
 800111c:	0034      	movs	r4, r6
 800111e:	3808      	subs	r0, #8
 8001120:	2500      	movs	r5, #0
 8001122:	4084      	lsls	r4, r0
 8001124:	e653      	b.n	8000dce <__aeabi_dmul+0x12a>
 8001126:	9b00      	ldr	r3, [sp, #0]
 8001128:	469c      	mov	ip, r3
 800112a:	e741      	b.n	8000fb0 <__aeabi_dmul+0x30c>
 800112c:	4912      	ldr	r1, [pc, #72]	; (8001178 <__aeabi_dmul+0x4d4>)
 800112e:	0022      	movs	r2, r4
 8001130:	4461      	add	r1, ip
 8001132:	002e      	movs	r6, r5
 8001134:	408d      	lsls	r5, r1
 8001136:	408a      	lsls	r2, r1
 8001138:	40c6      	lsrs	r6, r0
 800113a:	1e69      	subs	r1, r5, #1
 800113c:	418d      	sbcs	r5, r1
 800113e:	4332      	orrs	r2, r6
 8001140:	432a      	orrs	r2, r5
 8001142:	40c4      	lsrs	r4, r0
 8001144:	0753      	lsls	r3, r2, #29
 8001146:	d0b6      	beq.n	80010b6 <__aeabi_dmul+0x412>
 8001148:	210f      	movs	r1, #15
 800114a:	4011      	ands	r1, r2
 800114c:	2904      	cmp	r1, #4
 800114e:	d1ac      	bne.n	80010aa <__aeabi_dmul+0x406>
 8001150:	e7b1      	b.n	80010b6 <__aeabi_dmul+0x412>
 8001152:	0765      	lsls	r5, r4, #29
 8001154:	0264      	lsls	r4, r4, #9
 8001156:	0b24      	lsrs	r4, r4, #12
 8001158:	08d2      	lsrs	r2, r2, #3
 800115a:	4315      	orrs	r5, r2
 800115c:	2200      	movs	r2, #0
 800115e:	e611      	b.n	8000d84 <__aeabi_dmul+0xe0>
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0312      	lsls	r2, r2, #12
 8001164:	4314      	orrs	r4, r2
 8001166:	0324      	lsls	r4, r4, #12
 8001168:	4a01      	ldr	r2, [pc, #4]	; (8001170 <__aeabi_dmul+0x4cc>)
 800116a:	0b24      	lsrs	r4, r4, #12
 800116c:	e60a      	b.n	8000d84 <__aeabi_dmul+0xe0>
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	000007ff 	.word	0x000007ff
 8001174:	0000043e 	.word	0x0000043e
 8001178:	0000041e 	.word	0x0000041e

0800117c <__aeabi_f2d>:
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	0043      	lsls	r3, r0, #1
 8001180:	0246      	lsls	r6, r0, #9
 8001182:	0fc4      	lsrs	r4, r0, #31
 8001184:	20fe      	movs	r0, #254	; 0xfe
 8001186:	0e1b      	lsrs	r3, r3, #24
 8001188:	1c59      	adds	r1, r3, #1
 800118a:	0a75      	lsrs	r5, r6, #9
 800118c:	4208      	tst	r0, r1
 800118e:	d00c      	beq.n	80011aa <__aeabi_f2d+0x2e>
 8001190:	22e0      	movs	r2, #224	; 0xe0
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4694      	mov	ip, r2
 8001196:	076d      	lsls	r5, r5, #29
 8001198:	0b36      	lsrs	r6, r6, #12
 800119a:	4463      	add	r3, ip
 800119c:	051b      	lsls	r3, r3, #20
 800119e:	4333      	orrs	r3, r6
 80011a0:	07e4      	lsls	r4, r4, #31
 80011a2:	4323      	orrs	r3, r4
 80011a4:	0028      	movs	r0, r5
 80011a6:	0019      	movs	r1, r3
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d114      	bne.n	80011d8 <__aeabi_f2d+0x5c>
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	d01b      	beq.n	80011ea <__aeabi_f2d+0x6e>
 80011b2:	0028      	movs	r0, r5
 80011b4:	f000 f8b2 	bl	800131c <__clzsi2>
 80011b8:	280a      	cmp	r0, #10
 80011ba:	dc1c      	bgt.n	80011f6 <__aeabi_f2d+0x7a>
 80011bc:	230b      	movs	r3, #11
 80011be:	002a      	movs	r2, r5
 80011c0:	1a1b      	subs	r3, r3, r0
 80011c2:	40da      	lsrs	r2, r3
 80011c4:	0003      	movs	r3, r0
 80011c6:	3315      	adds	r3, #21
 80011c8:	409d      	lsls	r5, r3
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <__aeabi_f2d+0x88>)
 80011cc:	0312      	lsls	r2, r2, #12
 80011ce:	1a1b      	subs	r3, r3, r0
 80011d0:	055b      	lsls	r3, r3, #21
 80011d2:	0b16      	lsrs	r6, r2, #12
 80011d4:	0d5b      	lsrs	r3, r3, #21
 80011d6:	e7e1      	b.n	800119c <__aeabi_f2d+0x20>
 80011d8:	2d00      	cmp	r5, #0
 80011da:	d009      	beq.n	80011f0 <__aeabi_f2d+0x74>
 80011dc:	0b32      	lsrs	r2, r6, #12
 80011de:	2680      	movs	r6, #128	; 0x80
 80011e0:	0336      	lsls	r6, r6, #12
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <__aeabi_f2d+0x8c>)
 80011e4:	076d      	lsls	r5, r5, #29
 80011e6:	4316      	orrs	r6, r2
 80011e8:	e7d8      	b.n	800119c <__aeabi_f2d+0x20>
 80011ea:	2300      	movs	r3, #0
 80011ec:	2600      	movs	r6, #0
 80011ee:	e7d5      	b.n	800119c <__aeabi_f2d+0x20>
 80011f0:	2600      	movs	r6, #0
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <__aeabi_f2d+0x8c>)
 80011f4:	e7d2      	b.n	800119c <__aeabi_f2d+0x20>
 80011f6:	0003      	movs	r3, r0
 80011f8:	002a      	movs	r2, r5
 80011fa:	3b0b      	subs	r3, #11
 80011fc:	409a      	lsls	r2, r3
 80011fe:	2500      	movs	r5, #0
 8001200:	e7e3      	b.n	80011ca <__aeabi_f2d+0x4e>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	00000389 	.word	0x00000389
 8001208:	000007ff 	.word	0x000007ff

0800120c <__aeabi_d2f>:
 800120c:	0002      	movs	r2, r0
 800120e:	004b      	lsls	r3, r1, #1
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	0308      	lsls	r0, r1, #12
 8001214:	0d5b      	lsrs	r3, r3, #21
 8001216:	4e3d      	ldr	r6, [pc, #244]	; (800130c <__aeabi_d2f+0x100>)
 8001218:	0fcc      	lsrs	r4, r1, #31
 800121a:	0a40      	lsrs	r0, r0, #9
 800121c:	0f51      	lsrs	r1, r2, #29
 800121e:	1c5f      	adds	r7, r3, #1
 8001220:	4308      	orrs	r0, r1
 8001222:	00d5      	lsls	r5, r2, #3
 8001224:	4237      	tst	r7, r6
 8001226:	d00a      	beq.n	800123e <__aeabi_d2f+0x32>
 8001228:	4939      	ldr	r1, [pc, #228]	; (8001310 <__aeabi_d2f+0x104>)
 800122a:	185e      	adds	r6, r3, r1
 800122c:	2efe      	cmp	r6, #254	; 0xfe
 800122e:	dd16      	ble.n	800125e <__aeabi_d2f+0x52>
 8001230:	23ff      	movs	r3, #255	; 0xff
 8001232:	2100      	movs	r1, #0
 8001234:	05db      	lsls	r3, r3, #23
 8001236:	430b      	orrs	r3, r1
 8001238:	07e0      	lsls	r0, r4, #31
 800123a:	4318      	orrs	r0, r3
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <__aeabi_d2f+0x44>
 8001242:	4328      	orrs	r0, r5
 8001244:	d027      	beq.n	8001296 <__aeabi_d2f+0x8a>
 8001246:	2105      	movs	r1, #5
 8001248:	0189      	lsls	r1, r1, #6
 800124a:	0a49      	lsrs	r1, r1, #9
 800124c:	b2db      	uxtb	r3, r3
 800124e:	e7f1      	b.n	8001234 <__aeabi_d2f+0x28>
 8001250:	4305      	orrs	r5, r0
 8001252:	d0ed      	beq.n	8001230 <__aeabi_d2f+0x24>
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	03c9      	lsls	r1, r1, #15
 8001258:	23ff      	movs	r3, #255	; 0xff
 800125a:	4301      	orrs	r1, r0
 800125c:	e7ea      	b.n	8001234 <__aeabi_d2f+0x28>
 800125e:	2e00      	cmp	r6, #0
 8001260:	dd1c      	ble.n	800129c <__aeabi_d2f+0x90>
 8001262:	0192      	lsls	r2, r2, #6
 8001264:	0011      	movs	r1, r2
 8001266:	1e4a      	subs	r2, r1, #1
 8001268:	4191      	sbcs	r1, r2
 800126a:	00c0      	lsls	r0, r0, #3
 800126c:	0f6d      	lsrs	r5, r5, #29
 800126e:	4301      	orrs	r1, r0
 8001270:	4329      	orrs	r1, r5
 8001272:	074b      	lsls	r3, r1, #29
 8001274:	d048      	beq.n	8001308 <__aeabi_d2f+0xfc>
 8001276:	230f      	movs	r3, #15
 8001278:	400b      	ands	r3, r1
 800127a:	2b04      	cmp	r3, #4
 800127c:	d000      	beq.n	8001280 <__aeabi_d2f+0x74>
 800127e:	3104      	adds	r1, #4
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	04db      	lsls	r3, r3, #19
 8001284:	400b      	ands	r3, r1
 8001286:	d03f      	beq.n	8001308 <__aeabi_d2f+0xfc>
 8001288:	1c72      	adds	r2, r6, #1
 800128a:	2efe      	cmp	r6, #254	; 0xfe
 800128c:	d0d0      	beq.n	8001230 <__aeabi_d2f+0x24>
 800128e:	0189      	lsls	r1, r1, #6
 8001290:	0a49      	lsrs	r1, r1, #9
 8001292:	b2d3      	uxtb	r3, r2
 8001294:	e7ce      	b.n	8001234 <__aeabi_d2f+0x28>
 8001296:	2300      	movs	r3, #0
 8001298:	2100      	movs	r1, #0
 800129a:	e7cb      	b.n	8001234 <__aeabi_d2f+0x28>
 800129c:	0032      	movs	r2, r6
 800129e:	3217      	adds	r2, #23
 80012a0:	db22      	blt.n	80012e8 <__aeabi_d2f+0xdc>
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	221e      	movs	r2, #30
 80012a6:	0409      	lsls	r1, r1, #16
 80012a8:	4308      	orrs	r0, r1
 80012aa:	1b92      	subs	r2, r2, r6
 80012ac:	2a1f      	cmp	r2, #31
 80012ae:	dd1d      	ble.n	80012ec <__aeabi_d2f+0xe0>
 80012b0:	2102      	movs	r1, #2
 80012b2:	4249      	negs	r1, r1
 80012b4:	1b8e      	subs	r6, r1, r6
 80012b6:	0001      	movs	r1, r0
 80012b8:	40f1      	lsrs	r1, r6
 80012ba:	000e      	movs	r6, r1
 80012bc:	2a20      	cmp	r2, #32
 80012be:	d004      	beq.n	80012ca <__aeabi_d2f+0xbe>
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <__aeabi_d2f+0x108>)
 80012c2:	4694      	mov	ip, r2
 80012c4:	4463      	add	r3, ip
 80012c6:	4098      	lsls	r0, r3
 80012c8:	4305      	orrs	r5, r0
 80012ca:	0029      	movs	r1, r5
 80012cc:	1e4d      	subs	r5, r1, #1
 80012ce:	41a9      	sbcs	r1, r5
 80012d0:	4331      	orrs	r1, r6
 80012d2:	2600      	movs	r6, #0
 80012d4:	074b      	lsls	r3, r1, #29
 80012d6:	d1ce      	bne.n	8001276 <__aeabi_d2f+0x6a>
 80012d8:	2080      	movs	r0, #128	; 0x80
 80012da:	000b      	movs	r3, r1
 80012dc:	04c0      	lsls	r0, r0, #19
 80012de:	2201      	movs	r2, #1
 80012e0:	4003      	ands	r3, r0
 80012e2:	4201      	tst	r1, r0
 80012e4:	d1d3      	bne.n	800128e <__aeabi_d2f+0x82>
 80012e6:	e7af      	b.n	8001248 <__aeabi_d2f+0x3c>
 80012e8:	2300      	movs	r3, #0
 80012ea:	e7ac      	b.n	8001246 <__aeabi_d2f+0x3a>
 80012ec:	490a      	ldr	r1, [pc, #40]	; (8001318 <__aeabi_d2f+0x10c>)
 80012ee:	468c      	mov	ip, r1
 80012f0:	0029      	movs	r1, r5
 80012f2:	4463      	add	r3, ip
 80012f4:	40d1      	lsrs	r1, r2
 80012f6:	409d      	lsls	r5, r3
 80012f8:	000a      	movs	r2, r1
 80012fa:	0029      	movs	r1, r5
 80012fc:	4098      	lsls	r0, r3
 80012fe:	1e4d      	subs	r5, r1, #1
 8001300:	41a9      	sbcs	r1, r5
 8001302:	4301      	orrs	r1, r0
 8001304:	4311      	orrs	r1, r2
 8001306:	e7e4      	b.n	80012d2 <__aeabi_d2f+0xc6>
 8001308:	0033      	movs	r3, r6
 800130a:	e79d      	b.n	8001248 <__aeabi_d2f+0x3c>
 800130c:	000007fe 	.word	0x000007fe
 8001310:	fffffc80 	.word	0xfffffc80
 8001314:	fffffca2 	.word	0xfffffca2
 8001318:	fffffc82 	.word	0xfffffc82

0800131c <__clzsi2>:
 800131c:	211c      	movs	r1, #28
 800131e:	2301      	movs	r3, #1
 8001320:	041b      	lsls	r3, r3, #16
 8001322:	4298      	cmp	r0, r3
 8001324:	d301      	bcc.n	800132a <__clzsi2+0xe>
 8001326:	0c00      	lsrs	r0, r0, #16
 8001328:	3910      	subs	r1, #16
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	4298      	cmp	r0, r3
 800132e:	d301      	bcc.n	8001334 <__clzsi2+0x18>
 8001330:	0a00      	lsrs	r0, r0, #8
 8001332:	3908      	subs	r1, #8
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	4298      	cmp	r0, r3
 8001338:	d301      	bcc.n	800133e <__clzsi2+0x22>
 800133a:	0900      	lsrs	r0, r0, #4
 800133c:	3904      	subs	r1, #4
 800133e:	a202      	add	r2, pc, #8	; (adr r2, 8001348 <__clzsi2+0x2c>)
 8001340:	5c10      	ldrb	r0, [r2, r0]
 8001342:	1840      	adds	r0, r0, r1
 8001344:	4770      	bx	lr
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	02020304 	.word	0x02020304
 800134c:	01010101 	.word	0x01010101
	...

08001358 <__clzdi2>:
 8001358:	b510      	push	{r4, lr}
 800135a:	2900      	cmp	r1, #0
 800135c:	d103      	bne.n	8001366 <__clzdi2+0xe>
 800135e:	f7ff ffdd 	bl	800131c <__clzsi2>
 8001362:	3020      	adds	r0, #32
 8001364:	e002      	b.n	800136c <__clzdi2+0x14>
 8001366:	1c08      	adds	r0, r1, #0
 8001368:	f7ff ffd8 	bl	800131c <__clzsi2>
 800136c:	bd10      	pop	{r4, pc}
 800136e:	46c0      	nop			; (mov r8, r8)

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f000 fb5f 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 f897 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f000 f995 	bl	80016ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001382:	f000 f963 	bl	800164c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001386:	f000 f8fd 	bl	8001584 <MX_ADC_Init>
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
//	  HAL_Delay (100);   /* Insert delay 1000 ms */
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//	  HAL_Delay (300);   /* Insert delay 1000 ms */

	  GPIO_PinState button_1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800138a:	2517      	movs	r5, #23
 800138c:	197c      	adds	r4, r7, r5
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	009a      	lsls	r2, r3, #2
 8001392:	23a0      	movs	r3, #160	; 0xa0
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f001 f995 	bl	80026c8 <HAL_GPIO_ReadPin>
 800139e:	0003      	movs	r3, r0
 80013a0:	7023      	strb	r3, [r4, #0]
	  GPIO_PinState button_2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80013a2:	2316      	movs	r3, #22
 80013a4:	18fc      	adds	r4, r7, r3
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <main+0x11c>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0018      	movs	r0, r3
 80013ac:	f001 f98c 	bl	80026c8 <HAL_GPIO_ReadPin>
 80013b0:	0003      	movs	r3, r0
 80013b2:	7023      	strb	r3, [r4, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, button_1);
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	00d9      	lsls	r1, r3, #3
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 f99e 	bl	8002702 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, button_1);
 80013c6:	197b      	adds	r3, r7, r5
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4831      	ldr	r0, [pc, #196]	; (8001490 <main+0x120>)
 80013cc:	001a      	movs	r2, r3
 80013ce:	2120      	movs	r1, #32
 80013d0:	f001 f997 	bl	8002702 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, button_2);

	  HAL_ADC_Start(&hadc);
 80013d4:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <main+0x124>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 fd36 	bl	8001e48 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013dc:	2301      	movs	r3, #1
 80013de:	425a      	negs	r2, r3
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <main+0x124>)
 80013e2:	0011      	movs	r1, r2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f000 fd83 	bl	8001ef0 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc);
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <main+0x124>)
 80013ec:	0018      	movs	r0, r3
 80013ee:	f000 fe15 	bl	800201c <HAL_ADC_GetValue>
 80013f2:	0003      	movs	r3, r0
 80013f4:	613b      	str	r3, [r7, #16]
	  float voltage = (float)adc_value / 4095.0 * 3.3;
 80013f6:	6938      	ldr	r0, [r7, #16]
 80013f8:	f7ff f930 	bl	800065c <__aeabi_ui2f>
 80013fc:	1c03      	adds	r3, r0, #0
 80013fe:	1c18      	adds	r0, r3, #0
 8001400:	f7ff febc 	bl	800117c <__aeabi_f2d>
 8001404:	2200      	movs	r2, #0
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <main+0x128>)
 8001408:	f7ff f964 	bl	80006d4 <__aeabi_ddiv>
 800140c:	0002      	movs	r2, r0
 800140e:	000b      	movs	r3, r1
 8001410:	0010      	movs	r0, r2
 8001412:	0019      	movs	r1, r3
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <main+0x12c>)
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <main+0x130>)
 8001418:	f7ff fc44 	bl	8000ca4 <__aeabi_dmul>
 800141c:	0002      	movs	r2, r0
 800141e:	000b      	movs	r3, r1
 8001420:	0010      	movs	r0, r2
 8001422:	0019      	movs	r1, r3
 8001424:	f7ff fef2 	bl	800120c <__aeabi_d2f>
 8001428:	1c03      	adds	r3, r0, #0
 800142a:	60fb      	str	r3, [r7, #12]

	  if (voltage > 1.5){
 800142c:	21ff      	movs	r1, #255	; 0xff
 800142e:	0589      	lsls	r1, r1, #22
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7fe ff2d 	bl	8000290 <__aeabi_fcmpgt>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d008      	beq.n	800144c <main+0xdc>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	0059      	lsls	r1, r3, #1
 800143e:	23a0      	movs	r3, #160	; 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	2201      	movs	r2, #1
 8001444:	0018      	movs	r0, r3
 8001446:	f001 f95c 	bl	8002702 <HAL_GPIO_WritePin>
 800144a:	e007      	b.n	800145c <main+0xec>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	0059      	lsls	r1, r3, #1
 8001450:	23a0      	movs	r3, #160	; 0xa0
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	2200      	movs	r2, #0
 8001456:	0018      	movs	r0, r3
 8001458:	f001 f953 	bl	8002702 <HAL_GPIO_WritePin>
	  }

	  sprintf(msg, "%hu\r\n", adc_value);
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4911      	ldr	r1, [pc, #68]	; (80014a4 <main+0x134>)
 8001460:	003b      	movs	r3, r7
 8001462:	0018      	movs	r0, r3
 8001464:	f002 fdfe 	bl	8004064 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001468:	003b      	movs	r3, r7
 800146a:	0018      	movs	r0, r3
 800146c:	f7fe fe4c 	bl	8000108 <strlen>
 8001470:	0003      	movs	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	2301      	movs	r3, #1
 8001476:	425b      	negs	r3, r3
 8001478:	0039      	movs	r1, r7
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <main+0x138>)
 800147c:	f002 f8fe 	bl	800367c <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8001480:	23fa      	movs	r3, #250	; 0xfa
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	0018      	movs	r0, r3
 8001486:	f000 fb47 	bl	8001b18 <HAL_Delay>
  {
 800148a:	e77e      	b.n	800138a <main+0x1a>
 800148c:	50000800 	.word	0x50000800
 8001490:	50000400 	.word	0x50000400
 8001494:	2000011c 	.word	0x2000011c
 8001498:	40affe00 	.word	0x40affe00
 800149c:	66666666 	.word	0x66666666
 80014a0:	400a6666 	.word	0x400a6666
 80014a4:	080048c8 	.word	0x080048c8
 80014a8:	20000098 	.word	0x20000098

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b09d      	sub	sp, #116	; 0x74
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	2438      	movs	r4, #56	; 0x38
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	0018      	movs	r0, r3
 80014b8:	2338      	movs	r3, #56	; 0x38
 80014ba:	001a      	movs	r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	f002 fdc9 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c2:	2324      	movs	r3, #36	; 0x24
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	0018      	movs	r0, r3
 80014c8:	2314      	movs	r3, #20
 80014ca:	001a      	movs	r2, r3
 80014cc:	2100      	movs	r1, #0
 80014ce:	f002 fdc1 	bl	8004054 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d2:	003b      	movs	r3, r7
 80014d4:	0018      	movs	r0, r3
 80014d6:	2324      	movs	r3, #36	; 0x24
 80014d8:	001a      	movs	r2, r3
 80014da:	2100      	movs	r1, #0
 80014dc:	f002 fdba 	bl	8004054 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <SystemClock_Config+0xd0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a26      	ldr	r2, [pc, #152]	; (8001580 <SystemClock_Config+0xd4>)
 80014e6:	401a      	ands	r2, r3
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <SystemClock_Config+0xd0>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0109      	lsls	r1, r1, #4
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014f2:	0021      	movs	r1, r4
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	2210      	movs	r2, #16
 80014f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014fa:	187b      	adds	r3, r7, r1
 80014fc:	2201      	movs	r2, #1
 80014fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001500:	187b      	adds	r3, r7, r1
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	22a0      	movs	r2, #160	; 0xa0
 800150a:	0212      	lsls	r2, r2, #8
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	187b      	adds	r3, r7, r1
 8001516:	0018      	movs	r0, r3
 8001518:	f001 f910 	bl	800273c <HAL_RCC_OscConfig>
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001520:	f000 f972 	bl	8001808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001524:	2124      	movs	r1, #36	; 0x24
 8001526:	187b      	adds	r3, r7, r1
 8001528:	220f      	movs	r2, #15
 800152a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2100      	movs	r1, #0
 8001548:	0018      	movs	r0, r3
 800154a:	f001 fcbb 	bl	8002ec4 <HAL_RCC_ClockConfig>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001552:	f000 f959 	bl	8001808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001556:	003b      	movs	r3, r7
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800155c:	003b      	movs	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001562:	003b      	movs	r3, r7
 8001564:	0018      	movs	r0, r3
 8001566:	f001 fed1 	bl	800330c <HAL_RCCEx_PeriphCLKConfig>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800156e:	f000 f94b 	bl	8001808 <Error_Handler>
  }
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b01d      	add	sp, #116	; 0x74
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	40007000 	.word	0x40007000
 8001580:	ffffe7ff 	.word	0xffffe7ff

08001584 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	003b      	movs	r3, r7
 800158c:	0018      	movs	r0, r3
 800158e:	2308      	movs	r3, #8
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f002 fd5e 	bl	8004054 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_ADC_Init+0xc0>)
 800159a:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <MX_ADC_Init+0xc4>)
 800159c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_ADC_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_ADC_Init+0xc0>)
 80015a6:	22c0      	movs	r2, #192	; 0xc0
 80015a8:	0612      	lsls	r2, r2, #24
 80015aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <MX_ADC_Init+0xc0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_ADC_Init+0xc0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_ADC_Init+0xc0>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_ADC_Init+0xc0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_ADC_Init+0xc0>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	2100      	movs	r1, #0
 80015ca:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_ADC_Init+0xc0>)
 80015ce:	2221      	movs	r2, #33	; 0x21
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_ADC_Init+0xc0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_ADC_Init+0xc0>)
 80015dc:	22c2      	movs	r2, #194	; 0xc2
 80015de:	32ff      	adds	r2, #255	; 0xff
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_ADC_Init+0xc0>)
 80015e4:	222c      	movs	r2, #44	; 0x2c
 80015e6:	2100      	movs	r1, #0
 80015e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_ADC_Init+0xc0>)
 80015ec:	2204      	movs	r2, #4
 80015ee:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_ADC_Init+0xc0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_ADC_Init+0xc0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_ADC_Init+0xc0>)
 80015fe:	2201      	movs	r2, #1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_ADC_Init+0xc0>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_ADC_Init+0xc0>)
 800160a:	0018      	movs	r0, r3
 800160c:	f000 faa8 	bl	8001b60 <HAL_ADC_Init>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001614:	f000 f8f8 	bl	8001808 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001618:	003b      	movs	r3, r7
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800161e:	003b      	movs	r3, r7
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	0152      	lsls	r2, r2, #5
 8001624:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001626:	003a      	movs	r2, r7
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_ADC_Init+0xc0>)
 800162a:	0011      	movs	r1, r2
 800162c:	0018      	movs	r0, r3
 800162e:	f000 fd01 	bl	8002034 <HAL_ADC_ConfigChannel>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d001      	beq.n	800163a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001636:	f000 f8e7 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	2000011c 	.word	0x2000011c
 8001648:	40012400 	.word	0x40012400

0800164c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <MX_USART2_UART_Init+0x5c>)
 8001654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001658:	22e1      	movs	r2, #225	; 0xe1
 800165a:	0252      	lsls	r2, r2, #9
 800165c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <MX_USART2_UART_Init+0x58>)
 8001690:	0018      	movs	r0, r3
 8001692:	f001 ff9f 	bl	80035d4 <HAL_UART_Init>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800169a:	f000 f8b5 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000098 	.word	0x20000098
 80016a8:	40004400 	.word	0x40004400

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	2414      	movs	r4, #20
 80016b4:	193b      	adds	r3, r7, r4
 80016b6:	0018      	movs	r0, r3
 80016b8:	2314      	movs	r3, #20
 80016ba:	001a      	movs	r2, r3
 80016bc:	2100      	movs	r1, #0
 80016be:	f002 fcc9 	bl	8004054 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016c8:	2104      	movs	r1, #4
 80016ca:	430a      	orrs	r2, r1
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	2204      	movs	r2, #4
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	430a      	orrs	r2, r1
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f6:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <MX_GPIO_Init+0x14c>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <MX_GPIO_Init+0x14c>)
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	2201      	movs	r2, #1
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <MX_GPIO_Init+0x14c>)
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <MX_GPIO_Init+0x14c>)
 8001710:	2102      	movs	r1, #2
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
 8001716:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <MX_GPIO_Init+0x14c>)
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001722:	23a4      	movs	r3, #164	; 0xa4
 8001724:	00d9      	lsls	r1, r3, #3
 8001726:	23a0      	movs	r3, #160	; 0xa0
 8001728:	05db      	lsls	r3, r3, #23
 800172a:	2200      	movs	r2, #0
 800172c:	0018      	movs	r0, r3
 800172e:	f000 ffe8 	bl	8002702 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001732:	4b32      	ldr	r3, [pc, #200]	; (80017fc <MX_GPIO_Init+0x150>)
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	0018      	movs	r0, r3
 800173a:	f000 ffe2 	bl	8002702 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	0192      	lsls	r2, r2, #6
 8001744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <MX_GPIO_Init+0x154>)
 800174a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001752:	193b      	adds	r3, r7, r4
 8001754:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <MX_GPIO_Init+0x158>)
 8001756:	0019      	movs	r1, r3
 8001758:	0010      	movs	r0, r2
 800175a:	f000 fe3f 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 800175e:	0021      	movs	r1, r4
 8001760:	187b      	adds	r3, r7, r1
 8001762:	22a4      	movs	r2, #164	; 0xa4
 8001764:	00d2      	lsls	r2, r2, #3
 8001766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	000c      	movs	r4, r1
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2201      	movs	r2, #1
 800176e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	193a      	adds	r2, r7, r4
 800177e:	23a0      	movs	r3, #160	; 0xa0
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	0011      	movs	r1, r2
 8001784:	0018      	movs	r0, r3
 8001786:	f000 fe29 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	2201      	movs	r2, #1
 800179a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	193b      	adds	r3, r7, r4
 800179e:	4a19      	ldr	r2, [pc, #100]	; (8001804 <MX_GPIO_Init+0x158>)
 80017a0:	0019      	movs	r1, r3
 80017a2:	0010      	movs	r0, r2
 80017a4:	f000 fe1a 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	2201      	movs	r2, #1
 80017ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	193a      	adds	r2, r7, r4
 80017be:	23a0      	movs	r3, #160	; 0xa0
 80017c0:	05db      	lsls	r3, r3, #23
 80017c2:	0011      	movs	r1, r2
 80017c4:	0018      	movs	r0, r3
 80017c6:	f000 fe09 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017ca:	0021      	movs	r1, r4
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2220      	movs	r2, #32
 80017d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2201      	movs	r2, #1
 80017d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <MX_GPIO_Init+0x150>)
 80017e8:	0019      	movs	r1, r3
 80017ea:	0010      	movs	r0, r2
 80017ec:	f000 fdf6 	bl	80023dc <HAL_GPIO_Init>

}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b00b      	add	sp, #44	; 0x2c
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	50000400 	.word	0x50000400
 8001800:	10210000 	.word	0x10210000
 8001804:	50000800 	.word	0x50000800

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_MspInit+0x24>)
 800181a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x24>)
 800181e:	2101      	movs	r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_MspInit+0x24>)
 8001826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_MspInit+0x24>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0549      	lsls	r1, r1, #21
 800182e:	430a      	orrs	r2, r1
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	240c      	movs	r4, #12
 8001846:	193b      	adds	r3, r7, r4
 8001848:	0018      	movs	r0, r3
 800184a:	2314      	movs	r3, #20
 800184c:	001a      	movs	r2, r3
 800184e:	2100      	movs	r1, #0
 8001850:	f002 fc00 	bl	8004054 <memset>
  if(hadc->Instance==ADC1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_ADC_MspInit+0x70>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d122      	bne.n	80018a4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 8001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0089      	lsls	r1, r1, #2
 8001868:	430a      	orrs	r2, r1
 800186a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 800186e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 8001872:	2101      	movs	r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	2203      	movs	r2, #3
 800188e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	193b      	adds	r3, r7, r4
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	193a      	adds	r2, r7, r4
 8001898:	23a0      	movs	r3, #160	; 0xa0
 800189a:	05db      	lsls	r3, r3, #23
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fd9c 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b009      	add	sp, #36	; 0x24
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	40012400 	.word	0x40012400
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	240c      	movs	r4, #12
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	0018      	movs	r0, r3
 80018c2:	2314      	movs	r3, #20
 80018c4:	001a      	movs	r2, r3
 80018c6:	2100      	movs	r1, #0
 80018c8:	f002 fbc4 	bl	8004054 <memset>
  if(huart->Instance==USART2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a18      	ldr	r2, [pc, #96]	; (8001934 <HAL_UART_MspInit+0x80>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d129      	bne.n	800192a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_UART_MspInit+0x84>)
 80018d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_UART_MspInit+0x84>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0289      	lsls	r1, r1, #10
 80018e0:	430a      	orrs	r2, r1
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_UART_MspInit+0x84>)
 80018e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_UART_MspInit+0x84>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_UART_MspInit+0x84>)
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018fc:	0021      	movs	r1, r4
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	220c      	movs	r2, #12
 8001902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2202      	movs	r2, #2
 8001908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2203      	movs	r2, #3
 8001914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2204      	movs	r2, #4
 800191a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	187a      	adds	r2, r7, r1
 800191e:	23a0      	movs	r3, #160	; 0xa0
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fd59 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b009      	add	sp, #36	; 0x24
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40004400 	.word	0x40004400
 8001938:	40021000 	.word	0x40021000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f8be 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f002 fb30 	bl	8004000 <__errno>
 80019a0:	0003      	movs	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	425b      	negs	r3, r3
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	18d2      	adds	r2, r2, r3
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <_sbrk+0x64>)
 80019bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b006      	add	sp, #24
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20002000 	.word	0x20002000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	2000008c 	.word	0x2000008c
 80019d4:	20000190 	.word	0x20000190

080019d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopForever+0xe>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopForever+0x16>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a0e:	f7ff ffe3 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f002 fafb 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fcab 	bl	8001370 <main>

08001a1a <LoopForever>:

LoopForever:
    b LoopForever
 8001a1a:	e7fe      	b.n	8001a1a <LoopForever>
  ldr   r0, =_estack
 8001a1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a28:	08004a00 	.word	0x08004a00
  ldr r2, =_sbss
 8001a2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a30:	2000018c 	.word	0x2000018c

08001a34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC1_COMP_IRQHandler>
	...

08001a38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_Init+0x3c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_Init+0x3c>)
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f811 	bl	8001a78 <HAL_InitTick>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e001      	b.n	8001a66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a62:	f7ff fed7 	bl	8001814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40022000 	.word	0x40022000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001a82:	681c      	ldr	r4, [r3, #0]
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_InitTick+0x60>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	0019      	movs	r1, r3
 8001a8a:	23fa      	movs	r3, #250	; 0xfa
 8001a8c:	0098      	lsls	r0, r3, #2
 8001a8e:	f7fe fb4d 	bl	800012c <__udivsi3>
 8001a92:	0003      	movs	r3, r0
 8001a94:	0019      	movs	r1, r3
 8001a96:	0020      	movs	r0, r4
 8001a98:	f7fe fb48 	bl	800012c <__udivsi3>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 fc8f 	bl	80023c2 <HAL_SYSTICK_Config>
 8001aa4:	1e03      	subs	r3, r0, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e00f      	b.n	8001acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d80b      	bhi.n	8001aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 fc6c 	bl	8002398 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_InitTick+0x64>)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b003      	add	sp, #12
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x1c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	001a      	movs	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	18d2      	adds	r2, r2, r3
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_IncTick+0x20>)
 8001af2:	601a      	str	r2, [r3, #0]
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000178 	.word	0x20000178

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_GetTick+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	20000178 	.word	0x20000178

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	001a      	movs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	189b      	adds	r3, r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	f7ff ffe0 	bl	8001b04 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e159      	b.n	8001e26 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2250      	movs	r2, #80	; 0x50
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff fe56 	bl	800183c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	2210      	movs	r2, #16
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d005      	beq.n	8001ba8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	2210      	movs	r2, #16
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2250      	movs	r2, #80	; 0x50
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e132      	b.n	8001e26 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	4a9a      	ldr	r2, [pc, #616]	; (8001e30 <HAL_ADC_Init+0x2d0>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2202      	movs	r2, #2
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d108      	bne.n	8001bf0 <HAL_ADC_Init+0x90>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_Init+0x90>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_ADC_Init+0x92>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d149      	bne.n	8001c8a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	23c0      	movs	r3, #192	; 0xc0
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d00b      	beq.n	8001c1a <HAL_ADC_Init+0xba>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	05db      	lsls	r3, r3, #23
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d005      	beq.n	8001c1a <HAL_ADC_Init+0xba>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d111      	bne.n	8001c3e <HAL_ADC_Init+0xde>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0092      	lsls	r2, r2, #2
 8001c26:	0892      	lsrs	r2, r2, #2
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6919      	ldr	r1, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	e014      	b.n	8001c68 <HAL_ADC_Init+0x108>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	0892      	lsrs	r2, r2, #2
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	4b79      	ldr	r3, [pc, #484]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001c54:	4978      	ldr	r1, [pc, #480]	; (8001e38 <HAL_ADC_Init+0x2d8>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4b74      	ldr	r3, [pc, #464]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2118      	movs	r1, #24
 8001c74:	438a      	bics	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68d9      	ldr	r1, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c8a:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b69      	ldr	r3, [pc, #420]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001c90:	496a      	ldr	r1, [pc, #424]	; (8001e3c <HAL_ADC_Init+0x2dc>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	065a      	lsls	r2, r3, #25
 8001ca0:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <HAL_ADC_Init+0x2d4>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	055b      	lsls	r3, r3, #21
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d108      	bne.n	8001cc6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0549      	lsls	r1, r1, #21
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	495b      	ldr	r1, [pc, #364]	; (8001e40 <HAL_ADC_Init+0x2e0>)
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_Init+0x18c>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e000      	b.n	8001cee <HAL_ADC_Init+0x18e>
 8001cec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001cee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2020      	movs	r0, #32
 8001cf4:	5c1b      	ldrb	r3, [r3, r0]
 8001cf6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001cf8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	202c      	movs	r0, #44	; 0x2c
 8001cfe:	5c1b      	ldrb	r3, [r3, r0]
 8001d00:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d02:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001d08:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001d10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001d18:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d26:	23c2      	movs	r3, #194	; 0xc2
 8001d28:	33ff      	adds	r3, #255	; 0xff
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d00b      	beq.n	8001d46 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68d9      	ldr	r1, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2221      	movs	r2, #33	; 0x21
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d11a      	bne.n	8001d86 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0249      	lsls	r1, r1, #9
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	e00b      	b.n	8001d86 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	2220      	movs	r2, #32
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	2201      	movs	r2, #1
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d11f      	bne.n	8001dce <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	492a      	ldr	r1, [pc, #168]	; (8001e44 <HAL_ADC_Init+0x2e4>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6919      	ldr	r1, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001dac:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001db2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	611a      	str	r2, [r3, #16]
 8001dcc:	e00e      	b.n	8001dec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	438a      	bics	r2, r1
 8001dea:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2107      	movs	r1, #7
 8001df8:	438a      	bics	r2, r1
 8001dfa:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6959      	ldr	r1, [r3, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	fffffefd 	.word	0xfffffefd
 8001e34:	40012708 	.word	0x40012708
 8001e38:	ffc3ffff 	.word	0xffc3ffff
 8001e3c:	fdffffff 	.word	0xfdffffff
 8001e40:	fffe0219 	.word	0xfffe0219
 8001e44:	fffffc03 	.word	0xfffffc03

08001e48 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e50:	230f      	movs	r3, #15
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d138      	bne.n	8001ed6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2250      	movs	r2, #80	; 0x50
 8001e68:	5c9b      	ldrb	r3, [r3, r2]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Start+0x2a>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e038      	b.n	8001ee4 <HAL_ADC_Start+0x9c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2250      	movs	r2, #80	; 0x50
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001e82:	230f      	movs	r3, #15
 8001e84:	18fc      	adds	r4, r7, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 f973 	bl	8002174 <ADC_Enable>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e92:	230f      	movs	r3, #15
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d120      	bne.n	8001ede <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_ADC_Start+0xa4>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	0052      	lsls	r2, r2, #1
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2250      	movs	r2, #80	; 0x50
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	221c      	movs	r2, #28
 8001ec2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2104      	movs	r1, #4
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ed6:	230f      	movs	r3, #15
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2202      	movs	r2, #2
 8001edc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ede:	230f      	movs	r3, #15
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	781b      	ldrb	r3, [r3, #0]
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b005      	add	sp, #20
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	fffff0fe 	.word	0xfffff0fe

08001ef0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d102      	bne.n	8001f10 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e014      	b.n	8001f3a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10b      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	2220      	movs	r2, #32
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2250      	movs	r2, #80	; 0x50
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06c      	b.n	8002010 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f36:	230c      	movs	r3, #12
 8001f38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f3a:	f7ff fde3 	bl	8001b04 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f42:	e019      	b.n	8001f78 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	d016      	beq.n	8001f78 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_ADC_PollForConversion+0x70>
 8001f50:	f7ff fdd8 	bl	8001b04 <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d20b      	bcs.n	8001f78 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	2204      	movs	r2, #4
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2250      	movs	r2, #80	; 0x50
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e04b      	b.n	8002010 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0df      	beq.n	8001f44 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	23c0      	movs	r3, #192	; 0xc0
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d12e      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d129      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d122      	bne.n	8001ffe <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d110      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	210c      	movs	r1, #12
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_ADC_PollForConversion+0x128>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2201      	movs	r2, #1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
 8001fe4:	e00b      	b.n	8001ffe <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	2220      	movs	r2, #32
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	220c      	movs	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}
 8002018:	fffffefe 	.word	0xfffffefe

0800201c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2250      	movs	r2, #80	; 0x50
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x18>
 8002048:	2302      	movs	r3, #2
 800204a:	e085      	b.n	8002158 <HAL_ADC_ConfigChannel+0x124>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2250      	movs	r2, #80	; 0x50
 8002050:	2101      	movs	r1, #1
 8002052:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2204      	movs	r2, #4
 800205c:	4013      	ands	r3, r2
 800205e:	d00b      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	2220      	movs	r2, #32
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2250      	movs	r2, #80	; 0x50
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e06f      	b.n	8002158 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_ADC_ConfigChannel+0x12c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d035      	beq.n	80020ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	035b      	lsls	r3, r3, #13
 800208e:	0b5a      	lsrs	r2, r3, #13
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	02db      	lsls	r3, r3, #11
 80020a0:	4013      	ands	r3, r2
 80020a2:	d009      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80020a4:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	0409      	lsls	r1, r1, #16
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f000 f8be 	bl	8002234 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	4013      	ands	r3, r2
 80020c2:	d006      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	03c9      	lsls	r1, r1, #15
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	025b      	lsls	r3, r3, #9
 80020da:	4013      	ands	r3, r2
 80020dc:	d037      	beq.n	800214e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0449      	lsls	r1, r1, #17
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e02f      	b.n	800214e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	035b      	lsls	r3, r3, #13
 80020fa:	0b5b      	lsrs	r3, r3, #13
 80020fc:	43d9      	mvns	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	400a      	ands	r2, r1
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	02db      	lsls	r3, r3, #11
 800210e:	4013      	ands	r3, r2
 8002110:	d005      	beq.n	800211e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 8002118:	4913      	ldr	r1, [pc, #76]	; (8002168 <HAL_ADC_ConfigChannel+0x134>)
 800211a:	400a      	ands	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	029b      	lsls	r3, r3, #10
 8002126:	4013      	ands	r3, r2
 8002128:	d005      	beq.n	8002136 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 8002130:	490e      	ldr	r1, [pc, #56]	; (800216c <HAL_ADC_ConfigChannel+0x138>)
 8002132:	400a      	ands	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	4013      	ands	r3, r2
 8002140:	d005      	beq.n	800214e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_ADC_ConfigChannel+0x130>)
 8002148:	4909      	ldr	r1, [pc, #36]	; (8002170 <HAL_ADC_ConfigChannel+0x13c>)
 800214a:	400a      	ands	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2250      	movs	r2, #80	; 0x50
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00001001 	.word	0x00001001
 8002164:	40012708 	.word	0x40012708
 8002168:	ff7fffff 	.word	0xff7fffff
 800216c:	ffbfffff 	.word	0xffbfffff
 8002170:	feffffff 	.word	0xfeffffff

08002174 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <ADC_Enable+0x2c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <ADC_Enable+0x2c>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <ADC_Enable+0x2e>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d13f      	bne.n	8002226 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a20      	ldr	r2, [pc, #128]	; (8002230 <ADC_Enable+0xbc>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	d00d      	beq.n	80021ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	2210      	movs	r2, #16
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	2201      	movs	r2, #1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e02c      	b.n	8002228 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80021de:	2001      	movs	r0, #1
 80021e0:	f000 f828 	bl	8002234 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80021e4:	f7ff fc8e 	bl	8001b04 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021ec:	e014      	b.n	8002218 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ee:	f7ff fc89 	bl	8001b04 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b0a      	cmp	r3, #10
 80021fa:	d90d      	bls.n	8002218 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	2210      	movs	r2, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	2201      	movs	r2, #1
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e007      	b.n	8002228 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	2b01      	cmp	r3, #1
 8002224:	d1e3      	bne.n	80021ee <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b004      	add	sp, #16
 800222e:	bd80      	pop	{r7, pc}
 8002230:	80000017 	.word	0x80000017

08002234 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <ADC_DelayMicroSecond+0x38>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	490b      	ldr	r1, [pc, #44]	; (8002270 <ADC_DelayMicroSecond+0x3c>)
 8002242:	0018      	movs	r0, r3
 8002244:	f7fd ff72 	bl	800012c <__udivsi3>
 8002248:	0003      	movs	r3, r0
 800224a:	001a      	movs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4353      	muls	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002252:	e002      	b.n	800225a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b004      	add	sp, #16
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	20000000 	.word	0x20000000
 8002270:	000f4240 	.word	0x000f4240

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	0002      	movs	r2, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b7f      	cmp	r3, #127	; 0x7f
 8002288:	d828      	bhi.n	80022dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800228a:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <__NVIC_SetPriority+0xd4>)
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b25b      	sxtb	r3, r3
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	33c0      	adds	r3, #192	; 0xc0
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	589b      	ldr	r3, [r3, r2]
 800229a:	1dfa      	adds	r2, r7, #7
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	0011      	movs	r1, r2
 80022a0:	2203      	movs	r2, #3
 80022a2:	400a      	ands	r2, r1
 80022a4:	00d2      	lsls	r2, r2, #3
 80022a6:	21ff      	movs	r1, #255	; 0xff
 80022a8:	4091      	lsls	r1, r2
 80022aa:	000a      	movs	r2, r1
 80022ac:	43d2      	mvns	r2, r2
 80022ae:	401a      	ands	r2, r3
 80022b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	401a      	ands	r2, r3
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	0018      	movs	r0, r3
 80022c0:	2303      	movs	r3, #3
 80022c2:	4003      	ands	r3, r0
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c8:	481f      	ldr	r0, [pc, #124]	; (8002348 <__NVIC_SetPriority+0xd4>)
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	430a      	orrs	r2, r1
 80022d4:	33c0      	adds	r3, #192	; 0xc0
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022da:	e031      	b.n	8002340 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <__NVIC_SetPriority+0xd8>)
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	0019      	movs	r1, r3
 80022e4:	230f      	movs	r3, #15
 80022e6:	400b      	ands	r3, r1
 80022e8:	3b08      	subs	r3, #8
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3306      	adds	r3, #6
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	18d3      	adds	r3, r2, r3
 80022f2:	3304      	adds	r3, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	1dfa      	adds	r2, r7, #7
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	0011      	movs	r1, r2
 80022fc:	2203      	movs	r2, #3
 80022fe:	400a      	ands	r2, r1
 8002300:	00d2      	lsls	r2, r2, #3
 8002302:	21ff      	movs	r1, #255	; 0xff
 8002304:	4091      	lsls	r1, r2
 8002306:	000a      	movs	r2, r1
 8002308:	43d2      	mvns	r2, r2
 800230a:	401a      	ands	r2, r3
 800230c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	019b      	lsls	r3, r3, #6
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	401a      	ands	r2, r3
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	0018      	movs	r0, r3
 800231c:	2303      	movs	r3, #3
 800231e:	4003      	ands	r3, r0
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <__NVIC_SetPriority+0xd8>)
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	001c      	movs	r4, r3
 800232c:	230f      	movs	r3, #15
 800232e:	4023      	ands	r3, r4
 8002330:	3b08      	subs	r3, #8
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	430a      	orrs	r2, r1
 8002336:	3306      	adds	r3, #6
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	18c3      	adds	r3, r0, r3
 800233c:	3304      	adds	r3, #4
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b003      	add	sp, #12
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	045b      	lsls	r3, r3, #17
 8002360:	429a      	cmp	r2, r3
 8002362:	d301      	bcc.n	8002368 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002364:	2301      	movs	r3, #1
 8002366:	e010      	b.n	800238a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <SysTick_Config+0x44>)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	3a01      	subs	r2, #1
 800236e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002370:	2301      	movs	r3, #1
 8002372:	425b      	negs	r3, r3
 8002374:	2103      	movs	r1, #3
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ff7c 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x44>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x44>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	210f      	movs	r1, #15
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	1c02      	adds	r2, r0, #0
 80023a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7ff ff5d 	bl	8002274 <__NVIC_SetPriority>
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff ffbf 	bl	8002350 <SysTick_Config>
 80023d2:	0003      	movs	r3, r0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023f2:	e14f      	b.n	8002694 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_GPIO_Init+0x30>
 800240a:	e140      	b.n	800268e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d00b      	beq.n	800242c <HAL_GPIO_Init+0x50>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002420:	2b11      	cmp	r3, #17
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b12      	cmp	r3, #18
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	409a      	lsls	r2, r3
 800243a:	0013      	movs	r3, r2
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	2201      	movs	r2, #1
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	409a      	lsls	r2, r3
 800249c:	0013      	movs	r3, r2
 800249e:	43da      	mvns	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	0013      	movs	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0xf2>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	58d3      	ldr	r3, [r2, r3]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2207      	movs	r2, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	409a      	lsls	r2, r3
 80024e8:	0013      	movs	r3, r2
 80024ea:	43da      	mvns	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2107      	movs	r1, #7
 80024fa:	400b      	ands	r3, r1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	6939      	ldr	r1, [r7, #16]
 8002514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2203      	movs	r2, #3
 8002534:	401a      	ands	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	0013      	movs	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	055b      	lsls	r3, r3, #21
 8002552:	4013      	ands	r3, r2
 8002554:	d100      	bne.n	8002558 <HAL_GPIO_Init+0x17c>
 8002556:	e09a      	b.n	800268e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_GPIO_Init+0x2d0>)
 800255a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_GPIO_Init+0x2d0>)
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002564:	4a52      	ldr	r2, [pc, #328]	; (80026b0 <HAL_GPIO_Init+0x2d4>)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	3302      	adds	r3, #2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	589b      	ldr	r3, [r3, r2]
 8002570:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2203      	movs	r2, #3
 8002576:	4013      	ands	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	409a      	lsls	r2, r3
 800257e:	0013      	movs	r3, r2
 8002580:	43da      	mvns	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	23a0      	movs	r3, #160	; 0xa0
 800258c:	05db      	lsls	r3, r3, #23
 800258e:	429a      	cmp	r2, r3
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x1ea>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a47      	ldr	r2, [pc, #284]	; (80026b4 <HAL_GPIO_Init+0x2d8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x1e6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x1e2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a45      	ldr	r2, [pc, #276]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x1de>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a44      	ldr	r2, [pc, #272]	; (80026c0 <HAL_GPIO_Init+0x2e4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x1da>
 80025b2:	2305      	movs	r3, #5
 80025b4:	e008      	b.n	80025c8 <HAL_GPIO_Init+0x1ec>
 80025b6:	2306      	movs	r3, #6
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x1ec>
 80025ba:	2303      	movs	r3, #3
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_Init+0x1ec>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_Init+0x1ec>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x1ec>
 80025c6:	2300      	movs	r3, #0
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	2103      	movs	r1, #3
 80025cc:	400a      	ands	r2, r1
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4093      	lsls	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d8:	4935      	ldr	r1, [pc, #212]	; (80026b0 <HAL_GPIO_Init+0x2d4>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43da      	mvns	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	025b      	lsls	r3, r3, #9
 80025fe:	4013      	ands	r3, r2
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002610:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43da      	mvns	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43da      	mvns	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	035b      	lsls	r3, r3, #13
 8002652:	4013      	ands	r3, r2
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43da      	mvns	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	039b      	lsls	r3, r3, #14
 800267c:	4013      	ands	r3, r2
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_GPIO_Init+0x2e8>)
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	40da      	lsrs	r2, r3
 800269c:	1e13      	subs	r3, r2, #0
 800269e:	d000      	beq.n	80026a2 <HAL_GPIO_Init+0x2c6>
 80026a0:	e6a8      	b.n	80023f4 <HAL_GPIO_Init+0x18>
  }
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b006      	add	sp, #24
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	50000400 	.word	0x50000400
 80026b8:	50000800 	.word	0x50000800
 80026bc:	50000c00 	.word	0x50000c00
 80026c0:	50001c00 	.word	0x50001c00
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	000a      	movs	r2, r1
 80026d2:	1cbb      	adds	r3, r7, #2
 80026d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	1cba      	adds	r2, r7, #2
 80026dc:	8812      	ldrh	r2, [r2, #0]
 80026de:	4013      	ands	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026e2:	230f      	movs	r3, #15
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e003      	b.n	80026f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ec:	230f      	movs	r3, #15
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026f4:	230f      	movs	r3, #15
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	0008      	movs	r0, r1
 800270c:	0011      	movs	r1, r2
 800270e:	1cbb      	adds	r3, r7, #2
 8002710:	1c02      	adds	r2, r0, #0
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	1c7b      	adds	r3, r7, #1
 8002716:	1c0a      	adds	r2, r1, #0
 8002718:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800271a:	1c7b      	adds	r3, r7, #1
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	1cbb      	adds	r3, r7, #2
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800272a:	e003      	b.n	8002734 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800272c:	1cbb      	adds	r3, r7, #2
 800272e:	881a      	ldrh	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f000 fbaf 	bl	8002eae <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002750:	4bcf      	ldr	r3, [pc, #828]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	220c      	movs	r2, #12
 8002756:	4013      	ands	r3, r2
 8002758:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800275a:	4bcd      	ldr	r3, [pc, #820]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	025b      	lsls	r3, r3, #9
 8002762:	4013      	ands	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2201      	movs	r2, #1
 800276c:	4013      	ands	r3, r2
 800276e:	d100      	bne.n	8002772 <HAL_RCC_OscConfig+0x36>
 8002770:	e07e      	b.n	8002870 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d007      	beq.n	8002788 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d112      	bne.n	80027a4 <HAL_RCC_OscConfig+0x68>
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	025b      	lsls	r3, r3, #9
 8002784:	429a      	cmp	r2, r3
 8002786:	d10d      	bne.n	80027a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	4bc1      	ldr	r3, [pc, #772]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	029b      	lsls	r3, r3, #10
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0x5a>
 8002794:	e06b      	b.n	800286e <HAL_RCC_OscConfig+0x132>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d167      	bne.n	800286e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f000 fb85 	bl	8002eae <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_OscConfig+0x84>
 80027b0:	4bb7      	ldr	r3, [pc, #732]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4bb6      	ldr	r3, [pc, #728]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	0249      	lsls	r1, r1, #9
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e027      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	23a0      	movs	r3, #160	; 0xa0
 80027c6:	02db      	lsls	r3, r3, #11
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d10e      	bne.n	80027ea <HAL_RCC_OscConfig+0xae>
 80027cc:	4bb0      	ldr	r3, [pc, #704]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4baf      	ldr	r3, [pc, #700]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	02c9      	lsls	r1, r1, #11
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4bad      	ldr	r3, [pc, #692]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4bac      	ldr	r3, [pc, #688]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0249      	lsls	r1, r1, #9
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e012      	b.n	8002810 <HAL_RCC_OscConfig+0xd4>
 80027ea:	4ba9      	ldr	r3, [pc, #676]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4ba8      	ldr	r3, [pc, #672]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027f0:	49a8      	ldr	r1, [pc, #672]	; (8002a94 <HAL_RCC_OscConfig+0x358>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	4ba6      	ldr	r3, [pc, #664]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	025b      	lsls	r3, r3, #9
 80027fe:	4013      	ands	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4ba2      	ldr	r3, [pc, #648]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4ba1      	ldr	r3, [pc, #644]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 800280a:	49a3      	ldr	r1, [pc, #652]	; (8002a98 <HAL_RCC_OscConfig+0x35c>)
 800280c:	400a      	ands	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff f974 	bl	8001b04 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002820:	e009      	b.n	8002836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002822:	f7ff f96f 	bl	8001b04 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b64      	cmp	r3, #100	; 0x64
 800282e:	d902      	bls.n	8002836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	f000 fb3c 	bl	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002836:	4b96      	ldr	r3, [pc, #600]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	4013      	ands	r3, r2
 8002840:	d0ef      	beq.n	8002822 <HAL_RCC_OscConfig+0xe6>
 8002842:	e015      	b.n	8002870 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff f95e 	bl	8001b04 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284e:	f7ff f959 	bl	8001b04 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b64      	cmp	r3, #100	; 0x64
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e326      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002860:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	4013      	ands	r3, r2
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x112>
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d100      	bne.n	800287c <HAL_RCC_OscConfig+0x140>
 800287a:	e08b      	b.n	8002994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d005      	beq.n	8002894 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d13e      	bne.n	800290c <HAL_RCC_OscConfig+0x1d0>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d13b      	bne.n	800290c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002894:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2204      	movs	r2, #4
 800289a:	4013      	ands	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_RCC_OscConfig+0x16c>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e302      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b79      	ldr	r3, [pc, #484]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x360>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	4b75      	ldr	r3, [pc, #468]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2209      	movs	r2, #9
 80028c4:	4393      	bics	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	4b71      	ldr	r3, [pc, #452]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d0:	f000 fc40 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80028d4:	0001      	movs	r1, r0
 80028d6:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	220f      	movs	r2, #15
 80028de:	4013      	ands	r3, r2
 80028e0:	4a6f      	ldr	r2, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x364>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	000a      	movs	r2, r1
 80028e6:	40da      	lsrs	r2, r3
 80028e8:	4b6e      	ldr	r3, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x368>)
 80028ea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028ec:	4b6e      	ldr	r3, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x36c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2513      	movs	r5, #19
 80028f2:	197c      	adds	r4, r7, r5
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff f8bf 	bl	8001a78 <HAL_InitTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028fe:	197b      	adds	r3, r7, r5
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d046      	beq.n	8002994 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002906:	197b      	adds	r3, r7, r5
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	e2d0      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d027      	beq.n	8002962 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002912:	4b5f      	ldr	r3, [pc, #380]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2209      	movs	r2, #9
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	4b5c      	ldr	r3, [pc, #368]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff f8ee 	bl	8001b04 <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292e:	f7ff f8e9 	bl	8001b04 <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e2b6      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d0f1      	beq.n	800292e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a53      	ldr	r2, [pc, #332]	; (8002a9c <HAL_RCC_OscConfig+0x360>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	e018      	b.n	8002994 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002968:	2101      	movs	r1, #1
 800296a:	438a      	bics	r2, r1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff f8c9 	bl	8001b04 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002978:	f7ff f8c4 	bl	8001b04 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e291      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2204      	movs	r2, #4
 8002990:	4013      	ands	r3, r2
 8002992:	d1f1      	bne.n	8002978 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2210      	movs	r2, #16
 800299a:	4013      	ands	r3, r2
 800299c:	d100      	bne.n	80029a0 <HAL_RCC_OscConfig+0x264>
 800299e:	e0a1      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d140      	bne.n	8002a28 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d005      	beq.n	80029be <HAL_RCC_OscConfig+0x282>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e277      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x370>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d2:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	0a19      	lsrs	r1, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	061a      	lsls	r2, r3, #24
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	0b5b      	lsrs	r3, r3, #13
 80029ec:	3301      	adds	r3, #1
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	0212      	lsls	r2, r2, #8
 80029f2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	210f      	movs	r1, #15
 80029fc:	400b      	ands	r3, r1
 80029fe:	4928      	ldr	r1, [pc, #160]	; (8002aa0 <HAL_RCC_OscConfig+0x364>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x368>)
 8002a06:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x36c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2513      	movs	r5, #19
 8002a0e:	197c      	adds	r4, r7, r5
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff f831 	bl	8001a78 <HAL_InitTick>
 8002a16:	0003      	movs	r3, r0
 8002a18:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a1a:	197b      	adds	r3, r7, r5
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d060      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002a22:	197b      	adds	r3, r7, r5
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	e242      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d03f      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0049      	lsls	r1, r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff f861 	bl	8001b04 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a48:	f7ff f85c 	bl	8001b04 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e229      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_RCC_OscConfig+0x370>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	0a19      	lsrs	r1, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	061a      	lsls	r2, r3, #24
 8002a88:	4b01      	ldr	r3, [pc, #4]	; (8002a90 <HAL_RCC_OscConfig+0x354>)
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	e029      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3a8>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	fffeffff 	.word	0xfffeffff
 8002a98:	fffbffff 	.word	0xfffbffff
 8002a9c:	ffffe0ff 	.word	0xffffe0ff
 8002aa0:	08004950 	.word	0x08004950
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ab0:	4bbd      	ldr	r3, [pc, #756]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4bbc      	ldr	r3, [pc, #752]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002ab6:	49bd      	ldr	r1, [pc, #756]	; (8002dac <HAL_RCC_OscConfig+0x670>)
 8002ab8:	400a      	ands	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff f822 	bl	8001b04 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac6:	f7ff f81d 	bl	8001b04 <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1ea      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ad8:	4bb3      	ldr	r3, [pc, #716]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2208      	movs	r2, #8
 8002aea:	4013      	ands	r3, r2
 8002aec:	d036      	beq.n	8002b5c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d019      	beq.n	8002b2a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4bac      	ldr	r3, [pc, #688]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002afa:	4bab      	ldr	r3, [pc, #684]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	430a      	orrs	r2, r1
 8002b00:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe ffff 	bl	8001b04 <HAL_GetTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fffa 	bl	8001b04 <HAL_GetTick>
 8002b10:	0002      	movs	r2, r0
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1c7      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b1e:	4ba2      	ldr	r3, [pc, #648]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	d0f1      	beq.n	8002b0c <HAL_RCC_OscConfig+0x3d0>
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2a:	4b9f      	ldr	r3, [pc, #636]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2e:	4b9e      	ldr	r3, [pc, #632]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	438a      	bics	r2, r1
 8002b34:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe ffe5 	bl	8001b04 <HAL_GetTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe ffe0 	bl	8001b04 <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1ad      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b52:	4b95      	ldr	r3, [pc, #596]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d1f1      	bne.n	8002b40 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2204      	movs	r2, #4
 8002b62:	4013      	ands	r3, r2
 8002b64:	d100      	bne.n	8002b68 <HAL_RCC_OscConfig+0x42c>
 8002b66:	e0ae      	b.n	8002cc6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b68:	2027      	movs	r0, #39	; 0x27
 8002b6a:	183b      	adds	r3, r7, r0
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b70:	4b8d      	ldr	r3, [pc, #564]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	055b      	lsls	r3, r3, #21
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b8a      	ldr	r3, [pc, #552]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b80:	4b89      	ldr	r3, [pc, #548]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	0549      	lsls	r1, r1, #21
 8002b86:	430a      	orrs	r2, r1
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b8a:	183b      	adds	r3, r7, r0
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b87      	ldr	r3, [pc, #540]	; (8002db0 <HAL_RCC_OscConfig+0x674>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d11a      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9c:	4b84      	ldr	r3, [pc, #528]	; (8002db0 <HAL_RCC_OscConfig+0x674>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b83      	ldr	r3, [pc, #524]	; (8002db0 <HAL_RCC_OscConfig+0x674>)
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	0049      	lsls	r1, r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002baa:	f7fe ffab 	bl	8001b04 <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb4:	f7fe ffa6 	bl	8001b04 <HAL_GetTick>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e173      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	4b7a      	ldr	r3, [pc, #488]	; (8002db0 <HAL_RCC_OscConfig+0x674>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_OscConfig+0x4b2>
 8002bde:	4b72      	ldr	r3, [pc, #456]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be2:	4b71      	ldr	r3, [pc, #452]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	0049      	lsls	r1, r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	651a      	str	r2, [r3, #80]	; 0x50
 8002bec:	e031      	b.n	8002c52 <HAL_RCC_OscConfig+0x516>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4d4>
 8002bf6:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfa:	4b6b      	ldr	r3, [pc, #428]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002bfc:	496b      	ldr	r1, [pc, #428]	; (8002dac <HAL_RCC_OscConfig+0x670>)
 8002bfe:	400a      	ands	r2, r1
 8002c00:	651a      	str	r2, [r3, #80]	; 0x50
 8002c02:	4b69      	ldr	r3, [pc, #420]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c06:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c08:	496a      	ldr	r1, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x678>)
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c0e:	e020      	b.n	8002c52 <HAL_RCC_OscConfig+0x516>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	23a0      	movs	r3, #160	; 0xa0
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d10e      	bne.n	8002c3a <HAL_RCC_OscConfig+0x4fe>
 8002c1c:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	00c9      	lsls	r1, r1, #3
 8002c26:	430a      	orrs	r2, r1
 8002c28:	651a      	str	r2, [r3, #80]	; 0x50
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c2e:	4b5e      	ldr	r3, [pc, #376]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	0049      	lsls	r1, r1, #1
 8002c34:	430a      	orrs	r2, r1
 8002c36:	651a      	str	r2, [r3, #80]	; 0x50
 8002c38:	e00b      	b.n	8002c52 <HAL_RCC_OscConfig+0x516>
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c40:	495a      	ldr	r1, [pc, #360]	; (8002dac <HAL_RCC_OscConfig+0x670>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	651a      	str	r2, [r3, #80]	; 0x50
 8002c46:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c4a:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c4c:	4959      	ldr	r1, [pc, #356]	; (8002db4 <HAL_RCC_OscConfig+0x678>)
 8002c4e:	400a      	ands	r2, r1
 8002c50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d015      	beq.n	8002c86 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe ff53 	bl	8001b04 <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c62:	e009      	b.n	8002c78 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7fe ff4e 	bl	8001b04 <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_RCC_OscConfig+0x67c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e11a      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0ef      	beq.n	8002c64 <HAL_RCC_OscConfig+0x528>
 8002c84:	e014      	b.n	8002cb0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fe ff3d 	bl	8001b04 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe ff38 	bl	8001b04 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	4a47      	ldr	r2, [pc, #284]	; (8002db8 <HAL_RCC_OscConfig+0x67c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e104      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ca4:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d1ef      	bne.n	8002c90 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb0:	2327      	movs	r3, #39	; 0x27
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002cc0:	493e      	ldr	r1, [pc, #248]	; (8002dbc <HAL_RCC_OscConfig+0x680>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d049      	beq.n	8002d64 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d026      	beq.n	8002d26 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cd8:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	430a      	orrs	r2, r1
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf0:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <HAL_RCC_OscConfig+0x684>)
 8002cf2:	6a1a      	ldr	r2, [r3, #32]
 8002cf4:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <HAL_RCC_OscConfig+0x684>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	0189      	lsls	r1, r1, #6
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe ff01 	bl	8001b04 <HAL_GetTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d08:	f7fe fefc 	bl	8001b04 <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0c9      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d0f1      	beq.n	8002d08 <HAL_RCC_OscConfig+0x5cc>
 8002d24:	e01e      	b.n	8002d64 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	438a      	bics	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <HAL_RCC_OscConfig+0x684>)
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_OscConfig+0x684>)
 8002d38:	4922      	ldr	r1, [pc, #136]	; (8002dc4 <HAL_RCC_OscConfig+0x688>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fee1 	bl	8001b04 <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d48:	f7fe fedc 	bl	8001b04 <HAL_GetTick>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0a9      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d1f1      	bne.n	8002d48 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d100      	bne.n	8002d6e <HAL_RCC_OscConfig+0x632>
 8002d6c:	e09e      	b.n	8002eac <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d100      	bne.n	8002d76 <HAL_RCC_OscConfig+0x63a>
 8002d74:	e077      	b.n	8002e66 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d158      	bne.n	8002e30 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_OscConfig+0x66c>)
 8002d84:	4910      	ldr	r1, [pc, #64]	; (8002dc8 <HAL_RCC_OscConfig+0x68c>)
 8002d86:	400a      	ands	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe febb 	bl	8001b04 <HAL_GetTick>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d92:	e01b      	b.n	8002dcc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe feb6 	bl	8001b04 <HAL_GetTick>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d914      	bls.n	8002dcc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e083      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	40021000 	.word	0x40021000
 8002dac:	fffffeff 	.word	0xfffffeff
 8002db0:	40007000 	.word	0x40007000
 8002db4:	fffffbff 	.word	0xfffffbff
 8002db8:	00001388 	.word	0x00001388
 8002dbc:	efffffff 	.word	0xefffffff
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	ffffdfff 	.word	0xffffdfff
 8002dc8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dcc:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	049b      	lsls	r3, r3, #18
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d1dd      	bne.n	8002d94 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a37      	ldr	r2, [pc, #220]	; (8002ebc <HAL_RCC_OscConfig+0x780>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	431a      	orrs	r2, r3
 8002df2:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002df4:	430a      	orrs	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	0449      	lsls	r1, r1, #17
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fe fe7d 	bl	8001b04 <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fe78 	bl	8001b04 <HAL_GetTick>
 8002e14:	0002      	movs	r2, r0
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e045      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	049b      	lsls	r3, r3, #18
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x6d4>
 8002e2e:	e03d      	b.n	8002eac <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002e36:	4922      	ldr	r1, [pc, #136]	; (8002ec0 <HAL_RCC_OscConfig+0x784>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fe62 	bl	8001b04 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe fe5d 	bl	8001b04 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e02a      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	049b      	lsls	r3, r3, #18
 8002e60:	4013      	ands	r3, r2
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x70a>
 8002e64:	e022      	b.n	8002eac <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e01d      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_RCC_OscConfig+0x77c>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	025b      	lsls	r3, r3, #9
 8002e7e:	401a      	ands	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d10f      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	23f0      	movs	r3, #240	; 0xf0
 8002e8c:	039b      	lsls	r3, r3, #14
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	23c0      	movs	r3, #192	; 0xc0
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b00a      	add	sp, #40	; 0x28
 8002eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	ff02ffff 	.word	0xff02ffff
 8002ec0:	feffffff 	.word	0xfeffffff

08002ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b5b0      	push	{r4, r5, r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e128      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b96      	ldr	r3, [pc, #600]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d91e      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b93      	ldr	r3, [pc, #588]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	4393      	bics	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	4b90      	ldr	r3, [pc, #576]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ef8:	f7fe fe04 	bl	8001b04 <HAL_GetTick>
 8002efc:	0003      	movs	r3, r0
 8002efe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f00:	e009      	b.n	8002f16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f02:	f7fe fdff 	bl	8001b04 <HAL_GetTick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	4a8a      	ldr	r2, [pc, #552]	; (8003138 <HAL_RCC_ClockConfig+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e109      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b87      	ldr	r3, [pc, #540]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1ee      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2e:	4b83      	ldr	r3, [pc, #524]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	22f0      	movs	r2, #240	; 0xf0
 8002f34:	4393      	bics	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	4b7f      	ldr	r3, [pc, #508]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2201      	movs	r2, #1
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x8a>
 8002f4c:	e089      	b.n	8003062 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f56:	4b79      	ldr	r3, [pc, #484]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d120      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0e1      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	049b      	lsls	r3, r3, #18
 8002f76:	4013      	ands	r3, r2
 8002f78:	d114      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0d5      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f86:	4b6d      	ldr	r3, [pc, #436]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0ca      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f94:	4b69      	ldr	r3, [pc, #420]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0c2      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa4:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4393      	bics	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4b62      	ldr	r3, [pc, #392]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fe fda4 	bl	8001b04 <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d111      	bne.n	8002fec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc8:	e009      	b.n	8002fde <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fca:	f7fe fd9b 	bl	8001b04 <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x274>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0a5      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d1ef      	bne.n	8002fca <HAL_RCC_ClockConfig+0x106>
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d111      	bne.n	8003018 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	e009      	b.n	800300a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff6:	f7fe fd85 	bl	8001b04 <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	4a4d      	ldr	r2, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x274>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e08f      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	220c      	movs	r2, #12
 8003010:	4013      	ands	r3, r2
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d1ef      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x132>
 8003016:	e024      	b.n	8003062 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d11b      	bne.n	8003058 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003020:	e009      	b.n	8003036 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003022:	f7fe fd6f 	bl	8001b04 <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	4a42      	ldr	r2, [pc, #264]	; (8003138 <HAL_RCC_ClockConfig+0x274>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e079      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	220c      	movs	r2, #12
 800303c:	4013      	ands	r3, r2
 800303e:	2b04      	cmp	r3, #4
 8003040:	d1ef      	bne.n	8003022 <HAL_RCC_ClockConfig+0x15e>
 8003042:	e00e      	b.n	8003062 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7fe fd5e 	bl	8001b04 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	4a3a      	ldr	r2, [pc, #232]	; (8003138 <HAL_RCC_ClockConfig+0x274>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e068      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003058:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	220c      	movs	r2, #12
 800305e:	4013      	ands	r3, r2
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003062:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d21e      	bcs.n	80030ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	4393      	bics	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	4b2e      	ldr	r3, [pc, #184]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003082:	f7fe fd3f 	bl	8001b04 <HAL_GetTick>
 8003086:	0003      	movs	r3, r0
 8003088:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	e009      	b.n	80030a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7fe fd3a 	bl	8001b04 <HAL_GetTick>
 8003090:	0002      	movs	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	4a28      	ldr	r2, [pc, #160]	; (8003138 <HAL_RCC_ClockConfig+0x274>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e044      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	4013      	ands	r3, r2
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2204      	movs	r2, #4
 80030b4:	4013      	ands	r3, r2
 80030b6:	d009      	beq.n	80030cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <HAL_RCC_ClockConfig+0x27c>)
 80030be:	4013      	ands	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2208      	movs	r2, #8
 80030d2:	4013      	ands	r3, r2
 80030d4:	d00a      	beq.n	80030ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <HAL_RCC_ClockConfig+0x280>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00da      	lsls	r2, r3, #3
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ec:	f000 f832 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 80030f0:	0001      	movs	r1, r0
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x278>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	220f      	movs	r2, #15
 80030fa:	4013      	ands	r3, r2
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x284>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	000a      	movs	r2, r1
 8003102:	40da      	lsrs	r2, r3
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_ClockConfig+0x288>)
 8003106:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_ClockConfig+0x28c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	250b      	movs	r5, #11
 800310e:	197c      	adds	r4, r7, r5
 8003110:	0018      	movs	r0, r3
 8003112:	f7fe fcb1 	bl	8001a78 <HAL_InitTick>
 8003116:	0003      	movs	r3, r0
 8003118:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800311a:	197b      	adds	r3, r7, r5
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003122:	197b      	adds	r3, r7, r5
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	e000      	b.n	800312a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bdb0      	pop	{r4, r5, r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	40022000 	.word	0x40022000
 8003138:	00001388 	.word	0x00001388
 800313c:	40021000 	.word	0x40021000
 8003140:	fffff8ff 	.word	0xfffff8ff
 8003144:	ffffc7ff 	.word	0xffffc7ff
 8003148:	08004950 	.word	0x08004950
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800315a:	4b4c      	ldr	r3, [pc, #304]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003162:	230c      	movs	r3, #12
 8003164:	4013      	ands	r3, r2
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d014      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x40>
 800316a:	d900      	bls.n	800316e <HAL_RCC_GetSysClockFreq+0x1a>
 800316c:	e07b      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0x112>
 800316e:	2b04      	cmp	r3, #4
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x24>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d00b      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x3a>
 8003176:	e076      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003178:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	4013      	ands	r3, r2
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003186:	e07c      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003188:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_GetSysClockFreq+0x140>)
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800318c:	e079      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800318e:	4b42      	ldr	r3, [pc, #264]	; (8003298 <HAL_RCC_GetSysClockFreq+0x144>)
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003192:	e076      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	0c9a      	lsrs	r2, r3, #18
 8003198:	230f      	movs	r3, #15
 800319a:	401a      	ands	r2, r3
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_GetSysClockFreq+0x148>)
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	0d9a      	lsrs	r2, r3, #22
 80031a6:	2303      	movs	r3, #3
 80031a8:	4013      	ands	r3, r2
 80031aa:	3301      	adds	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	025b      	lsls	r3, r3, #9
 80031b6:	4013      	ands	r3, r2
 80031b8:	d01a      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	4a35      	ldr	r2, [pc, #212]	; (8003298 <HAL_RCC_GetSysClockFreq+0x144>)
 80031c4:	2300      	movs	r3, #0
 80031c6:	69b8      	ldr	r0, [r7, #24]
 80031c8:	69f9      	ldr	r1, [r7, #28]
 80031ca:	f7fd f895 	bl	80002f8 <__aeabi_lmul>
 80031ce:	0002      	movs	r2, r0
 80031d0:	000b      	movs	r3, r1
 80031d2:	0010      	movs	r0, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f7fd f869 	bl	80002b8 <__aeabi_uldivmod>
 80031e6:	0002      	movs	r2, r0
 80031e8:	000b      	movs	r3, r1
 80031ea:	0013      	movs	r3, r2
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
 80031ee:	e037      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	4013      	ands	r3, r2
 80031f8:	d01a      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003204:	2300      	movs	r3, #0
 8003206:	68b8      	ldr	r0, [r7, #8]
 8003208:	68f9      	ldr	r1, [r7, #12]
 800320a:	f7fd f875 	bl	80002f8 <__aeabi_lmul>
 800320e:	0002      	movs	r2, r0
 8003210:	000b      	movs	r3, r1
 8003212:	0010      	movs	r0, r2
 8003214:	0019      	movs	r1, r3
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f7fd f849 	bl	80002b8 <__aeabi_uldivmod>
 8003226:	0002      	movs	r2, r0
 8003228:	000b      	movs	r3, r1
 800322a:	0013      	movs	r3, r2
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
 800322e:	e017      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	0018      	movs	r0, r3
 8003234:	2300      	movs	r3, #0
 8003236:	0019      	movs	r1, r3
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_RCC_GetSysClockFreq+0x140>)
 800323a:	2300      	movs	r3, #0
 800323c:	f7fd f85c 	bl	80002f8 <__aeabi_lmul>
 8003240:	0002      	movs	r2, r0
 8003242:	000b      	movs	r3, r1
 8003244:	0010      	movs	r0, r2
 8003246:	0019      	movs	r1, r3
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	001c      	movs	r4, r3
 800324c:	2300      	movs	r3, #0
 800324e:	001d      	movs	r5, r3
 8003250:	0022      	movs	r2, r4
 8003252:	002b      	movs	r3, r5
 8003254:	f7fd f830 	bl	80002b8 <__aeabi_uldivmod>
 8003258:	0002      	movs	r2, r0
 800325a:	000b      	movs	r3, r1
 800325c:	0013      	movs	r3, r2
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003264:	e00d      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_GetSysClockFreq+0x138>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	0b5b      	lsrs	r3, r3, #13
 800326c:	2207      	movs	r2, #7
 800326e:	4013      	ands	r3, r2
 8003270:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	3301      	adds	r3, #1
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	0212      	lsls	r2, r2, #8
 800327a:	409a      	lsls	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003280:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b00e      	add	sp, #56	; 0x38
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	003d0900 	.word	0x003d0900
 8003294:	00f42400 	.word	0x00f42400
 8003298:	007a1200 	.word	0x007a1200
 800329c:	08004968 	.word	0x08004968

080032a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b02      	ldr	r3, [pc, #8]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff2 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032bc:	0001      	movs	r1, r0
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	2207      	movs	r2, #7
 80032c6:	4013      	ands	r3, r2
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	40d9      	lsrs	r1, r3
 80032ce:	000b      	movs	r3, r1
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08004960 	.word	0x08004960

080032e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032e4:	f7ff ffdc 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032e8:	0001      	movs	r1, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	0adb      	lsrs	r3, r3, #11
 80032f0:	2207      	movs	r2, #7
 80032f2:	4013      	ands	r3, r2
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	40d9      	lsrs	r1, r3
 80032fa:	000b      	movs	r3, r1
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40021000 	.word	0x40021000
 8003308:	08004960 	.word	0x08004960

0800330c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003314:	2317      	movs	r3, #23
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2220      	movs	r2, #32
 8003322:	4013      	ands	r3, r2
 8003324:	d106      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	4013      	ands	r3, r2
 8003330:	d100      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003332:	e0d9      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003334:	4b9c      	ldr	r3, [pc, #624]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	055b      	lsls	r3, r3, #21
 800333c:	4013      	ands	r3, r2
 800333e:	d10a      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	4b99      	ldr	r3, [pc, #612]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003344:	4b98      	ldr	r3, [pc, #608]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	0549      	lsls	r1, r1, #21
 800334a:	430a      	orrs	r2, r1
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800334e:	2317      	movs	r3, #23
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	4b95      	ldr	r3, [pc, #596]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4013      	ands	r3, r2
 8003360:	d11a      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003362:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b91      	ldr	r3, [pc, #580]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	0049      	lsls	r1, r1, #1
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003370:	f7fe fbc8 	bl	8001b04 <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fbc3 	bl	8001b04 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	; 0x64
 8003386:	d901      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e108      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4013      	ands	r3, r2
 8003396:	d0f0      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003398:	4b83      	ldr	r3, [pc, #524]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	23c0      	movs	r3, #192	; 0xc0
 800339e:	039b      	lsls	r3, r3, #14
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	23c0      	movs	r3, #192	; 0xc0
 80033aa:	039b      	lsls	r3, r3, #14
 80033ac:	4013      	ands	r3, r2
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d107      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	23c0      	movs	r3, #192	; 0xc0
 80033ba:	039b      	lsls	r3, r3, #14
 80033bc:	4013      	ands	r3, r2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d013      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	23c0      	movs	r3, #192	; 0xc0
 80033ca:	029b      	lsls	r3, r3, #10
 80033cc:	401a      	ands	r2, r3
 80033ce:	23c0      	movs	r3, #192	; 0xc0
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10a      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033d6:	4b74      	ldr	r3, [pc, #464]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	029b      	lsls	r3, r3, #10
 80033de:	401a      	ands	r2, r3
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d101      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0d8      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80033ec:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f0:	23c0      	movs	r3, #192	; 0xc0
 80033f2:	029b      	lsls	r3, r3, #10
 80033f4:	4013      	ands	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d049      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	23c0      	movs	r3, #192	; 0xc0
 8003404:	029b      	lsls	r3, r3, #10
 8003406:	4013      	ands	r3, r2
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	429a      	cmp	r2, r3
 800340c:	d004      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2220      	movs	r2, #32
 8003414:	4013      	ands	r3, r2
 8003416:	d10d      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	23c0      	movs	r3, #192	; 0xc0
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	4013      	ands	r3, r2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	429a      	cmp	r2, r3
 8003426:	d034      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4013      	ands	r3, r2
 8003432:	d02e      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003434:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	4a5d      	ldr	r2, [pc, #372]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800343a:	4013      	ands	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800343e:	4b5a      	ldr	r3, [pc, #360]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003442:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	0309      	lsls	r1, r1, #12
 8003448:	430a      	orrs	r2, r1
 800344a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800344c:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800344e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003450:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003452:	4958      	ldr	r1, [pc, #352]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003454:	400a      	ands	r2, r1
 8003456:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4013      	ands	r3, r2
 8003466:	d014      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe fb4c 	bl	8001b04 <HAL_GetTick>
 800346c:	0003      	movs	r3, r0
 800346e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003470:	e009      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe fb47 	bl	8001b04 <HAL_GetTick>
 8003476:	0002      	movs	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	4a4e      	ldr	r2, [pc, #312]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e08b      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003486:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4013      	ands	r3, r2
 8003490:	d0ef      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	23c0      	movs	r3, #192	; 0xc0
 8003498:	029b      	lsls	r3, r3, #10
 800349a:	401a      	ands	r2, r3
 800349c:	23c0      	movs	r3, #192	; 0xc0
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d10c      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80034a4:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a44      	ldr	r2, [pc, #272]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	23c0      	movs	r3, #192	; 0xc0
 80034b4:	039b      	lsls	r3, r3, #14
 80034b6:	401a      	ands	r2, r3
 80034b8:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	23c0      	movs	r3, #192	; 0xc0
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	401a      	ands	r2, r3
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034ce:	430a      	orrs	r2, r1
 80034d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034d2:	2317      	movs	r3, #23
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034e2:	4937      	ldr	r1, [pc, #220]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	2203      	movs	r2, #3
 80034f8:	4393      	bics	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003502:	430a      	orrs	r2, r1
 8003504:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2202      	movs	r2, #2
 800350c:	4013      	ands	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	220c      	movs	r2, #12
 8003516:	4393      	bics	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003520:	430a      	orrs	r2, r1
 8003522:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2204      	movs	r2, #4
 800352a:	4013      	ands	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	4a24      	ldr	r2, [pc, #144]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800353e:	430a      	orrs	r2, r1
 8003540:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2208      	movs	r2, #8
 8003548:	4013      	ands	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800355c:	430a      	orrs	r2, r1
 800355e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	4013      	ands	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800357a:	430a      	orrs	r2, r1
 800357c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	4013      	ands	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800358a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358c:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003598:	430a      	orrs	r2, r1
 800359a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b006      	add	sp, #24
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
 80035b0:	fffcffff 	.word	0xfffcffff
 80035b4:	fff7ffff 	.word	0xfff7ffff
 80035b8:	00001388 	.word	0x00001388
 80035bc:	ffcfffff 	.word	0xffcfffff
 80035c0:	efffffff 	.word	0xefffffff
 80035c4:	fffff3ff 	.word	0xfffff3ff
 80035c8:	ffffcfff 	.word	0xffffcfff
 80035cc:	fbffffff 	.word	0xfbffffff
 80035d0:	fff3ffff 	.word	0xfff3ffff

080035d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e044      	b.n	8003670 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2274      	movs	r2, #116	; 0x74
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fe f95b 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2224      	movs	r2, #36	; 0x24
 8003602:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0018      	movs	r0, r3
 8003618:	f000 f8d8 	bl	80037cc <UART_SetConfig>
 800361c:	0003      	movs	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e024      	b.n	8003670 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 fb6b 	bl	8003d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	490d      	ldr	r1, [pc, #52]	; (8003678 <HAL_UART_Init+0xa4>)
 8003642:	400a      	ands	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	212a      	movs	r1, #42	; 0x2a
 8003652:	438a      	bics	r2, r1
 8003654:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	0018      	movs	r0, r3
 800366a:	f000 fc03 	bl	8003e74 <UART_CheckIdleState>
 800366e:	0003      	movs	r3, r0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}
 8003678:	ffffb7ff 	.word	0xffffb7ff

0800367c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	1dbb      	adds	r3, r7, #6
 800368a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003690:	2b20      	cmp	r3, #32
 8003692:	d000      	beq.n	8003696 <HAL_UART_Transmit+0x1a>
 8003694:	e095      	b.n	80037c2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_UART_Transmit+0x28>
 800369c:	1dbb      	adds	r3, r7, #6
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e08d      	b.n	80037c4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	015b      	lsls	r3, r3, #5
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d109      	bne.n	80036c8 <HAL_UART_Transmit+0x4c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e07d      	b.n	80037c4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2274      	movs	r2, #116	; 0x74
 80036cc:	5c9b      	ldrb	r3, [r3, r2]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Transmit+0x5a>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e076      	b.n	80037c4 <HAL_UART_Transmit+0x148>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2274      	movs	r2, #116	; 0x74
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	2100      	movs	r1, #0
 80036e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2221      	movs	r2, #33	; 0x21
 80036ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ec:	f7fe fa0a 	bl	8001b04 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1dba      	adds	r2, r7, #6
 80036f8:	2150      	movs	r1, #80	; 0x50
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1dba      	adds	r2, r7, #6
 8003702:	2152      	movs	r1, #82	; 0x52
 8003704:	8812      	ldrh	r2, [r2, #0]
 8003706:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	015b      	lsls	r3, r3, #5
 8003710:	429a      	cmp	r2, r3
 8003712:	d108      	bne.n	8003726 <HAL_UART_Transmit+0xaa>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e003      	b.n	800372e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2274      	movs	r2, #116	; 0x74
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003736:	e02c      	b.n	8003792 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	0013      	movs	r3, r2
 8003742:	2200      	movs	r2, #0
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	f000 fbdd 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d001      	beq.n	8003752 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e038      	b.n	80037c4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	001a      	movs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	05d2      	lsls	r2, r2, #23
 8003764:	0dd2      	lsrs	r2, r2, #23
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	3302      	adds	r3, #2
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	e007      	b.n	8003780 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3301      	adds	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2252      	movs	r2, #82	; 0x52
 8003784:	5a9b      	ldrh	r3, [r3, r2]
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b299      	uxth	r1, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2252      	movs	r2, #82	; 0x52
 8003790:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2252      	movs	r2, #82	; 0x52
 8003796:	5a9b      	ldrh	r3, [r3, r2]
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1cc      	bne.n	8003738 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	0013      	movs	r3, r2
 80037a8:	2200      	movs	r2, #0
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	f000 fbaa 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 80037b0:	1e03      	subs	r3, r0, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e005      	b.n	80037c4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b008      	add	sp, #32
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037cc:	b5b0      	push	{r4, r5, r7, lr}
 80037ce:	b08e      	sub	sp, #56	; 0x38
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d4:	231a      	movs	r3, #26
 80037d6:	2218      	movs	r2, #24
 80037d8:	4694      	mov	ip, r2
 80037da:	44bc      	add	ip, r7
 80037dc:	4463      	add	r3, ip
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4ac1      	ldr	r2, [pc, #772]	; (8003b08 <UART_SetConfig+0x33c>)
 8003802:	4013      	ands	r3, r2
 8003804:	0019      	movs	r1, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4abd      	ldr	r2, [pc, #756]	; (8003b0c <UART_SetConfig+0x340>)
 8003818:	4013      	ands	r3, r2
 800381a:	0019      	movs	r1, r3
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4ab7      	ldr	r2, [pc, #732]	; (8003b10 <UART_SetConfig+0x344>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800383e:	4313      	orrs	r3, r2
 8003840:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4ab2      	ldr	r2, [pc, #712]	; (8003b14 <UART_SetConfig+0x348>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4aae      	ldr	r2, [pc, #696]	; (8003b18 <UART_SetConfig+0x34c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d136      	bne.n	80038d0 <UART_SetConfig+0x104>
 8003862:	4bae      	ldr	r3, [pc, #696]	; (8003b1c <UART_SetConfig+0x350>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	2203      	movs	r2, #3
 8003868:	4013      	ands	r3, r2
 800386a:	2b03      	cmp	r3, #3
 800386c:	d020      	beq.n	80038b0 <UART_SetConfig+0xe4>
 800386e:	d827      	bhi.n	80038c0 <UART_SetConfig+0xf4>
 8003870:	2b02      	cmp	r3, #2
 8003872:	d00d      	beq.n	8003890 <UART_SetConfig+0xc4>
 8003874:	d824      	bhi.n	80038c0 <UART_SetConfig+0xf4>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <UART_SetConfig+0xb4>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d010      	beq.n	80038a0 <UART_SetConfig+0xd4>
 800387e:	e01f      	b.n	80038c0 <UART_SetConfig+0xf4>
 8003880:	231b      	movs	r3, #27
 8003882:	2218      	movs	r2, #24
 8003884:	4694      	mov	ip, r2
 8003886:	44bc      	add	ip, r7
 8003888:	4463      	add	r3, ip
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e0ab      	b.n	80039e8 <UART_SetConfig+0x21c>
 8003890:	231b      	movs	r3, #27
 8003892:	2218      	movs	r2, #24
 8003894:	4694      	mov	ip, r2
 8003896:	44bc      	add	ip, r7
 8003898:	4463      	add	r3, ip
 800389a:	2202      	movs	r2, #2
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e0a3      	b.n	80039e8 <UART_SetConfig+0x21c>
 80038a0:	231b      	movs	r3, #27
 80038a2:	2218      	movs	r2, #24
 80038a4:	4694      	mov	ip, r2
 80038a6:	44bc      	add	ip, r7
 80038a8:	4463      	add	r3, ip
 80038aa:	2204      	movs	r2, #4
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e09b      	b.n	80039e8 <UART_SetConfig+0x21c>
 80038b0:	231b      	movs	r3, #27
 80038b2:	2218      	movs	r2, #24
 80038b4:	4694      	mov	ip, r2
 80038b6:	44bc      	add	ip, r7
 80038b8:	4463      	add	r3, ip
 80038ba:	2208      	movs	r2, #8
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e093      	b.n	80039e8 <UART_SetConfig+0x21c>
 80038c0:	231b      	movs	r3, #27
 80038c2:	2218      	movs	r2, #24
 80038c4:	4694      	mov	ip, r2
 80038c6:	44bc      	add	ip, r7
 80038c8:	4463      	add	r3, ip
 80038ca:	2210      	movs	r2, #16
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e08b      	b.n	80039e8 <UART_SetConfig+0x21c>
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a92      	ldr	r2, [pc, #584]	; (8003b20 <UART_SetConfig+0x354>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d136      	bne.n	8003948 <UART_SetConfig+0x17c>
 80038da:	4b90      	ldr	r3, [pc, #576]	; (8003b1c <UART_SetConfig+0x350>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	220c      	movs	r2, #12
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d020      	beq.n	8003928 <UART_SetConfig+0x15c>
 80038e6:	d827      	bhi.n	8003938 <UART_SetConfig+0x16c>
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d00d      	beq.n	8003908 <UART_SetConfig+0x13c>
 80038ec:	d824      	bhi.n	8003938 <UART_SetConfig+0x16c>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <UART_SetConfig+0x12c>
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d010      	beq.n	8003918 <UART_SetConfig+0x14c>
 80038f6:	e01f      	b.n	8003938 <UART_SetConfig+0x16c>
 80038f8:	231b      	movs	r3, #27
 80038fa:	2218      	movs	r2, #24
 80038fc:	4694      	mov	ip, r2
 80038fe:	44bc      	add	ip, r7
 8003900:	4463      	add	r3, ip
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e06f      	b.n	80039e8 <UART_SetConfig+0x21c>
 8003908:	231b      	movs	r3, #27
 800390a:	2218      	movs	r2, #24
 800390c:	4694      	mov	ip, r2
 800390e:	44bc      	add	ip, r7
 8003910:	4463      	add	r3, ip
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e067      	b.n	80039e8 <UART_SetConfig+0x21c>
 8003918:	231b      	movs	r3, #27
 800391a:	2218      	movs	r2, #24
 800391c:	4694      	mov	ip, r2
 800391e:	44bc      	add	ip, r7
 8003920:	4463      	add	r3, ip
 8003922:	2204      	movs	r2, #4
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e05f      	b.n	80039e8 <UART_SetConfig+0x21c>
 8003928:	231b      	movs	r3, #27
 800392a:	2218      	movs	r2, #24
 800392c:	4694      	mov	ip, r2
 800392e:	44bc      	add	ip, r7
 8003930:	4463      	add	r3, ip
 8003932:	2208      	movs	r2, #8
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e057      	b.n	80039e8 <UART_SetConfig+0x21c>
 8003938:	231b      	movs	r3, #27
 800393a:	2218      	movs	r2, #24
 800393c:	4694      	mov	ip, r2
 800393e:	44bc      	add	ip, r7
 8003940:	4463      	add	r3, ip
 8003942:	2210      	movs	r2, #16
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e04f      	b.n	80039e8 <UART_SetConfig+0x21c>
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a70      	ldr	r2, [pc, #448]	; (8003b10 <UART_SetConfig+0x344>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d143      	bne.n	80039da <UART_SetConfig+0x20e>
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <UART_SetConfig+0x350>)
 8003954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003956:	23c0      	movs	r3, #192	; 0xc0
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4013      	ands	r3, r2
 800395c:	22c0      	movs	r2, #192	; 0xc0
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	4293      	cmp	r3, r2
 8003962:	d02a      	beq.n	80039ba <UART_SetConfig+0x1ee>
 8003964:	22c0      	movs	r2, #192	; 0xc0
 8003966:	0112      	lsls	r2, r2, #4
 8003968:	4293      	cmp	r3, r2
 800396a:	d82e      	bhi.n	80039ca <UART_SetConfig+0x1fe>
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	4293      	cmp	r3, r2
 8003972:	d012      	beq.n	800399a <UART_SetConfig+0x1ce>
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	4293      	cmp	r3, r2
 800397a:	d826      	bhi.n	80039ca <UART_SetConfig+0x1fe>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <UART_SetConfig+0x1be>
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	00d2      	lsls	r2, r2, #3
 8003984:	4293      	cmp	r3, r2
 8003986:	d010      	beq.n	80039aa <UART_SetConfig+0x1de>
 8003988:	e01f      	b.n	80039ca <UART_SetConfig+0x1fe>
 800398a:	231b      	movs	r3, #27
 800398c:	2218      	movs	r2, #24
 800398e:	4694      	mov	ip, r2
 8003990:	44bc      	add	ip, r7
 8003992:	4463      	add	r3, ip
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e026      	b.n	80039e8 <UART_SetConfig+0x21c>
 800399a:	231b      	movs	r3, #27
 800399c:	2218      	movs	r2, #24
 800399e:	4694      	mov	ip, r2
 80039a0:	44bc      	add	ip, r7
 80039a2:	4463      	add	r3, ip
 80039a4:	2202      	movs	r2, #2
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e01e      	b.n	80039e8 <UART_SetConfig+0x21c>
 80039aa:	231b      	movs	r3, #27
 80039ac:	2218      	movs	r2, #24
 80039ae:	4694      	mov	ip, r2
 80039b0:	44bc      	add	ip, r7
 80039b2:	4463      	add	r3, ip
 80039b4:	2204      	movs	r2, #4
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	e016      	b.n	80039e8 <UART_SetConfig+0x21c>
 80039ba:	231b      	movs	r3, #27
 80039bc:	2218      	movs	r2, #24
 80039be:	4694      	mov	ip, r2
 80039c0:	44bc      	add	ip, r7
 80039c2:	4463      	add	r3, ip
 80039c4:	2208      	movs	r2, #8
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e00e      	b.n	80039e8 <UART_SetConfig+0x21c>
 80039ca:	231b      	movs	r3, #27
 80039cc:	2218      	movs	r2, #24
 80039ce:	4694      	mov	ip, r2
 80039d0:	44bc      	add	ip, r7
 80039d2:	4463      	add	r3, ip
 80039d4:	2210      	movs	r2, #16
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e006      	b.n	80039e8 <UART_SetConfig+0x21c>
 80039da:	231b      	movs	r3, #27
 80039dc:	2218      	movs	r2, #24
 80039de:	4694      	mov	ip, r2
 80039e0:	44bc      	add	ip, r7
 80039e2:	4463      	add	r3, ip
 80039e4:	2210      	movs	r2, #16
 80039e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a48      	ldr	r2, [pc, #288]	; (8003b10 <UART_SetConfig+0x344>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d000      	beq.n	80039f4 <UART_SetConfig+0x228>
 80039f2:	e09b      	b.n	8003b2c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039f4:	231b      	movs	r3, #27
 80039f6:	2218      	movs	r2, #24
 80039f8:	4694      	mov	ip, r2
 80039fa:	44bc      	add	ip, r7
 80039fc:	4463      	add	r3, ip
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d01d      	beq.n	8003a40 <UART_SetConfig+0x274>
 8003a04:	dc20      	bgt.n	8003a48 <UART_SetConfig+0x27c>
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d015      	beq.n	8003a36 <UART_SetConfig+0x26a>
 8003a0a:	dc1d      	bgt.n	8003a48 <UART_SetConfig+0x27c>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <UART_SetConfig+0x24a>
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0x254>
 8003a14:	e018      	b.n	8003a48 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a16:	f7ff fc4d 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a1e:	e01d      	b.n	8003a5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a20:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <UART_SetConfig+0x350>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2210      	movs	r2, #16
 8003a26:	4013      	ands	r3, r2
 8003a28:	d002      	beq.n	8003a30 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a2a:	4b3e      	ldr	r3, [pc, #248]	; (8003b24 <UART_SetConfig+0x358>)
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a2e:	e015      	b.n	8003a5c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8003a30:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <UART_SetConfig+0x35c>)
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a34:	e012      	b.n	8003a5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a36:	f7ff fb8d 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a3e:	e00d      	b.n	8003a5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a46:	e009      	b.n	8003a5c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003a4c:	231a      	movs	r3, #26
 8003a4e:	2218      	movs	r2, #24
 8003a50:	4694      	mov	ip, r2
 8003a52:	44bc      	add	ip, r7
 8003a54:	4463      	add	r3, ip
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
        break;
 8003a5a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d100      	bne.n	8003a64 <UART_SetConfig+0x298>
 8003a62:	e139      	b.n	8003cd8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	0013      	movs	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d305      	bcc.n	8003a80 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d907      	bls.n	8003a90 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003a80:	231a      	movs	r3, #26
 8003a82:	2218      	movs	r2, #24
 8003a84:	4694      	mov	ip, r2
 8003a86:	44bc      	add	ip, r7
 8003a88:	4463      	add	r3, ip
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e123      	b.n	8003cd8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	6939      	ldr	r1, [r7, #16]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	000b      	movs	r3, r1
 8003a9e:	0e1b      	lsrs	r3, r3, #24
 8003aa0:	0010      	movs	r0, r2
 8003aa2:	0205      	lsls	r5, r0, #8
 8003aa4:	431d      	orrs	r5, r3
 8003aa6:	000b      	movs	r3, r1
 8003aa8:	021c      	lsls	r4, r3, #8
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	68f9      	ldr	r1, [r7, #12]
 8003aba:	1900      	adds	r0, r0, r4
 8003abc:	4169      	adcs	r1, r5
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f7fc fbf4 	bl	80002b8 <__aeabi_uldivmod>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	000b      	movs	r3, r1
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ada:	23c0      	movs	r3, #192	; 0xc0
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d309      	bcc.n	8003af6 <UART_SetConfig+0x32a>
 8003ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	035b      	lsls	r3, r3, #13
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d204      	bcs.n	8003af6 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af2:	60da      	str	r2, [r3, #12]
 8003af4:	e0f0      	b.n	8003cd8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003af6:	231a      	movs	r3, #26
 8003af8:	2218      	movs	r2, #24
 8003afa:	4694      	mov	ip, r2
 8003afc:	44bc      	add	ip, r7
 8003afe:	4463      	add	r3, ip
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e0e8      	b.n	8003cd8 <UART_SetConfig+0x50c>
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	efff69f3 	.word	0xefff69f3
 8003b0c:	ffffcfff 	.word	0xffffcfff
 8003b10:	40004800 	.word	0x40004800
 8003b14:	fffff4ff 	.word	0xfffff4ff
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40004400 	.word	0x40004400
 8003b24:	003d0900 	.word	0x003d0900
 8003b28:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d000      	beq.n	8003b3a <UART_SetConfig+0x36e>
 8003b38:	e074      	b.n	8003c24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003b3a:	231b      	movs	r3, #27
 8003b3c:	2218      	movs	r2, #24
 8003b3e:	4694      	mov	ip, r2
 8003b40:	44bc      	add	ip, r7
 8003b42:	4463      	add	r3, ip
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d822      	bhi.n	8003b90 <UART_SetConfig+0x3c4>
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <UART_SetConfig+0x52c>)
 8003b4e:	18d3      	adds	r3, r2, r3
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7ff fbae 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b5c:	e022      	b.n	8003ba4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5e:	f7ff fbbf 	bl	80032e0 <HAL_RCC_GetPCLK2Freq>
 8003b62:	0003      	movs	r3, r0
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b66:	e01d      	b.n	8003ba4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b68:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <UART_SetConfig+0x530>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d002      	beq.n	8003b78 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b72:	4b63      	ldr	r3, [pc, #396]	; (8003d00 <UART_SetConfig+0x534>)
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b76:	e015      	b.n	8003ba4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b62      	ldr	r3, [pc, #392]	; (8003d04 <UART_SetConfig+0x538>)
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b7c:	e012      	b.n	8003ba4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7ff fae9 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003b82:	0003      	movs	r3, r0
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b86:	e00d      	b.n	8003ba4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b8e:	e009      	b.n	8003ba4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b94:	231a      	movs	r3, #26
 8003b96:	2218      	movs	r2, #24
 8003b98:	4694      	mov	ip, r2
 8003b9a:	44bc      	add	ip, r7
 8003b9c:	4463      	add	r3, ip
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
        break;
 8003ba2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d100      	bne.n	8003bac <UART_SetConfig+0x3e0>
 8003baa:	e095      	b.n	8003cd8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	005a      	lsls	r2, r3, #1
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	18d2      	adds	r2, r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	0010      	movs	r0, r2
 8003bc0:	f7fc fab4 	bl	800012c <__udivsi3>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	2b0f      	cmp	r3, #15
 8003bce:	d921      	bls.n	8003c14 <UART_SetConfig+0x448>
 8003bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	025b      	lsls	r3, r3, #9
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d21c      	bcs.n	8003c14 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	200e      	movs	r0, #14
 8003be0:	2418      	movs	r4, #24
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	181b      	adds	r3, r3, r0
 8003be6:	210f      	movs	r1, #15
 8003be8:	438a      	bics	r2, r1
 8003bea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	193b      	adds	r3, r7, r4
 8003bfa:	181b      	adds	r3, r3, r0
 8003bfc:	193a      	adds	r2, r7, r4
 8003bfe:	1812      	adds	r2, r2, r0
 8003c00:	8812      	ldrh	r2, [r2, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	193a      	adds	r2, r7, r4
 8003c0c:	1812      	adds	r2, r2, r0
 8003c0e:	8812      	ldrh	r2, [r2, #0]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	e061      	b.n	8003cd8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c14:	231a      	movs	r3, #26
 8003c16:	2218      	movs	r2, #24
 8003c18:	4694      	mov	ip, r2
 8003c1a:	44bc      	add	ip, r7
 8003c1c:	4463      	add	r3, ip
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e059      	b.n	8003cd8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c24:	231b      	movs	r3, #27
 8003c26:	2218      	movs	r2, #24
 8003c28:	4694      	mov	ip, r2
 8003c2a:	44bc      	add	ip, r7
 8003c2c:	4463      	add	r3, ip
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d822      	bhi.n	8003c7a <UART_SetConfig+0x4ae>
 8003c34:	009a      	lsls	r2, r3, #2
 8003c36:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <UART_SetConfig+0x53c>)
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7ff fb39 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8003c42:	0003      	movs	r3, r0
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c46:	e022      	b.n	8003c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7ff fb4a 	bl	80032e0 <HAL_RCC_GetPCLK2Freq>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c50:	e01d      	b.n	8003c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c52:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <UART_SetConfig+0x530>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2210      	movs	r2, #16
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d002      	beq.n	8003c62 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <UART_SetConfig+0x534>)
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c60:	e015      	b.n	8003c8e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <UART_SetConfig+0x538>)
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c66:	e012      	b.n	8003c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c68:	f7ff fa74 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c70:	e00d      	b.n	8003c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c78:	e009      	b.n	8003c8e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c7e:	231a      	movs	r3, #26
 8003c80:	2218      	movs	r2, #24
 8003c82:	4694      	mov	ip, r2
 8003c84:	44bc      	add	ip, r7
 8003c86:	4463      	add	r3, ip
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
        break;
 8003c8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d021      	beq.n	8003cd8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	085a      	lsrs	r2, r3, #1
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	18d2      	adds	r2, r2, r3
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	f7fc fa41 	bl	800012c <__udivsi3>
 8003caa:	0003      	movs	r3, r0
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	d909      	bls.n	8003cca <UART_SetConfig+0x4fe>
 8003cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d204      	bcs.n	8003cca <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc6:	60da      	str	r2, [r3, #12]
 8003cc8:	e006      	b.n	8003cd8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cca:	231a      	movs	r3, #26
 8003ccc:	2218      	movs	r2, #24
 8003cce:	4694      	mov	ip, r2
 8003cd0:	44bc      	add	ip, r7
 8003cd2:	4463      	add	r3, ip
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ce4:	231a      	movs	r3, #26
 8003ce6:	2218      	movs	r2, #24
 8003ce8:	4694      	mov	ip, r2
 8003cea:	44bc      	add	ip, r7
 8003cec:	4463      	add	r3, ip
 8003cee:	781b      	ldrb	r3, [r3, #0]
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b00e      	add	sp, #56	; 0x38
 8003cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf8:	08004974 	.word	0x08004974
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	003d0900 	.word	0x003d0900
 8003d04:	00f42400 	.word	0x00f42400
 8003d08:	08004998 	.word	0x08004998

08003d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2201      	movs	r2, #1
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <UART_AdvFeatureConfig+0x144>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4a43      	ldr	r2, [pc, #268]	; (8003e54 <UART_AdvFeatureConfig+0x148>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a3b      	ldr	r2, [pc, #236]	; (8003e58 <UART_AdvFeatureConfig+0x14c>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2208      	movs	r2, #8
 8003d80:	4013      	ands	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <UART_AdvFeatureConfig+0x150>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2210      	movs	r2, #16
 8003da2:	4013      	ands	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <UART_AdvFeatureConfig+0x154>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	4a25      	ldr	r2, [pc, #148]	; (8003e64 <UART_AdvFeatureConfig+0x158>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2240      	movs	r2, #64	; 0x40
 8003de6:	4013      	ands	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <UART_AdvFeatureConfig+0x15c>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	035b      	lsls	r3, r3, #13
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d10b      	bne.n	8003e26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <UART_AdvFeatureConfig+0x160>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d00b      	beq.n	8003e48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <UART_AdvFeatureConfig+0x164>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b002      	add	sp, #8
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	fffdffff 	.word	0xfffdffff
 8003e54:	fffeffff 	.word	0xfffeffff
 8003e58:	fffbffff 	.word	0xfffbffff
 8003e5c:	ffff7fff 	.word	0xffff7fff
 8003e60:	ffffefff 	.word	0xffffefff
 8003e64:	ffffdfff 	.word	0xffffdfff
 8003e68:	ffefffff 	.word	0xffefffff
 8003e6c:	ff9fffff 	.word	0xff9fffff
 8003e70:	fff7ffff 	.word	0xfff7ffff

08003e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	2100      	movs	r1, #0
 8003e82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e84:	f7fd fe3e 	bl	8001b04 <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2208      	movs	r2, #8
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d10c      	bne.n	8003eb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	0391      	lsls	r1, r2, #14
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <UART_CheckIdleState+0x8c>)
 8003ea4:	9200      	str	r2, [sp, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f000 f82c 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d001      	beq.n	8003eb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e021      	b.n	8003ef8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d10c      	bne.n	8003edc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	03d1      	lsls	r1, r2, #15
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <UART_CheckIdleState+0x8c>)
 8003ecc:	9200      	str	r2, [sp, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f000 f818 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003ed4:	1e03      	subs	r3, r0, #0
 8003ed6:	d001      	beq.n	8003edc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e00d      	b.n	8003ef8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2274      	movs	r2, #116	; 0x74
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	01ffffff 	.word	0x01ffffff

08003f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	1dfb      	adds	r3, r7, #7
 8003f12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f14:	e05e      	b.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	d05b      	beq.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1c:	f7fd fdf2 	bl	8001b04 <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11b      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	492f      	ldr	r1, [pc, #188]	; (8003ffc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	438a      	bics	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2274      	movs	r2, #116	; 0x74
 8003f62:	2100      	movs	r1, #0
 8003f64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e044      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2204      	movs	r2, #4
 8003f72:	4013      	ands	r3, r2
 8003f74:	d02e      	beq.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	401a      	ands	r2, r3
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d124      	bne.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	0112      	lsls	r2, r2, #4
 8003f92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4917      	ldr	r1, [pc, #92]	; (8003ffc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2101      	movs	r1, #1
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	2120      	movs	r1, #32
 8003fc6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2274      	movs	r2, #116	; 0x74
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e00f      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	425a      	negs	r2, r3
 8003fe4:	4153      	adcs	r3, r2
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	001a      	movs	r2, r3
 8003fea:	1dfb      	adds	r3, r7, #7
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d091      	beq.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	fffffe5f 	.word	0xfffffe5f

08004000 <__errno>:
 8004000:	4b01      	ldr	r3, [pc, #4]	; (8004008 <__errno+0x8>)
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	4770      	bx	lr
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	2000000c 	.word	0x2000000c

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	2600      	movs	r6, #0
 8004010:	4d0c      	ldr	r5, [pc, #48]	; (8004044 <__libc_init_array+0x38>)
 8004012:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	2600      	movs	r6, #0
 800401e:	f000 fc47 	bl	80048b0 <_init>
 8004022:	4d0a      	ldr	r5, [pc, #40]	; (800404c <__libc_init_array+0x40>)
 8004024:	4c0a      	ldr	r4, [pc, #40]	; (8004050 <__libc_init_array+0x44>)
 8004026:	1b64      	subs	r4, r4, r5
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	00b3      	lsls	r3, r6, #2
 8004032:	58eb      	ldr	r3, [r5, r3]
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	00b3      	lsls	r3, r6, #2
 800403c:	58eb      	ldr	r3, [r5, r3]
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	080049f8 	.word	0x080049f8
 8004048:	080049f8 	.word	0x080049f8
 800404c:	080049f8 	.word	0x080049f8
 8004050:	080049fc 	.word	0x080049fc

08004054 <memset>:
 8004054:	0003      	movs	r3, r0
 8004056:	1882      	adds	r2, r0, r2
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	7019      	strb	r1, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <siprintf>:
 8004064:	b40e      	push	{r1, r2, r3}
 8004066:	b500      	push	{lr}
 8004068:	490b      	ldr	r1, [pc, #44]	; (8004098 <siprintf+0x34>)
 800406a:	b09c      	sub	sp, #112	; 0x70
 800406c:	ab1d      	add	r3, sp, #116	; 0x74
 800406e:	9002      	str	r0, [sp, #8]
 8004070:	9006      	str	r0, [sp, #24]
 8004072:	9107      	str	r1, [sp, #28]
 8004074:	9104      	str	r1, [sp, #16]
 8004076:	4809      	ldr	r0, [pc, #36]	; (800409c <siprintf+0x38>)
 8004078:	4909      	ldr	r1, [pc, #36]	; (80040a0 <siprintf+0x3c>)
 800407a:	cb04      	ldmia	r3!, {r2}
 800407c:	9105      	str	r1, [sp, #20]
 800407e:	6800      	ldr	r0, [r0, #0]
 8004080:	a902      	add	r1, sp, #8
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	f000 f870 	bl	8004168 <_svfiprintf_r>
 8004088:	2300      	movs	r3, #0
 800408a:	9a02      	ldr	r2, [sp, #8]
 800408c:	7013      	strb	r3, [r2, #0]
 800408e:	b01c      	add	sp, #112	; 0x70
 8004090:	bc08      	pop	{r3}
 8004092:	b003      	add	sp, #12
 8004094:	4718      	bx	r3
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	7fffffff 	.word	0x7fffffff
 800409c:	2000000c 	.word	0x2000000c
 80040a0:	ffff0208 	.word	0xffff0208

080040a4 <__ssputs_r>:
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	688e      	ldr	r6, [r1, #8]
 80040a8:	b085      	sub	sp, #20
 80040aa:	0007      	movs	r7, r0
 80040ac:	000c      	movs	r4, r1
 80040ae:	9203      	str	r2, [sp, #12]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	429e      	cmp	r6, r3
 80040b4:	d83c      	bhi.n	8004130 <__ssputs_r+0x8c>
 80040b6:	2390      	movs	r3, #144	; 0x90
 80040b8:	898a      	ldrh	r2, [r1, #12]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	421a      	tst	r2, r3
 80040be:	d034      	beq.n	800412a <__ssputs_r+0x86>
 80040c0:	2503      	movs	r5, #3
 80040c2:	6909      	ldr	r1, [r1, #16]
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	1a5b      	subs	r3, r3, r1
 80040c8:	9302      	str	r3, [sp, #8]
 80040ca:	6963      	ldr	r3, [r4, #20]
 80040cc:	9802      	ldr	r0, [sp, #8]
 80040ce:	435d      	muls	r5, r3
 80040d0:	0feb      	lsrs	r3, r5, #31
 80040d2:	195d      	adds	r5, r3, r5
 80040d4:	9b01      	ldr	r3, [sp, #4]
 80040d6:	106d      	asrs	r5, r5, #1
 80040d8:	3301      	adds	r3, #1
 80040da:	181b      	adds	r3, r3, r0
 80040dc:	42ab      	cmp	r3, r5
 80040de:	d900      	bls.n	80040e2 <__ssputs_r+0x3e>
 80040e0:	001d      	movs	r5, r3
 80040e2:	0553      	lsls	r3, r2, #21
 80040e4:	d532      	bpl.n	800414c <__ssputs_r+0xa8>
 80040e6:	0029      	movs	r1, r5
 80040e8:	0038      	movs	r0, r7
 80040ea:	f000 fb31 	bl	8004750 <_malloc_r>
 80040ee:	1e06      	subs	r6, r0, #0
 80040f0:	d109      	bne.n	8004106 <__ssputs_r+0x62>
 80040f2:	230c      	movs	r3, #12
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	2001      	movs	r0, #1
 80040fa:	89a2      	ldrh	r2, [r4, #12]
 80040fc:	4240      	negs	r0, r0
 80040fe:	4313      	orrs	r3, r2
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	b005      	add	sp, #20
 8004104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004106:	9a02      	ldr	r2, [sp, #8]
 8004108:	6921      	ldr	r1, [r4, #16]
 800410a:	f000 faba 	bl	8004682 <memcpy>
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	4a14      	ldr	r2, [pc, #80]	; (8004164 <__ssputs_r+0xc0>)
 8004112:	401a      	ands	r2, r3
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	4313      	orrs	r3, r2
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	9b02      	ldr	r3, [sp, #8]
 800411c:	6126      	str	r6, [r4, #16]
 800411e:	18f6      	adds	r6, r6, r3
 8004120:	6026      	str	r6, [r4, #0]
 8004122:	6165      	str	r5, [r4, #20]
 8004124:	9e01      	ldr	r6, [sp, #4]
 8004126:	1aed      	subs	r5, r5, r3
 8004128:	60a5      	str	r5, [r4, #8]
 800412a:	9b01      	ldr	r3, [sp, #4]
 800412c:	429e      	cmp	r6, r3
 800412e:	d900      	bls.n	8004132 <__ssputs_r+0x8e>
 8004130:	9e01      	ldr	r6, [sp, #4]
 8004132:	0032      	movs	r2, r6
 8004134:	9903      	ldr	r1, [sp, #12]
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	f000 faac 	bl	8004694 <memmove>
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	2000      	movs	r0, #0
 8004140:	1b9b      	subs	r3, r3, r6
 8004142:	60a3      	str	r3, [r4, #8]
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	199e      	adds	r6, r3, r6
 8004148:	6026      	str	r6, [r4, #0]
 800414a:	e7da      	b.n	8004102 <__ssputs_r+0x5e>
 800414c:	002a      	movs	r2, r5
 800414e:	0038      	movs	r0, r7
 8004150:	f000 fb5c 	bl	800480c <_realloc_r>
 8004154:	1e06      	subs	r6, r0, #0
 8004156:	d1e0      	bne.n	800411a <__ssputs_r+0x76>
 8004158:	0038      	movs	r0, r7
 800415a:	6921      	ldr	r1, [r4, #16]
 800415c:	f000 faae 	bl	80046bc <_free_r>
 8004160:	e7c7      	b.n	80040f2 <__ssputs_r+0x4e>
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	fffffb7f 	.word	0xfffffb7f

08004168 <_svfiprintf_r>:
 8004168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416a:	b0a1      	sub	sp, #132	; 0x84
 800416c:	9003      	str	r0, [sp, #12]
 800416e:	001d      	movs	r5, r3
 8004170:	898b      	ldrh	r3, [r1, #12]
 8004172:	000f      	movs	r7, r1
 8004174:	0016      	movs	r6, r2
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	d511      	bpl.n	800419e <_svfiprintf_r+0x36>
 800417a:	690b      	ldr	r3, [r1, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10e      	bne.n	800419e <_svfiprintf_r+0x36>
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	f000 fae5 	bl	8004750 <_malloc_r>
 8004186:	6038      	str	r0, [r7, #0]
 8004188:	6138      	str	r0, [r7, #16]
 800418a:	2800      	cmp	r0, #0
 800418c:	d105      	bne.n	800419a <_svfiprintf_r+0x32>
 800418e:	230c      	movs	r3, #12
 8004190:	9a03      	ldr	r2, [sp, #12]
 8004192:	3801      	subs	r0, #1
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	b021      	add	sp, #132	; 0x84
 8004198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419a:	2340      	movs	r3, #64	; 0x40
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	2300      	movs	r3, #0
 80041a0:	ac08      	add	r4, sp, #32
 80041a2:	6163      	str	r3, [r4, #20]
 80041a4:	3320      	adds	r3, #32
 80041a6:	7663      	strb	r3, [r4, #25]
 80041a8:	3310      	adds	r3, #16
 80041aa:	76a3      	strb	r3, [r4, #26]
 80041ac:	9507      	str	r5, [sp, #28]
 80041ae:	0035      	movs	r5, r6
 80041b0:	782b      	ldrb	r3, [r5, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <_svfiprintf_r+0x52>
 80041b6:	2b25      	cmp	r3, #37	; 0x25
 80041b8:	d147      	bne.n	800424a <_svfiprintf_r+0xe2>
 80041ba:	1bab      	subs	r3, r5, r6
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	42b5      	cmp	r5, r6
 80041c0:	d00c      	beq.n	80041dc <_svfiprintf_r+0x74>
 80041c2:	0032      	movs	r2, r6
 80041c4:	0039      	movs	r1, r7
 80041c6:	9803      	ldr	r0, [sp, #12]
 80041c8:	f7ff ff6c 	bl	80040a4 <__ssputs_r>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d100      	bne.n	80041d2 <_svfiprintf_r+0x6a>
 80041d0:	e0ae      	b.n	8004330 <_svfiprintf_r+0x1c8>
 80041d2:	6962      	ldr	r2, [r4, #20]
 80041d4:	9b05      	ldr	r3, [sp, #20]
 80041d6:	4694      	mov	ip, r2
 80041d8:	4463      	add	r3, ip
 80041da:	6163      	str	r3, [r4, #20]
 80041dc:	782b      	ldrb	r3, [r5, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d100      	bne.n	80041e4 <_svfiprintf_r+0x7c>
 80041e2:	e0a5      	b.n	8004330 <_svfiprintf_r+0x1c8>
 80041e4:	2201      	movs	r2, #1
 80041e6:	2300      	movs	r3, #0
 80041e8:	4252      	negs	r2, r2
 80041ea:	6062      	str	r2, [r4, #4]
 80041ec:	a904      	add	r1, sp, #16
 80041ee:	3254      	adds	r2, #84	; 0x54
 80041f0:	1852      	adds	r2, r2, r1
 80041f2:	1c6e      	adds	r6, r5, #1
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	60e3      	str	r3, [r4, #12]
 80041f8:	60a3      	str	r3, [r4, #8]
 80041fa:	7013      	strb	r3, [r2, #0]
 80041fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80041fe:	2205      	movs	r2, #5
 8004200:	7831      	ldrb	r1, [r6, #0]
 8004202:	4854      	ldr	r0, [pc, #336]	; (8004354 <_svfiprintf_r+0x1ec>)
 8004204:	f000 fa32 	bl	800466c <memchr>
 8004208:	1c75      	adds	r5, r6, #1
 800420a:	2800      	cmp	r0, #0
 800420c:	d11f      	bne.n	800424e <_svfiprintf_r+0xe6>
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	06d3      	lsls	r3, r2, #27
 8004212:	d504      	bpl.n	800421e <_svfiprintf_r+0xb6>
 8004214:	2353      	movs	r3, #83	; 0x53
 8004216:	a904      	add	r1, sp, #16
 8004218:	185b      	adds	r3, r3, r1
 800421a:	2120      	movs	r1, #32
 800421c:	7019      	strb	r1, [r3, #0]
 800421e:	0713      	lsls	r3, r2, #28
 8004220:	d504      	bpl.n	800422c <_svfiprintf_r+0xc4>
 8004222:	2353      	movs	r3, #83	; 0x53
 8004224:	a904      	add	r1, sp, #16
 8004226:	185b      	adds	r3, r3, r1
 8004228:	212b      	movs	r1, #43	; 0x2b
 800422a:	7019      	strb	r1, [r3, #0]
 800422c:	7833      	ldrb	r3, [r6, #0]
 800422e:	2b2a      	cmp	r3, #42	; 0x2a
 8004230:	d016      	beq.n	8004260 <_svfiprintf_r+0xf8>
 8004232:	0035      	movs	r5, r6
 8004234:	2100      	movs	r1, #0
 8004236:	200a      	movs	r0, #10
 8004238:	68e3      	ldr	r3, [r4, #12]
 800423a:	782a      	ldrb	r2, [r5, #0]
 800423c:	1c6e      	adds	r6, r5, #1
 800423e:	3a30      	subs	r2, #48	; 0x30
 8004240:	2a09      	cmp	r2, #9
 8004242:	d94e      	bls.n	80042e2 <_svfiprintf_r+0x17a>
 8004244:	2900      	cmp	r1, #0
 8004246:	d111      	bne.n	800426c <_svfiprintf_r+0x104>
 8004248:	e017      	b.n	800427a <_svfiprintf_r+0x112>
 800424a:	3501      	adds	r5, #1
 800424c:	e7b0      	b.n	80041b0 <_svfiprintf_r+0x48>
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <_svfiprintf_r+0x1ec>)
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	1ac0      	subs	r0, r0, r3
 8004254:	2301      	movs	r3, #1
 8004256:	4083      	lsls	r3, r0
 8004258:	4313      	orrs	r3, r2
 800425a:	002e      	movs	r6, r5
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	e7ce      	b.n	80041fe <_svfiprintf_r+0x96>
 8004260:	9b07      	ldr	r3, [sp, #28]
 8004262:	1d19      	adds	r1, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	9107      	str	r1, [sp, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	db01      	blt.n	8004270 <_svfiprintf_r+0x108>
 800426c:	930b      	str	r3, [sp, #44]	; 0x2c
 800426e:	e004      	b.n	800427a <_svfiprintf_r+0x112>
 8004270:	425b      	negs	r3, r3
 8004272:	60e3      	str	r3, [r4, #12]
 8004274:	2302      	movs	r3, #2
 8004276:	4313      	orrs	r3, r2
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	782b      	ldrb	r3, [r5, #0]
 800427c:	2b2e      	cmp	r3, #46	; 0x2e
 800427e:	d10a      	bne.n	8004296 <_svfiprintf_r+0x12e>
 8004280:	786b      	ldrb	r3, [r5, #1]
 8004282:	2b2a      	cmp	r3, #42	; 0x2a
 8004284:	d135      	bne.n	80042f2 <_svfiprintf_r+0x18a>
 8004286:	9b07      	ldr	r3, [sp, #28]
 8004288:	3502      	adds	r5, #2
 800428a:	1d1a      	adds	r2, r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	9207      	str	r2, [sp, #28]
 8004290:	2b00      	cmp	r3, #0
 8004292:	db2b      	blt.n	80042ec <_svfiprintf_r+0x184>
 8004294:	9309      	str	r3, [sp, #36]	; 0x24
 8004296:	4e30      	ldr	r6, [pc, #192]	; (8004358 <_svfiprintf_r+0x1f0>)
 8004298:	2203      	movs	r2, #3
 800429a:	0030      	movs	r0, r6
 800429c:	7829      	ldrb	r1, [r5, #0]
 800429e:	f000 f9e5 	bl	800466c <memchr>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d006      	beq.n	80042b4 <_svfiprintf_r+0x14c>
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	1b80      	subs	r0, r0, r6
 80042aa:	4083      	lsls	r3, r0
 80042ac:	6822      	ldr	r2, [r4, #0]
 80042ae:	3501      	adds	r5, #1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	7829      	ldrb	r1, [r5, #0]
 80042b6:	2206      	movs	r2, #6
 80042b8:	4828      	ldr	r0, [pc, #160]	; (800435c <_svfiprintf_r+0x1f4>)
 80042ba:	1c6e      	adds	r6, r5, #1
 80042bc:	7621      	strb	r1, [r4, #24]
 80042be:	f000 f9d5 	bl	800466c <memchr>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d03c      	beq.n	8004340 <_svfiprintf_r+0x1d8>
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <_svfiprintf_r+0x1f8>)
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d125      	bne.n	8004318 <_svfiprintf_r+0x1b0>
 80042cc:	2207      	movs	r2, #7
 80042ce:	9b07      	ldr	r3, [sp, #28]
 80042d0:	3307      	adds	r3, #7
 80042d2:	4393      	bics	r3, r2
 80042d4:	3308      	adds	r3, #8
 80042d6:	9307      	str	r3, [sp, #28]
 80042d8:	6963      	ldr	r3, [r4, #20]
 80042da:	9a04      	ldr	r2, [sp, #16]
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	6163      	str	r3, [r4, #20]
 80042e0:	e765      	b.n	80041ae <_svfiprintf_r+0x46>
 80042e2:	4343      	muls	r3, r0
 80042e4:	0035      	movs	r5, r6
 80042e6:	2101      	movs	r1, #1
 80042e8:	189b      	adds	r3, r3, r2
 80042ea:	e7a6      	b.n	800423a <_svfiprintf_r+0xd2>
 80042ec:	2301      	movs	r3, #1
 80042ee:	425b      	negs	r3, r3
 80042f0:	e7d0      	b.n	8004294 <_svfiprintf_r+0x12c>
 80042f2:	2300      	movs	r3, #0
 80042f4:	200a      	movs	r0, #10
 80042f6:	001a      	movs	r2, r3
 80042f8:	3501      	adds	r5, #1
 80042fa:	6063      	str	r3, [r4, #4]
 80042fc:	7829      	ldrb	r1, [r5, #0]
 80042fe:	1c6e      	adds	r6, r5, #1
 8004300:	3930      	subs	r1, #48	; 0x30
 8004302:	2909      	cmp	r1, #9
 8004304:	d903      	bls.n	800430e <_svfiprintf_r+0x1a6>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0c5      	beq.n	8004296 <_svfiprintf_r+0x12e>
 800430a:	9209      	str	r2, [sp, #36]	; 0x24
 800430c:	e7c3      	b.n	8004296 <_svfiprintf_r+0x12e>
 800430e:	4342      	muls	r2, r0
 8004310:	0035      	movs	r5, r6
 8004312:	2301      	movs	r3, #1
 8004314:	1852      	adds	r2, r2, r1
 8004316:	e7f1      	b.n	80042fc <_svfiprintf_r+0x194>
 8004318:	ab07      	add	r3, sp, #28
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	003a      	movs	r2, r7
 800431e:	0021      	movs	r1, r4
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <_svfiprintf_r+0x1fc>)
 8004322:	9803      	ldr	r0, [sp, #12]
 8004324:	e000      	b.n	8004328 <_svfiprintf_r+0x1c0>
 8004326:	bf00      	nop
 8004328:	9004      	str	r0, [sp, #16]
 800432a:	9b04      	ldr	r3, [sp, #16]
 800432c:	3301      	adds	r3, #1
 800432e:	d1d3      	bne.n	80042d8 <_svfiprintf_r+0x170>
 8004330:	89bb      	ldrh	r3, [r7, #12]
 8004332:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004334:	065b      	lsls	r3, r3, #25
 8004336:	d400      	bmi.n	800433a <_svfiprintf_r+0x1d2>
 8004338:	e72d      	b.n	8004196 <_svfiprintf_r+0x2e>
 800433a:	2001      	movs	r0, #1
 800433c:	4240      	negs	r0, r0
 800433e:	e72a      	b.n	8004196 <_svfiprintf_r+0x2e>
 8004340:	ab07      	add	r3, sp, #28
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	003a      	movs	r2, r7
 8004346:	0021      	movs	r1, r4
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <_svfiprintf_r+0x1fc>)
 800434a:	9803      	ldr	r0, [sp, #12]
 800434c:	f000 f87c 	bl	8004448 <_printf_i>
 8004350:	e7ea      	b.n	8004328 <_svfiprintf_r+0x1c0>
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	080049bc 	.word	0x080049bc
 8004358:	080049c2 	.word	0x080049c2
 800435c:	080049c6 	.word	0x080049c6
 8004360:	00000000 	.word	0x00000000
 8004364:	080040a5 	.word	0x080040a5

08004368 <_printf_common>:
 8004368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800436a:	0015      	movs	r5, r2
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	688a      	ldr	r2, [r1, #8]
 8004370:	690b      	ldr	r3, [r1, #16]
 8004372:	000c      	movs	r4, r1
 8004374:	9000      	str	r0, [sp, #0]
 8004376:	4293      	cmp	r3, r2
 8004378:	da00      	bge.n	800437c <_printf_common+0x14>
 800437a:	0013      	movs	r3, r2
 800437c:	0022      	movs	r2, r4
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	3243      	adds	r2, #67	; 0x43
 8004382:	7812      	ldrb	r2, [r2, #0]
 8004384:	2a00      	cmp	r2, #0
 8004386:	d001      	beq.n	800438c <_printf_common+0x24>
 8004388:	3301      	adds	r3, #1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	069b      	lsls	r3, r3, #26
 8004390:	d502      	bpl.n	8004398 <_printf_common+0x30>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	3302      	adds	r3, #2
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	2306      	movs	r3, #6
 800439c:	0017      	movs	r7, r2
 800439e:	401f      	ands	r7, r3
 80043a0:	421a      	tst	r2, r3
 80043a2:	d027      	beq.n	80043f4 <_printf_common+0x8c>
 80043a4:	0023      	movs	r3, r4
 80043a6:	3343      	adds	r3, #67	; 0x43
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	1e5a      	subs	r2, r3, #1
 80043ac:	4193      	sbcs	r3, r2
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	0692      	lsls	r2, r2, #26
 80043b2:	d430      	bmi.n	8004416 <_printf_common+0xae>
 80043b4:	0022      	movs	r2, r4
 80043b6:	9901      	ldr	r1, [sp, #4]
 80043b8:	9800      	ldr	r0, [sp, #0]
 80043ba:	9e08      	ldr	r6, [sp, #32]
 80043bc:	3243      	adds	r2, #67	; 0x43
 80043be:	47b0      	blx	r6
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d025      	beq.n	8004410 <_printf_common+0xa8>
 80043c4:	2306      	movs	r3, #6
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	682a      	ldr	r2, [r5, #0]
 80043ca:	68e1      	ldr	r1, [r4, #12]
 80043cc:	2500      	movs	r5, #0
 80043ce:	4003      	ands	r3, r0
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d103      	bne.n	80043dc <_printf_common+0x74>
 80043d4:	1a8d      	subs	r5, r1, r2
 80043d6:	43eb      	mvns	r3, r5
 80043d8:	17db      	asrs	r3, r3, #31
 80043da:	401d      	ands	r5, r3
 80043dc:	68a3      	ldr	r3, [r4, #8]
 80043de:	6922      	ldr	r2, [r4, #16]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	dd01      	ble.n	80043e8 <_printf_common+0x80>
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	18ed      	adds	r5, r5, r3
 80043e8:	2700      	movs	r7, #0
 80043ea:	42bd      	cmp	r5, r7
 80043ec:	d120      	bne.n	8004430 <_printf_common+0xc8>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e010      	b.n	8004414 <_printf_common+0xac>
 80043f2:	3701      	adds	r7, #1
 80043f4:	68e3      	ldr	r3, [r4, #12]
 80043f6:	682a      	ldr	r2, [r5, #0]
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	42bb      	cmp	r3, r7
 80043fc:	ddd2      	ble.n	80043a4 <_printf_common+0x3c>
 80043fe:	0022      	movs	r2, r4
 8004400:	2301      	movs	r3, #1
 8004402:	9901      	ldr	r1, [sp, #4]
 8004404:	9800      	ldr	r0, [sp, #0]
 8004406:	9e08      	ldr	r6, [sp, #32]
 8004408:	3219      	adds	r2, #25
 800440a:	47b0      	blx	r6
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d1f0      	bne.n	80043f2 <_printf_common+0x8a>
 8004410:	2001      	movs	r0, #1
 8004412:	4240      	negs	r0, r0
 8004414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004416:	2030      	movs	r0, #48	; 0x30
 8004418:	18e1      	adds	r1, r4, r3
 800441a:	3143      	adds	r1, #67	; 0x43
 800441c:	7008      	strb	r0, [r1, #0]
 800441e:	0021      	movs	r1, r4
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	3145      	adds	r1, #69	; 0x45
 8004424:	7809      	ldrb	r1, [r1, #0]
 8004426:	18a2      	adds	r2, r4, r2
 8004428:	3243      	adds	r2, #67	; 0x43
 800442a:	3302      	adds	r3, #2
 800442c:	7011      	strb	r1, [r2, #0]
 800442e:	e7c1      	b.n	80043b4 <_printf_common+0x4c>
 8004430:	0022      	movs	r2, r4
 8004432:	2301      	movs	r3, #1
 8004434:	9901      	ldr	r1, [sp, #4]
 8004436:	9800      	ldr	r0, [sp, #0]
 8004438:	9e08      	ldr	r6, [sp, #32]
 800443a:	321a      	adds	r2, #26
 800443c:	47b0      	blx	r6
 800443e:	1c43      	adds	r3, r0, #1
 8004440:	d0e6      	beq.n	8004410 <_printf_common+0xa8>
 8004442:	3701      	adds	r7, #1
 8004444:	e7d1      	b.n	80043ea <_printf_common+0x82>
	...

08004448 <_printf_i>:
 8004448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444a:	b08b      	sub	sp, #44	; 0x2c
 800444c:	9206      	str	r2, [sp, #24]
 800444e:	000a      	movs	r2, r1
 8004450:	3243      	adds	r2, #67	; 0x43
 8004452:	9307      	str	r3, [sp, #28]
 8004454:	9005      	str	r0, [sp, #20]
 8004456:	9204      	str	r2, [sp, #16]
 8004458:	7e0a      	ldrb	r2, [r1, #24]
 800445a:	000c      	movs	r4, r1
 800445c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800445e:	2a78      	cmp	r2, #120	; 0x78
 8004460:	d806      	bhi.n	8004470 <_printf_i+0x28>
 8004462:	2a62      	cmp	r2, #98	; 0x62
 8004464:	d808      	bhi.n	8004478 <_printf_i+0x30>
 8004466:	2a00      	cmp	r2, #0
 8004468:	d100      	bne.n	800446c <_printf_i+0x24>
 800446a:	e0c0      	b.n	80045ee <_printf_i+0x1a6>
 800446c:	2a58      	cmp	r2, #88	; 0x58
 800446e:	d052      	beq.n	8004516 <_printf_i+0xce>
 8004470:	0026      	movs	r6, r4
 8004472:	3642      	adds	r6, #66	; 0x42
 8004474:	7032      	strb	r2, [r6, #0]
 8004476:	e022      	b.n	80044be <_printf_i+0x76>
 8004478:	0010      	movs	r0, r2
 800447a:	3863      	subs	r0, #99	; 0x63
 800447c:	2815      	cmp	r0, #21
 800447e:	d8f7      	bhi.n	8004470 <_printf_i+0x28>
 8004480:	f7fb fe4a 	bl	8000118 <__gnu_thumb1_case_shi>
 8004484:	001f0016 	.word	0x001f0016
 8004488:	fff6fff6 	.word	0xfff6fff6
 800448c:	fff6fff6 	.word	0xfff6fff6
 8004490:	fff6001f 	.word	0xfff6001f
 8004494:	fff6fff6 	.word	0xfff6fff6
 8004498:	00a8fff6 	.word	0x00a8fff6
 800449c:	009a0036 	.word	0x009a0036
 80044a0:	fff6fff6 	.word	0xfff6fff6
 80044a4:	fff600b9 	.word	0xfff600b9
 80044a8:	fff60036 	.word	0xfff60036
 80044ac:	009efff6 	.word	0x009efff6
 80044b0:	0026      	movs	r6, r4
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	3642      	adds	r6, #66	; 0x42
 80044b6:	1d11      	adds	r1, r2, #4
 80044b8:	6019      	str	r1, [r3, #0]
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	7033      	strb	r3, [r6, #0]
 80044be:	2301      	movs	r3, #1
 80044c0:	e0a7      	b.n	8004612 <_printf_i+0x1ca>
 80044c2:	6808      	ldr	r0, [r1, #0]
 80044c4:	6819      	ldr	r1, [r3, #0]
 80044c6:	1d0a      	adds	r2, r1, #4
 80044c8:	0605      	lsls	r5, r0, #24
 80044ca:	d50b      	bpl.n	80044e4 <_printf_i+0x9c>
 80044cc:	680d      	ldr	r5, [r1, #0]
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	da03      	bge.n	80044dc <_printf_i+0x94>
 80044d4:	232d      	movs	r3, #45	; 0x2d
 80044d6:	9a04      	ldr	r2, [sp, #16]
 80044d8:	426d      	negs	r5, r5
 80044da:	7013      	strb	r3, [r2, #0]
 80044dc:	4b61      	ldr	r3, [pc, #388]	; (8004664 <_printf_i+0x21c>)
 80044de:	270a      	movs	r7, #10
 80044e0:	9303      	str	r3, [sp, #12]
 80044e2:	e032      	b.n	800454a <_printf_i+0x102>
 80044e4:	680d      	ldr	r5, [r1, #0]
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	0641      	lsls	r1, r0, #25
 80044ea:	d5f1      	bpl.n	80044d0 <_printf_i+0x88>
 80044ec:	b22d      	sxth	r5, r5
 80044ee:	e7ef      	b.n	80044d0 <_printf_i+0x88>
 80044f0:	680d      	ldr	r5, [r1, #0]
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	1d08      	adds	r0, r1, #4
 80044f6:	6018      	str	r0, [r3, #0]
 80044f8:	062e      	lsls	r6, r5, #24
 80044fa:	d501      	bpl.n	8004500 <_printf_i+0xb8>
 80044fc:	680d      	ldr	r5, [r1, #0]
 80044fe:	e003      	b.n	8004508 <_printf_i+0xc0>
 8004500:	066d      	lsls	r5, r5, #25
 8004502:	d5fb      	bpl.n	80044fc <_printf_i+0xb4>
 8004504:	680d      	ldr	r5, [r1, #0]
 8004506:	b2ad      	uxth	r5, r5
 8004508:	4b56      	ldr	r3, [pc, #344]	; (8004664 <_printf_i+0x21c>)
 800450a:	270a      	movs	r7, #10
 800450c:	9303      	str	r3, [sp, #12]
 800450e:	2a6f      	cmp	r2, #111	; 0x6f
 8004510:	d117      	bne.n	8004542 <_printf_i+0xfa>
 8004512:	2708      	movs	r7, #8
 8004514:	e015      	b.n	8004542 <_printf_i+0xfa>
 8004516:	3145      	adds	r1, #69	; 0x45
 8004518:	700a      	strb	r2, [r1, #0]
 800451a:	4a52      	ldr	r2, [pc, #328]	; (8004664 <_printf_i+0x21c>)
 800451c:	9203      	str	r2, [sp, #12]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	ca20      	ldmia	r2!, {r5}
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	0608      	lsls	r0, r1, #24
 8004528:	d550      	bpl.n	80045cc <_printf_i+0x184>
 800452a:	07cb      	lsls	r3, r1, #31
 800452c:	d502      	bpl.n	8004534 <_printf_i+0xec>
 800452e:	2320      	movs	r3, #32
 8004530:	4319      	orrs	r1, r3
 8004532:	6021      	str	r1, [r4, #0]
 8004534:	2710      	movs	r7, #16
 8004536:	2d00      	cmp	r5, #0
 8004538:	d103      	bne.n	8004542 <_printf_i+0xfa>
 800453a:	2320      	movs	r3, #32
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	439a      	bics	r2, r3
 8004540:	6022      	str	r2, [r4, #0]
 8004542:	0023      	movs	r3, r4
 8004544:	2200      	movs	r2, #0
 8004546:	3343      	adds	r3, #67	; 0x43
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	60a3      	str	r3, [r4, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	db03      	blt.n	800455a <_printf_i+0x112>
 8004552:	2204      	movs	r2, #4
 8004554:	6821      	ldr	r1, [r4, #0]
 8004556:	4391      	bics	r1, r2
 8004558:	6021      	str	r1, [r4, #0]
 800455a:	2d00      	cmp	r5, #0
 800455c:	d102      	bne.n	8004564 <_printf_i+0x11c>
 800455e:	9e04      	ldr	r6, [sp, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00c      	beq.n	800457e <_printf_i+0x136>
 8004564:	9e04      	ldr	r6, [sp, #16]
 8004566:	0028      	movs	r0, r5
 8004568:	0039      	movs	r1, r7
 800456a:	f7fb fe65 	bl	8000238 <__aeabi_uidivmod>
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	3e01      	subs	r6, #1
 8004572:	5c5b      	ldrb	r3, [r3, r1]
 8004574:	7033      	strb	r3, [r6, #0]
 8004576:	002b      	movs	r3, r5
 8004578:	0005      	movs	r5, r0
 800457a:	429f      	cmp	r7, r3
 800457c:	d9f3      	bls.n	8004566 <_printf_i+0x11e>
 800457e:	2f08      	cmp	r7, #8
 8004580:	d109      	bne.n	8004596 <_printf_i+0x14e>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	07db      	lsls	r3, r3, #31
 8004586:	d506      	bpl.n	8004596 <_printf_i+0x14e>
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	6922      	ldr	r2, [r4, #16]
 800458c:	4293      	cmp	r3, r2
 800458e:	dc02      	bgt.n	8004596 <_printf_i+0x14e>
 8004590:	2330      	movs	r3, #48	; 0x30
 8004592:	3e01      	subs	r6, #1
 8004594:	7033      	strb	r3, [r6, #0]
 8004596:	9b04      	ldr	r3, [sp, #16]
 8004598:	1b9b      	subs	r3, r3, r6
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	9b07      	ldr	r3, [sp, #28]
 800459e:	0021      	movs	r1, r4
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	9805      	ldr	r0, [sp, #20]
 80045a4:	9b06      	ldr	r3, [sp, #24]
 80045a6:	aa09      	add	r2, sp, #36	; 0x24
 80045a8:	f7ff fede 	bl	8004368 <_printf_common>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d135      	bne.n	800461c <_printf_i+0x1d4>
 80045b0:	2001      	movs	r0, #1
 80045b2:	4240      	negs	r0, r0
 80045b4:	b00b      	add	sp, #44	; 0x2c
 80045b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b8:	2220      	movs	r2, #32
 80045ba:	6809      	ldr	r1, [r1, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	6022      	str	r2, [r4, #0]
 80045c0:	0022      	movs	r2, r4
 80045c2:	2178      	movs	r1, #120	; 0x78
 80045c4:	3245      	adds	r2, #69	; 0x45
 80045c6:	7011      	strb	r1, [r2, #0]
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <_printf_i+0x220>)
 80045ca:	e7a7      	b.n	800451c <_printf_i+0xd4>
 80045cc:	0648      	lsls	r0, r1, #25
 80045ce:	d5ac      	bpl.n	800452a <_printf_i+0xe2>
 80045d0:	b2ad      	uxth	r5, r5
 80045d2:	e7aa      	b.n	800452a <_printf_i+0xe2>
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	680d      	ldr	r5, [r1, #0]
 80045d8:	1d10      	adds	r0, r2, #4
 80045da:	6949      	ldr	r1, [r1, #20]
 80045dc:	6018      	str	r0, [r3, #0]
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	062e      	lsls	r6, r5, #24
 80045e2:	d501      	bpl.n	80045e8 <_printf_i+0x1a0>
 80045e4:	6019      	str	r1, [r3, #0]
 80045e6:	e002      	b.n	80045ee <_printf_i+0x1a6>
 80045e8:	066d      	lsls	r5, r5, #25
 80045ea:	d5fb      	bpl.n	80045e4 <_printf_i+0x19c>
 80045ec:	8019      	strh	r1, [r3, #0]
 80045ee:	2300      	movs	r3, #0
 80045f0:	9e04      	ldr	r6, [sp, #16]
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	e7d2      	b.n	800459c <_printf_i+0x154>
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	1d11      	adds	r1, r2, #4
 80045fa:	6019      	str	r1, [r3, #0]
 80045fc:	6816      	ldr	r6, [r2, #0]
 80045fe:	2100      	movs	r1, #0
 8004600:	0030      	movs	r0, r6
 8004602:	6862      	ldr	r2, [r4, #4]
 8004604:	f000 f832 	bl	800466c <memchr>
 8004608:	2800      	cmp	r0, #0
 800460a:	d001      	beq.n	8004610 <_printf_i+0x1c8>
 800460c:	1b80      	subs	r0, r0, r6
 800460e:	6060      	str	r0, [r4, #4]
 8004610:	6863      	ldr	r3, [r4, #4]
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	2300      	movs	r3, #0
 8004616:	9a04      	ldr	r2, [sp, #16]
 8004618:	7013      	strb	r3, [r2, #0]
 800461a:	e7bf      	b.n	800459c <_printf_i+0x154>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	0032      	movs	r2, r6
 8004620:	9906      	ldr	r1, [sp, #24]
 8004622:	9805      	ldr	r0, [sp, #20]
 8004624:	9d07      	ldr	r5, [sp, #28]
 8004626:	47a8      	blx	r5
 8004628:	1c43      	adds	r3, r0, #1
 800462a:	d0c1      	beq.n	80045b0 <_printf_i+0x168>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	079b      	lsls	r3, r3, #30
 8004630:	d415      	bmi.n	800465e <_printf_i+0x216>
 8004632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004634:	68e0      	ldr	r0, [r4, #12]
 8004636:	4298      	cmp	r0, r3
 8004638:	dabc      	bge.n	80045b4 <_printf_i+0x16c>
 800463a:	0018      	movs	r0, r3
 800463c:	e7ba      	b.n	80045b4 <_printf_i+0x16c>
 800463e:	0022      	movs	r2, r4
 8004640:	2301      	movs	r3, #1
 8004642:	9906      	ldr	r1, [sp, #24]
 8004644:	9805      	ldr	r0, [sp, #20]
 8004646:	9e07      	ldr	r6, [sp, #28]
 8004648:	3219      	adds	r2, #25
 800464a:	47b0      	blx	r6
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d0af      	beq.n	80045b0 <_printf_i+0x168>
 8004650:	3501      	adds	r5, #1
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	42ab      	cmp	r3, r5
 800465a:	dcf0      	bgt.n	800463e <_printf_i+0x1f6>
 800465c:	e7e9      	b.n	8004632 <_printf_i+0x1ea>
 800465e:	2500      	movs	r5, #0
 8004660:	e7f7      	b.n	8004652 <_printf_i+0x20a>
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	080049cd 	.word	0x080049cd
 8004668:	080049de 	.word	0x080049de

0800466c <memchr>:
 800466c:	b2c9      	uxtb	r1, r1
 800466e:	1882      	adds	r2, r0, r2
 8004670:	4290      	cmp	r0, r2
 8004672:	d101      	bne.n	8004678 <memchr+0xc>
 8004674:	2000      	movs	r0, #0
 8004676:	4770      	bx	lr
 8004678:	7803      	ldrb	r3, [r0, #0]
 800467a:	428b      	cmp	r3, r1
 800467c:	d0fb      	beq.n	8004676 <memchr+0xa>
 800467e:	3001      	adds	r0, #1
 8004680:	e7f6      	b.n	8004670 <memchr+0x4>

08004682 <memcpy>:
 8004682:	2300      	movs	r3, #0
 8004684:	b510      	push	{r4, lr}
 8004686:	429a      	cmp	r2, r3
 8004688:	d100      	bne.n	800468c <memcpy+0xa>
 800468a:	bd10      	pop	{r4, pc}
 800468c:	5ccc      	ldrb	r4, [r1, r3]
 800468e:	54c4      	strb	r4, [r0, r3]
 8004690:	3301      	adds	r3, #1
 8004692:	e7f8      	b.n	8004686 <memcpy+0x4>

08004694 <memmove>:
 8004694:	b510      	push	{r4, lr}
 8004696:	4288      	cmp	r0, r1
 8004698:	d902      	bls.n	80046a0 <memmove+0xc>
 800469a:	188b      	adds	r3, r1, r2
 800469c:	4298      	cmp	r0, r3
 800469e:	d303      	bcc.n	80046a8 <memmove+0x14>
 80046a0:	2300      	movs	r3, #0
 80046a2:	e007      	b.n	80046b4 <memmove+0x20>
 80046a4:	5c8b      	ldrb	r3, [r1, r2]
 80046a6:	5483      	strb	r3, [r0, r2]
 80046a8:	3a01      	subs	r2, #1
 80046aa:	d2fb      	bcs.n	80046a4 <memmove+0x10>
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	5ccc      	ldrb	r4, [r1, r3]
 80046b0:	54c4      	strb	r4, [r0, r3]
 80046b2:	3301      	adds	r3, #1
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1fa      	bne.n	80046ae <memmove+0x1a>
 80046b8:	e7f8      	b.n	80046ac <memmove+0x18>
	...

080046bc <_free_r>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	0005      	movs	r5, r0
 80046c0:	2900      	cmp	r1, #0
 80046c2:	d010      	beq.n	80046e6 <_free_r+0x2a>
 80046c4:	1f0c      	subs	r4, r1, #4
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	da00      	bge.n	80046ce <_free_r+0x12>
 80046cc:	18e4      	adds	r4, r4, r3
 80046ce:	0028      	movs	r0, r5
 80046d0:	f000 f8d4 	bl	800487c <__malloc_lock>
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <_free_r+0x90>)
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <_free_r+0x2c>
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	6014      	str	r4, [r2, #0]
 80046e0:	0028      	movs	r0, r5
 80046e2:	f000 f8d3 	bl	800488c <__malloc_unlock>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d908      	bls.n	80046fe <_free_r+0x42>
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	1860      	adds	r0, r4, r1
 80046f0:	4283      	cmp	r3, r0
 80046f2:	d1f3      	bne.n	80046dc <_free_r+0x20>
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	1841      	adds	r1, r0, r1
 80046fa:	6021      	str	r1, [r4, #0]
 80046fc:	e7ee      	b.n	80046dc <_free_r+0x20>
 80046fe:	001a      	movs	r2, r3
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <_free_r+0x4e>
 8004706:	42a3      	cmp	r3, r4
 8004708:	d9f9      	bls.n	80046fe <_free_r+0x42>
 800470a:	6811      	ldr	r1, [r2, #0]
 800470c:	1850      	adds	r0, r2, r1
 800470e:	42a0      	cmp	r0, r4
 8004710:	d10b      	bne.n	800472a <_free_r+0x6e>
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	1809      	adds	r1, r1, r0
 8004716:	1850      	adds	r0, r2, r1
 8004718:	6011      	str	r1, [r2, #0]
 800471a:	4283      	cmp	r3, r0
 800471c:	d1e0      	bne.n	80046e0 <_free_r+0x24>
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	1841      	adds	r1, r0, r1
 8004724:	6011      	str	r1, [r2, #0]
 8004726:	6053      	str	r3, [r2, #4]
 8004728:	e7da      	b.n	80046e0 <_free_r+0x24>
 800472a:	42a0      	cmp	r0, r4
 800472c:	d902      	bls.n	8004734 <_free_r+0x78>
 800472e:	230c      	movs	r3, #12
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	e7d5      	b.n	80046e0 <_free_r+0x24>
 8004734:	6821      	ldr	r1, [r4, #0]
 8004736:	1860      	adds	r0, r4, r1
 8004738:	4283      	cmp	r3, r0
 800473a:	d103      	bne.n	8004744 <_free_r+0x88>
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	1841      	adds	r1, r0, r1
 8004742:	6021      	str	r1, [r4, #0]
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	6054      	str	r4, [r2, #4]
 8004748:	e7ca      	b.n	80046e0 <_free_r+0x24>
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	20000090 	.word	0x20000090

08004750 <_malloc_r>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	2303      	movs	r3, #3
 8004754:	1ccd      	adds	r5, r1, #3
 8004756:	439d      	bics	r5, r3
 8004758:	3508      	adds	r5, #8
 800475a:	0006      	movs	r6, r0
 800475c:	2d0c      	cmp	r5, #12
 800475e:	d21f      	bcs.n	80047a0 <_malloc_r+0x50>
 8004760:	250c      	movs	r5, #12
 8004762:	42a9      	cmp	r1, r5
 8004764:	d81e      	bhi.n	80047a4 <_malloc_r+0x54>
 8004766:	0030      	movs	r0, r6
 8004768:	f000 f888 	bl	800487c <__malloc_lock>
 800476c:	4925      	ldr	r1, [pc, #148]	; (8004804 <_malloc_r+0xb4>)
 800476e:	680a      	ldr	r2, [r1, #0]
 8004770:	0014      	movs	r4, r2
 8004772:	2c00      	cmp	r4, #0
 8004774:	d11a      	bne.n	80047ac <_malloc_r+0x5c>
 8004776:	4f24      	ldr	r7, [pc, #144]	; (8004808 <_malloc_r+0xb8>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <_malloc_r+0x38>
 800477e:	0021      	movs	r1, r4
 8004780:	0030      	movs	r0, r6
 8004782:	f000 f869 	bl	8004858 <_sbrk_r>
 8004786:	6038      	str	r0, [r7, #0]
 8004788:	0029      	movs	r1, r5
 800478a:	0030      	movs	r0, r6
 800478c:	f000 f864 	bl	8004858 <_sbrk_r>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d12b      	bne.n	80047ec <_malloc_r+0x9c>
 8004794:	230c      	movs	r3, #12
 8004796:	0030      	movs	r0, r6
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	f000 f877 	bl	800488c <__malloc_unlock>
 800479e:	e003      	b.n	80047a8 <_malloc_r+0x58>
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	dade      	bge.n	8004762 <_malloc_r+0x12>
 80047a4:	230c      	movs	r3, #12
 80047a6:	6033      	str	r3, [r6, #0]
 80047a8:	2000      	movs	r0, #0
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	1b5b      	subs	r3, r3, r5
 80047b0:	d419      	bmi.n	80047e6 <_malloc_r+0x96>
 80047b2:	2b0b      	cmp	r3, #11
 80047b4:	d903      	bls.n	80047be <_malloc_r+0x6e>
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	18e4      	adds	r4, r4, r3
 80047ba:	6025      	str	r5, [r4, #0]
 80047bc:	e003      	b.n	80047c6 <_malloc_r+0x76>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	42a2      	cmp	r2, r4
 80047c2:	d10e      	bne.n	80047e2 <_malloc_r+0x92>
 80047c4:	600b      	str	r3, [r1, #0]
 80047c6:	0030      	movs	r0, r6
 80047c8:	f000 f860 	bl	800488c <__malloc_unlock>
 80047cc:	0020      	movs	r0, r4
 80047ce:	2207      	movs	r2, #7
 80047d0:	300b      	adds	r0, #11
 80047d2:	1d23      	adds	r3, r4, #4
 80047d4:	4390      	bics	r0, r2
 80047d6:	1ac2      	subs	r2, r0, r3
 80047d8:	4298      	cmp	r0, r3
 80047da:	d0e6      	beq.n	80047aa <_malloc_r+0x5a>
 80047dc:	1a1b      	subs	r3, r3, r0
 80047de:	50a3      	str	r3, [r4, r2]
 80047e0:	e7e3      	b.n	80047aa <_malloc_r+0x5a>
 80047e2:	6053      	str	r3, [r2, #4]
 80047e4:	e7ef      	b.n	80047c6 <_malloc_r+0x76>
 80047e6:	0022      	movs	r2, r4
 80047e8:	6864      	ldr	r4, [r4, #4]
 80047ea:	e7c2      	b.n	8004772 <_malloc_r+0x22>
 80047ec:	2303      	movs	r3, #3
 80047ee:	1cc4      	adds	r4, r0, #3
 80047f0:	439c      	bics	r4, r3
 80047f2:	42a0      	cmp	r0, r4
 80047f4:	d0e1      	beq.n	80047ba <_malloc_r+0x6a>
 80047f6:	1a21      	subs	r1, r4, r0
 80047f8:	0030      	movs	r0, r6
 80047fa:	f000 f82d 	bl	8004858 <_sbrk_r>
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	d1db      	bne.n	80047ba <_malloc_r+0x6a>
 8004802:	e7c7      	b.n	8004794 <_malloc_r+0x44>
 8004804:	20000090 	.word	0x20000090
 8004808:	20000094 	.word	0x20000094

0800480c <_realloc_r>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	0007      	movs	r7, r0
 8004810:	000d      	movs	r5, r1
 8004812:	0016      	movs	r6, r2
 8004814:	2900      	cmp	r1, #0
 8004816:	d105      	bne.n	8004824 <_realloc_r+0x18>
 8004818:	0011      	movs	r1, r2
 800481a:	f7ff ff99 	bl	8004750 <_malloc_r>
 800481e:	0004      	movs	r4, r0
 8004820:	0020      	movs	r0, r4
 8004822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004824:	2a00      	cmp	r2, #0
 8004826:	d103      	bne.n	8004830 <_realloc_r+0x24>
 8004828:	f7ff ff48 	bl	80046bc <_free_r>
 800482c:	0034      	movs	r4, r6
 800482e:	e7f7      	b.n	8004820 <_realloc_r+0x14>
 8004830:	f000 f834 	bl	800489c <_malloc_usable_size_r>
 8004834:	002c      	movs	r4, r5
 8004836:	42b0      	cmp	r0, r6
 8004838:	d2f2      	bcs.n	8004820 <_realloc_r+0x14>
 800483a:	0031      	movs	r1, r6
 800483c:	0038      	movs	r0, r7
 800483e:	f7ff ff87 	bl	8004750 <_malloc_r>
 8004842:	1e04      	subs	r4, r0, #0
 8004844:	d0ec      	beq.n	8004820 <_realloc_r+0x14>
 8004846:	0029      	movs	r1, r5
 8004848:	0032      	movs	r2, r6
 800484a:	f7ff ff1a 	bl	8004682 <memcpy>
 800484e:	0029      	movs	r1, r5
 8004850:	0038      	movs	r0, r7
 8004852:	f7ff ff33 	bl	80046bc <_free_r>
 8004856:	e7e3      	b.n	8004820 <_realloc_r+0x14>

08004858 <_sbrk_r>:
 8004858:	2300      	movs	r3, #0
 800485a:	b570      	push	{r4, r5, r6, lr}
 800485c:	4d06      	ldr	r5, [pc, #24]	; (8004878 <_sbrk_r+0x20>)
 800485e:	0004      	movs	r4, r0
 8004860:	0008      	movs	r0, r1
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	f7fd f882 	bl	800196c <_sbrk>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d103      	bne.n	8004874 <_sbrk_r+0x1c>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d000      	beq.n	8004874 <_sbrk_r+0x1c>
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	2000017c 	.word	0x2000017c

0800487c <__malloc_lock>:
 800487c:	b510      	push	{r4, lr}
 800487e:	4802      	ldr	r0, [pc, #8]	; (8004888 <__malloc_lock+0xc>)
 8004880:	f000 f814 	bl	80048ac <__retarget_lock_acquire_recursive>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	20000184 	.word	0x20000184

0800488c <__malloc_unlock>:
 800488c:	b510      	push	{r4, lr}
 800488e:	4802      	ldr	r0, [pc, #8]	; (8004898 <__malloc_unlock+0xc>)
 8004890:	f000 f80d 	bl	80048ae <__retarget_lock_release_recursive>
 8004894:	bd10      	pop	{r4, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	20000184 	.word	0x20000184

0800489c <_malloc_usable_size_r>:
 800489c:	1f0b      	subs	r3, r1, #4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	1f18      	subs	r0, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da01      	bge.n	80048aa <_malloc_usable_size_r+0xe>
 80048a6:	580b      	ldr	r3, [r1, r0]
 80048a8:	18c0      	adds	r0, r0, r3
 80048aa:	4770      	bx	lr

080048ac <__retarget_lock_acquire_recursive>:
 80048ac:	4770      	bx	lr

080048ae <__retarget_lock_release_recursive>:
 80048ae:	4770      	bx	lr

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
