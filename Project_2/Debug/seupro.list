
seupro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800b690  0800b690  0001b690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc94  0800bc94  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc94  0800bc94  0001bc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc9c  0800bc9c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc9c  0800bc9c  0001bc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc3c  200001e4  0800be88  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000be20  0800be88  0002be20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c550  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003acc  00000000  00000000  0003c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00040230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  000418a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e13  00000000  00000000  00042db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001966f  00000000  00000000  00047bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5d97  00000000  00000000  0006123a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00106fd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007274  00000000  00000000  00107024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b678 	.word	0x0800b678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b678 	.word	0x0800b678

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f001 f958 	bl	8002208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f84e 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f97c 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f60:	f000 f95a 	bl	8001218 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 f92e 	bl	80011c4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f68:	f000 f902 	bl	8001170 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f8ae 	bl	80010cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f70:	f004 f812 	bl	8004f98 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of timerMutex */
  timerMutexHandle = osMutexNew(&timerMutex_attributes);
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <main+0x74>)
 8000f76:	f004 f906 	bl	8005186 <osMutexNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <main+0x78>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of temperatureMutex */
  temperatureMutexHandle = osMutexNew(&temperatureMutex_attributes);
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <main+0x7c>)
 8000f82:	f004 f900 	bl	8005186 <osMutexNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <main+0x80>)
 8000f8a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of displayTask */
  displayTaskHandle = osThreadNew(startDisplayTask, NULL, &displayTask_attributes);
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <main+0x84>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <main+0x88>)
 8000f92:	f004 f84b 	bl	800502c <osThreadNew>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <main+0x8c>)
 8000f9a:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTask */
  temperatureTaskHandle = osThreadNew(startTemperature, NULL, &temperatureTask_attributes);
 8000f9c:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <main+0x90>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <main+0x94>)
 8000fa2:	f004 f843 	bl	800502c <osThreadNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <main+0x98>)
 8000faa:	6013      	str	r3, [r2, #0]

  /* creation of globalTimeTask */
  globalTimeTaskHandle = osThreadNew(startGlobalTimeTask, NULL, &globalTimeTask_attributes);
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <main+0x9c>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <main+0xa0>)
 8000fb2:	f004 f83b 	bl	800502c <osThreadNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <main+0xa4>)
 8000fba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fbc:	f004 f810 	bl	8004fe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <main+0x70>
 8000fc2:	bf00      	nop
 8000fc4:	0800b870 	.word	0x0800b870
 8000fc8:	2000bc84 	.word	0x2000bc84
 8000fcc:	0800b880 	.word	0x0800b880
 8000fd0:	2000b3d8 	.word	0x2000b3d8
 8000fd4:	0800b804 	.word	0x0800b804
 8000fd8:	08001955 	.word	0x08001955
 8000fdc:	2000b370 	.word	0x2000b370
 8000fe0:	0800b828 	.word	0x0800b828
 8000fe4:	08001999 	.word	0x08001999
 8000fe8:	2000bcd0 	.word	0x2000bcd0
 8000fec:	0800b84c 	.word	0x0800b84c
 8000ff0:	08001bf1 	.word	0x08001bf1
 8000ff4:	2000bccc 	.word	0x2000bccc

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fb51 	bl	80086ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <SystemClock_Config+0xcc>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <SystemClock_Config+0xd0>)
 8001042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	2301      	movs	r3, #1
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105c:	2310      	movs	r3, #16
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	2302      	movs	r3, #2
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001064:	2300      	movs	r3, #0
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001068:	2310      	movs	r3, #16
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800106c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001070:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001072:	2304      	movs	r3, #4
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001076:	2304      	movs	r3, #4
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fb22 	bl	80036c8 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800108a:	f000 fe11 	bl	8001cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2102      	movs	r1, #2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fd84 	bl	8003bb8 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010b6:	f000 fdfb 	bl	8001cb0 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	; 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <MX_ADC1_Init+0x9c>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_ADC1_Init+0x98>)
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <MX_ADC1_Init+0xa0>)
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_ADC1_Init+0x98>)
 800111a:	2201      	movs	r2, #1
 800111c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_ADC1_Init+0x98>)
 8001128:	2201      	movs	r2, #1
 800112a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_ADC1_Init+0x98>)
 800112e:	f001 f8ad 	bl	800228c <HAL_ADC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001138:	f000 fdba 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_ADC1_Init+0x98>)
 800114e:	f001 fa2d 	bl	80025ac <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 fdaa 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000bbdc 	.word	0x2000bbdc
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_USART1_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 80011a8:	f003 f9b4 	bl	8004514 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f000 fd7d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000bc88 	.word	0x2000bc88
 80011c0:	40011000 	.word	0x40011000

080011c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_USART2_UART_Init+0x50>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011fc:	f003 f98a 	bl	8004514 <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001206:	f000 fd53 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000bd40 	.word	0x2000bd40
 8001214:	40004400 	.word	0x40004400

08001218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_DMA_Init+0x3c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <MX_DMA_Init+0x3c>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_DMA_Init+0x3c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2105      	movs	r1, #5
 800123e:	203a      	movs	r0, #58	; 0x3a
 8001240:	f001 fc9a 	bl	8002b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001244:	203a      	movs	r0, #58	; 0x3a
 8001246:	f001 fcb3 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <MX_GPIO_Init+0x12c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a43      	ldr	r2, [pc, #268]	; (8001384 <MX_GPIO_Init+0x12c>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <MX_GPIO_Init+0x12c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <MX_GPIO_Init+0x12c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <MX_GPIO_Init+0x12c>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <MX_GPIO_Init+0x12c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <MX_GPIO_Init+0x12c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a35      	ldr	r2, [pc, #212]	; (8001384 <MX_GPIO_Init+0x12c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <MX_GPIO_Init+0x12c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <MX_GPIO_Init+0x12c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <MX_GPIO_Init+0x12c>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <MX_GPIO_Init+0x12c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BUZZER_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80012e4:	4828      	ldr	r0, [pc, #160]	; (8001388 <MX_GPIO_Init+0x130>)
 80012e6:	f002 f9d5 	bl	8003694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_1_Pin|LED_0_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80012f0:	4826      	ldr	r0, [pc, #152]	; (800138c <MX_GPIO_Init+0x134>)
 80012f2:	f002 f9cf 	bl	8003694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <MX_GPIO_Init+0x138>)
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4822      	ldr	r0, [pc, #136]	; (8001394 <MX_GPIO_Init+0x13c>)
 800130c:	f002 f83e 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BUZZER_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BUZZER_Pin|LED_3_Pin;
 8001310:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4817      	ldr	r0, [pc, #92]	; (8001388 <MX_GPIO_Init+0x130>)
 800132a:	f002 f82f 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin LED_0_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin|LED_0_Pin;
 800132e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4811      	ldr	r0, [pc, #68]	; (800138c <MX_GPIO_Init+0x134>)
 8001348:	f002 f820 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_0_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin;
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001354:	2301      	movs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_0_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_GPIO_Init+0x13c>)
 8001360:	f002 f814 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_GPIO_Init+0x134>)
 8001378:	f002 f808 	bl	800338c <HAL_GPIO_Init>

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	10210000 	.word	0x10210000
 8001394:	40020800 	.word	0x40020800

08001398 <set_lights_and_buzzer>:


/*
 * Function for setting the lights and activating the Buzzer
 * */
void set_lights_and_buzzer(int buzz){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, LED_0_Pin, light_list[0]);
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <set_lights_and_buzzer+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	2120      	movs	r1, #32
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <set_lights_and_buzzer+0x68>)
 80013ac:	f002 f972 	bl	8003694 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_1_Pin, light_list[1]);
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <set_lights_and_buzzer+0x64>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	2110      	movs	r1, #16
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <set_lights_and_buzzer+0x68>)
 80013bc:	f002 f96a 	bl	8003694 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_2_Pin, light_list[2]);
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <set_lights_and_buzzer+0x64>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <set_lights_and_buzzer+0x68>)
 80013ce:	f002 f961 	bl	8003694 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_3_Pin, light_list[3]);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <set_lights_and_buzzer+0x64>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <set_lights_and_buzzer+0x6c>)
 80013e0:	f002 f958 	bl	8003694 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, buzz);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <set_lights_and_buzzer+0x6c>)
 80013ee:	f002 f951 	bl	8003694 <HAL_GPIO_WritePin>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000200 	.word	0x20000200
 8001400:	40020400 	.word	0x40020400
 8001404:	40020000 	.word	0x40020000

08001408 <time_buffer_write>:


/*
 * time_buffer_write() and time_buffer_read() makes sure the reading and writing to the global buffer happens with mutual exclution
 * */
void time_buffer_write(char* time, int size){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	while( osMutexAcquire(timerMutexHandle, 10000/portTICK_RATE_MS) != osOK);	// Aquire mutex
 8001412:	bf00      	nop
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <time_buffer_write+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f242 7110 	movw	r1, #10000	; 0x2710
 800141c:	4618      	mov	r0, r3
 800141e:	f003 ff38 	bl	8005292 <osMutexAcquire>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f5      	bne.n	8001414 <time_buffer_write+0xc>
	for(int i=0; i < size;i++){
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e00b      	b.n	8001446 <time_buffer_write+0x3e>
		global_time_buffer[i] = time[i];
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	7819      	ldrb	r1, [r3, #0]
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <time_buffer_write+0x68>)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	460a      	mov	r2, r1
 800143e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < size;i++){
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	dbef      	blt.n	800142e <time_buffer_write+0x26>
	}
	while(osMutexRelease(timerMutexHandle) != osOK);	//Release mutex
 800144e:	bf00      	nop
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <time_buffer_write+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 ff67 	bl	8005328 <osMutexRelease>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f7      	bne.n	8001450 <time_buffer_write+0x48>
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000bc84 	.word	0x2000bc84
 8001470:	2000bd38 	.word	0x2000bd38

08001474 <time_buffer_read>:

/*
 * time_buffer_write() and time_buffer_read() makes sure the reading and writing to the global buffer happens with mutual exclution
 * */
void time_buffer_read(char* time, int size){
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]

	while(osMutexAcquire(timerMutexHandle, 10000/portTICK_RATE_MS) != osOK);	// Aquire mutex
 800147e:	bf00      	nop
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <time_buffer_read+0x60>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f242 7110 	movw	r1, #10000	; 0x2710
 8001488:	4618      	mov	r0, r3
 800148a:	f003 ff02 	bl	8005292 <osMutexAcquire>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f5      	bne.n	8001480 <time_buffer_read+0xc>
	for(int i = 0; i<size; i++){
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e00a      	b.n	80014b0 <time_buffer_read+0x3c>
		time[i] = global_time_buffer[i];
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	490d      	ldr	r1, [pc, #52]	; (80014d8 <time_buffer_read+0x64>)
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	440a      	add	r2, r1
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<size; i++){
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf0      	blt.n	800149a <time_buffer_read+0x26>
	}
	while(osMutexRelease(timerMutexHandle) != osOK);
 80014b8:	bf00      	nop
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <time_buffer_read+0x60>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 ff32 	bl	8005328 <osMutexRelease>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f7      	bne.n	80014ba <time_buffer_read+0x46>
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000bc84 	.word	0x2000bc84
 80014d8:	2000bd38 	.word	0x2000bd38

080014dc <temperature_buffer_write>:

/*
 * temperature_buffer_write() and temperature_buffer_read() makes sure the reading and writing to the global buffer happens with mutual exclution
 * */
void temperature_buffer_write(float temperature){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	ed87 0a01 	vstr	s0, [r7, #4]
	while( osMutexAcquire(temperatureMutexHandle, 10000/portTICK_RATE_MS) != osOK);	// Aquire mutex
 80014e6:	bf00      	nop
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <temperature_buffer_write+0x44>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f242 7110 	movw	r1, #10000	; 0x2710
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fece 	bl	8005292 <osMutexAcquire>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f5      	bne.n	80014e8 <temperature_buffer_write+0xc>
	global_temperature_buffer = temperature;
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <temperature_buffer_write+0x48>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
	while(osMutexRelease(temperatureMutexHandle) != osOK);	//Release mutex
 8001502:	bf00      	nop
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <temperature_buffer_write+0x44>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 ff0d 	bl	8005328 <osMutexRelease>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f7      	bne.n	8001504 <temperature_buffer_write+0x28>
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000b3d8 	.word	0x2000b3d8
 8001524:	20000210 	.word	0x20000210

08001528 <temperature_buffer_read>:

/*
 * temperature_buffer_write() and temperature_buffer_read() makes sure the reading and writing to the global buffer happens with mutual exclution
 * */
float temperature_buffer_read(){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	float temperature = 0.0;
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
	while(osMutexAcquire(temperatureMutexHandle, 10000/portTICK_RATE_MS) != osOK);	// Aquire mutex
 8001534:	bf00      	nop
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <temperature_buffer_read+0x4c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f242 7110 	movw	r1, #10000	; 0x2710
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fea7 	bl	8005292 <osMutexAcquire>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f5      	bne.n	8001536 <temperature_buffer_read+0xe>
	temperature = global_temperature_buffer;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <temperature_buffer_read+0x50>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	607b      	str	r3, [r7, #4]
	while(osMutexRelease(temperatureMutexHandle) != osOK);
 8001550:	bf00      	nop
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <temperature_buffer_read+0x4c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fee6 	bl	8005328 <osMutexRelease>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f7      	bne.n	8001552 <temperature_buffer_read+0x2a>
	return temperature;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	ee07 3a90 	vmov	s15, r3
}
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000b3d8 	.word	0x2000b3d8
 8001578:	20000210 	.word	0x20000210

0800157c <cleanResponse>:

/*
 *	 This function takes in the response from a HTTP request and cleans away so were left with only the JSON.
 */
void cleanResponse(char * data, int maxlen){
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]

	int t,h,l,o,i = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
	char * res;
	int indexbk;
	char bytes[4];

	res = data;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	617b      	str	r3, [r7, #20]

	for(t=0; t < maxlen; t++) buff_response1[t] = '*';
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e007      	b.n	80015a4 <cleanResponse+0x28>
 8001594:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <cleanResponse+0x150>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	4413      	add	r3, r2
 800159a:	222a      	movs	r2, #42	; 0x2a
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	3301      	adds	r3, #1
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
 80015a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf3      	blt.n	8001594 <cleanResponse+0x18>

	for(t = 0; t< maxlen;){
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
 80015b0:	e062      	b.n	8001678 <cleanResponse+0xfc>
		res = strnstr(res, "+IPD", maxlen-t);
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4945      	ldr	r1, [pc, #276]	; (80016d0 <cleanResponse+0x154>)
 80015bc:	6978      	ldr	r0, [r7, #20]
 80015be:	f007 fe1e 	bl	80091fe <strnstr>
 80015c2:	4603      	mov	r3, r0
 80015c4:	617b      	str	r3, [r7, #20]
		if(res!=NULL){
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d04f      	beq.n	800166c <cleanResponse+0xf0>
			bytes[0]=*(res+5);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	795b      	ldrb	r3, [r3, #5]
 80015d0:	723b      	strb	r3, [r7, #8]
			bytes[1]=*(res+6);
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	799b      	ldrb	r3, [r3, #6]
 80015d6:	727b      	strb	r3, [r7, #9]
			bytes[2]=*(res+7);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	79db      	ldrb	r3, [r3, #7]
 80015dc:	72bb      	strb	r3, [r7, #10]
			bytes[3]=*(res+8);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	7a1b      	ldrb	r3, [r3, #8]
 80015e2:	72fb      	strb	r3, [r7, #11]

			for(h=0;h<4;h++) if(bytes[h]==':'){o=h;bytes[h]=0;}
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
 80015e8:	e011      	b.n	800160e <cleanResponse+0x92>
 80015ea:	f107 0208 	add.w	r2, r7, #8
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b3a      	cmp	r3, #58	; 0x3a
 80015f6:	d107      	bne.n	8001608 <cleanResponse+0x8c>
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	f107 0208 	add.w	r2, r7, #8
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	4413      	add	r3, r2
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	3301      	adds	r3, #1
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	2b03      	cmp	r3, #3
 8001612:	ddea      	ble.n	80015ea <cleanResponse+0x6e>
			l=atoi(bytes);
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	4618      	mov	r0, r3
 800161a:	f006 fe3f 	bl	800829c <atoi>
 800161e:	60f8      	str	r0, [r7, #12]

			for(h=0;h<l;h++)buff_response1[t+h]=*(res+h+o+6);
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
 8001624:	e00e      	b.n	8001644 <cleanResponse+0xc8>
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	3306      	adds	r3, #6
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	441a      	add	r2, r3
 8001632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	440b      	add	r3, r1
 8001638:	7811      	ldrb	r1, [r2, #0]
 800163a:	4a24      	ldr	r2, [pc, #144]	; (80016cc <cleanResponse+0x150>)
 800163c:	54d1      	strb	r1, [r2, r3]
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	3301      	adds	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	6a3a      	ldr	r2, [r7, #32]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbec      	blt.n	8001626 <cleanResponse+0xaa>
			indexbk = t+h;
 800164c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	4413      	add	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
			t=t+l;
 8001654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
			res = res+t+o+6; // To avoid +IPD
 800165c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4413      	add	r3, r2
 8001662:	3306      	adds	r3, #6
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	4413      	add	r3, r2
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e005      	b.n	8001678 <cleanResponse+0xfc>
		}else{
			buff_response1[indexbk] = 0;
 800166c:	4a17      	ldr	r2, [pc, #92]	; (80016cc <cleanResponse+0x150>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4413      	add	r3, r2
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
			break;
 8001676:	e003      	b.n	8001680 <cleanResponse+0x104>
	for(t = 0; t< maxlen;){
 8001678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	db98      	blt.n	80015b2 <cleanResponse+0x36>
		}
	}
	i=0;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
	do{
	}while(buff_response1[i++]!='{');
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	61ba      	str	r2, [r7, #24]
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <cleanResponse+0x150>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	2b7b      	cmp	r3, #123	; 0x7b
 8001690:	d1f8      	bne.n	8001684 <cleanResponse+0x108>
	i--;
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	3b01      	subs	r3, #1
 8001696:	61bb      	str	r3, [r7, #24]

	for(t = 0; t < (2048-i); t++){
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	e00b      	b.n	80016b6 <cleanResponse+0x13a>
		buff_response1[t] = buff_response1[t+1];
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <cleanResponse+0x150>)
 80016a4:	5cd1      	ldrb	r1, [r2, r3]
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <cleanResponse+0x150>)
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	4413      	add	r3, r2
 80016ac:	460a      	mov	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
	for(t = 0; t < (2048-i); t++){
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	3301      	adds	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80016bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016be:	429a      	cmp	r2, r3
 80016c0:	dbed      	blt.n	800169e <cleanResponse+0x122>
	}

}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000b3dc 	.word	0x2000b3dc
 80016d0:	0800b6dc 	.word	0x0800b6dc

080016d4 <ESP8266_get_time>:

/*
 * This functions send a HTTP request to worldclockapi.com to get the current time
 * */
void ESP8266_get_time(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
	int ct;
	sprintf(buff_sprintf100,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n","worldclockapi.com","80");
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <ESP8266_get_time+0xc0>)
 80016dc:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <ESP8266_get_time+0xc4>)
 80016de:	492f      	ldr	r1, [pc, #188]	; (800179c <ESP8266_get_time+0xc8>)
 80016e0:	482f      	ldr	r0, [pc, #188]	; (80017a0 <ESP8266_get_time+0xcc>)
 80016e2:	f007 fd29 	bl	8009138 <siprintf>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100, strlen( buff_sprintf100),100000); // cabecera
 80016e6:	482e      	ldr	r0, [pc, #184]	; (80017a0 <ESP8266_get_time+0xcc>)
 80016e8:	f7fe fd7a 	bl	80001e0 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <ESP8266_get_time+0xd0>)
 80016f2:	492b      	ldr	r1, [pc, #172]	; (80017a0 <ESP8266_get_time+0xcc>)
 80016f4:	482c      	ldr	r0, [pc, #176]	; (80017a8 <ESP8266_get_time+0xd4>)
 80016f6:	f002 ff5a 	bl	80045ae <HAL_UART_Transmit>
	osDelay(100);
 80016fa:	2064      	movs	r0, #100	; 0x64
 80016fc:	f003 fd28 	bl	8005150 <osDelay>
	sprintf(buff_sprintf100,"GET /api/json/cet/now HTTP/1.1\r\nAccept: text/html\r\nHost: worldclockapi.com\r\n\r\n");
 8001700:	492a      	ldr	r1, [pc, #168]	; (80017ac <ESP8266_get_time+0xd8>)
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <ESP8266_get_time+0xcc>)
 8001704:	f007 fd18 	bl	8009138 <siprintf>
	sprintf(buff_sprintf100_1,( unsigned char *)"AT+CIPSEND=%d\r\n",strlen(buff_sprintf100));
 8001708:	4825      	ldr	r0, [pc, #148]	; (80017a0 <ESP8266_get_time+0xcc>)
 800170a:	f7fe fd69 	bl	80001e0 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	4927      	ldr	r1, [pc, #156]	; (80017b0 <ESP8266_get_time+0xdc>)
 8001714:	4827      	ldr	r0, [pc, #156]	; (80017b4 <ESP8266_get_time+0xe0>)
 8001716:	f007 fd0f 	bl	8009138 <siprintf>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100_1, strlen( buff_sprintf100_1),100000); // cabecera
 800171a:	4826      	ldr	r0, [pc, #152]	; (80017b4 <ESP8266_get_time+0xe0>)
 800171c:	f7fe fd60 	bl	80001e0 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <ESP8266_get_time+0xd0>)
 8001726:	4923      	ldr	r1, [pc, #140]	; (80017b4 <ESP8266_get_time+0xe0>)
 8001728:	481f      	ldr	r0, [pc, #124]	; (80017a8 <ESP8266_get_time+0xd4>)
 800172a:	f002 ff40 	bl	80045ae <HAL_UART_Transmit>
	osDelay(100);
 800172e:	2064      	movs	r0, #100	; 0x64
 8001730:	f003 fd0e 	bl	8005150 <osDelay>

	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	e007      	b.n	800174a <ESP8266_get_time+0x76>
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <ESP8266_get_time+0xe4>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001750:	dbf3      	blt.n	800173a <ESP8266_get_time+0x66>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8001752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001756:	4918      	ldr	r1, [pc, #96]	; (80017b8 <ESP8266_get_time+0xe4>)
 8001758:	4813      	ldr	r0, [pc, #76]	; (80017a8 <ESP8266_get_time+0xd4>)
 800175a:	f002 ffba 	bl	80046d2 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100, strlen( buff_sprintf100),100000); // cabecera
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <ESP8266_get_time+0xcc>)
 8001760:	f7fe fd3e 	bl	80001e0 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <ESP8266_get_time+0xd0>)
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <ESP8266_get_time+0xcc>)
 800176c:	480e      	ldr	r0, [pc, #56]	; (80017a8 <ESP8266_get_time+0xd4>)
 800176e:	f002 ff1e 	bl	80045ae <HAL_UART_Transmit>
	osDelay(500);
 8001772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001776:	f003 fceb 	bl	8005150 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <ESP8266_get_time+0xd4>)
 800177c:	f002 ffd9 	bl	8004732 <HAL_UART_DMAStop>

	cleanResponse(( unsigned char *)buff_recv,2048);
 8001780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <ESP8266_get_time+0xe4>)
 8001786:	f7ff fef9 	bl	800157c <cleanResponse>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800b6e4 	.word	0x0800b6e4
 8001798:	0800b6e8 	.word	0x0800b6e8
 800179c:	0800b6fc 	.word	0x0800b6fc
 80017a0:	2000b374 	.word	0x2000b374
 80017a4:	000186a0 	.word	0x000186a0
 80017a8:	2000bc88 	.word	0x2000bc88
 80017ac:	0800b718 	.word	0x0800b718
 80017b0:	0800b768 	.word	0x0800b768
 80017b4:	2000bcd4 	.word	0x2000bcd4
 80017b8:	2000ab70 	.word	0x2000ab70

080017bc <ESP8266_Boot>:

/*
 * This function is to set up the ESP8266 to connect to wifi. It is only runned once.
 * */
void ESP8266_Boot(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
	int ct;

	    // Tiene IP?
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	e007      	b.n	80017d8 <ESP8266_Boot+0x1c>
 80017c8:	4a5b      	ldr	r2, [pc, #364]	; (8001938 <ESP8266_Boot+0x17c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3301      	adds	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017de:	dbf3      	blt.n	80017c8 <ESP8266_Boot+0xc>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80017e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e4:	4954      	ldr	r1, [pc, #336]	; (8001938 <ESP8266_Boot+0x17c>)
 80017e6:	4855      	ldr	r0, [pc, #340]	; (800193c <ESP8266_Boot+0x180>)
 80017e8:	f002 ff73 	bl	80046d2 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 80017ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80017f0:	220a      	movs	r2, #10
 80017f2:	4953      	ldr	r1, [pc, #332]	; (8001940 <ESP8266_Boot+0x184>)
 80017f4:	4851      	ldr	r0, [pc, #324]	; (800193c <ESP8266_Boot+0x180>)
 80017f6:	f002 feda 	bl	80045ae <HAL_UART_Transmit>
		osDelay(2000);
 80017fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017fe:	f003 fca7 	bl	8005150 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 8001802:	484e      	ldr	r0, [pc, #312]	; (800193c <ESP8266_Boot+0x180>)
 8001804:	f002 ff95 	bl	8004732 <HAL_UART_DMAStop>
		HAL_UART_Transmit(&huart2, buff_recv,strlen((char*)buff_recv),10000);
 8001808:	484b      	ldr	r0, [pc, #300]	; (8001938 <ESP8266_Boot+0x17c>)
 800180a:	f7fe fce9 	bl	80001e0 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	b29a      	uxth	r2, r3
 8001812:	f242 7310 	movw	r3, #10000	; 0x2710
 8001816:	4948      	ldr	r1, [pc, #288]	; (8001938 <ESP8266_Boot+0x17c>)
 8001818:	484a      	ldr	r0, [pc, #296]	; (8001944 <ESP8266_Boot+0x188>)
 800181a:	f002 fec8 	bl	80045ae <HAL_UART_Transmit>


		// Pon en modo station=1,  station+access_point=3
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	e007      	b.n	8001834 <ESP8266_Boot+0x78>
 8001824:	4a44      	ldr	r2, [pc, #272]	; (8001938 <ESP8266_Boot+0x17c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3301      	adds	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800183a:	dbf3      	blt.n	8001824 <ESP8266_Boot+0x68>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 800183c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001840:	493d      	ldr	r1, [pc, #244]	; (8001938 <ESP8266_Boot+0x17c>)
 8001842:	483e      	ldr	r0, [pc, #248]	; (800193c <ESP8266_Boot+0x180>)
 8001844:	f002 ff45 	bl	80046d2 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(UART_ESP8266, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <ESP8266_Boot+0x18c>)
 800184a:	220d      	movs	r2, #13
 800184c:	493f      	ldr	r1, [pc, #252]	; (800194c <ESP8266_Boot+0x190>)
 800184e:	483b      	ldr	r0, [pc, #236]	; (800193c <ESP8266_Boot+0x180>)
 8001850:	f002 fead 	bl	80045ae <HAL_UART_Transmit>
		osDelay(2000);
 8001854:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001858:	f003 fc7a 	bl	8005150 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 800185c:	4837      	ldr	r0, [pc, #220]	; (800193c <ESP8266_Boot+0x180>)
 800185e:	f002 ff68 	bl	8004732 <HAL_UART_DMAStop>
		HAL_UART_Transmit(&huart2, buff_recv,strlen((char *)buff_recv),10000);
 8001862:	4835      	ldr	r0, [pc, #212]	; (8001938 <ESP8266_Boot+0x17c>)
 8001864:	f7fe fcbc 	bl	80001e0 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001870:	4931      	ldr	r1, [pc, #196]	; (8001938 <ESP8266_Boot+0x17c>)
 8001872:	4834      	ldr	r0, [pc, #208]	; (8001944 <ESP8266_Boot+0x188>)
 8001874:	f002 fe9b 	bl	80045ae <HAL_UART_Transmit>

		// Programa la contraseña del access-point
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	e007      	b.n	800188e <ESP8266_Boot+0xd2>
 800187e:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <ESP8266_Boot+0x17c>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3301      	adds	r3, #1
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001894:	dbf3      	blt.n	800187e <ESP8266_Boot+0xc2>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8001896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189a:	4927      	ldr	r1, [pc, #156]	; (8001938 <ESP8266_Boot+0x17c>)
 800189c:	4827      	ldr	r0, [pc, #156]	; (800193c <ESP8266_Boot+0x180>)
 800189e:	f002 ff18 	bl	80046d2 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(UART_ESP8266,( unsigned char *) "AT+CWJAP=\"Lowi338D\",\"VVGH3T7SR28SQ9\"\r\n",strlen("AT+CWJAP=\"Lowi338D\",\"VVGH3T7SR28SQ9\"\r\n"),10000);
 80018a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80018a6:	2226      	movs	r2, #38	; 0x26
 80018a8:	4929      	ldr	r1, [pc, #164]	; (8001950 <ESP8266_Boot+0x194>)
 80018aa:	4824      	ldr	r0, [pc, #144]	; (800193c <ESP8266_Boot+0x180>)
 80018ac:	f002 fe7f 	bl	80045ae <HAL_UART_Transmit>
		//HAL_UART_Transmit(UART_ESP8266,( unsigned char *) "AT+CWJAP=\"Lars iPhone\",\"noerart1234\"\r\n",strlen("AT+CWJAP=\"Lars iPhone\",\"noerart1234\"\r\n"),10000);
		osDelay(10000);
 80018b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80018b4:	f003 fc4c 	bl	8005150 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 80018b8:	4820      	ldr	r0, [pc, #128]	; (800193c <ESP8266_Boot+0x180>)
 80018ba:	f002 ff3a 	bl	8004732 <HAL_UART_DMAStop>
		HAL_UART_Transmit(&huart2, buff_recv,strlen((char *)buff_recv),10000);
 80018be:	481e      	ldr	r0, [pc, #120]	; (8001938 <ESP8266_Boot+0x17c>)
 80018c0:	f7fe fc8e 	bl	80001e0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80018cc:	491a      	ldr	r1, [pc, #104]	; (8001938 <ESP8266_Boot+0x17c>)
 80018ce:	481d      	ldr	r0, [pc, #116]	; (8001944 <ESP8266_Boot+0x188>)
 80018d0:	f002 fe6d 	bl	80045ae <HAL_UART_Transmit>


		// verifica si hay IP
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	e007      	b.n	80018ea <ESP8266_Boot+0x12e>
 80018da:	4a17      	ldr	r2, [pc, #92]	; (8001938 <ESP8266_Boot+0x17c>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f0:	dbf3      	blt.n	80018da <ESP8266_Boot+0x11e>
		HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80018f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f6:	4910      	ldr	r1, [pc, #64]	; (8001938 <ESP8266_Boot+0x17c>)
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <ESP8266_Boot+0x180>)
 80018fa:	f002 feea 	bl	80046d2 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 80018fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001902:	220a      	movs	r2, #10
 8001904:	490e      	ldr	r1, [pc, #56]	; (8001940 <ESP8266_Boot+0x184>)
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <ESP8266_Boot+0x180>)
 8001908:	f002 fe51 	bl	80045ae <HAL_UART_Transmit>
		osDelay(4000);
 800190c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001910:	f003 fc1e 	bl	8005150 <osDelay>
		HAL_UART_DMAStop(UART_ESP8266);
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <ESP8266_Boot+0x180>)
 8001916:	f002 ff0c 	bl	8004732 <HAL_UART_DMAStop>
		HAL_UART_Transmit(&huart2, buff_recv,strlen((char *)buff_recv),10000);
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <ESP8266_Boot+0x17c>)
 800191c:	f7fe fc60 	bl	80001e0 <strlen>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	f242 7310 	movw	r3, #10000	; 0x2710
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <ESP8266_Boot+0x17c>)
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <ESP8266_Boot+0x188>)
 800192c:	f002 fe3f 	bl	80045ae <HAL_UART_Transmit>

}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000ab70 	.word	0x2000ab70
 800193c:	2000bc88 	.word	0x2000bc88
 8001940:	0800b778 	.word	0x0800b778
 8001944:	2000bd40 	.word	0x2000bd40
 8001948:	000186a0 	.word	0x000186a0
 800194c:	0800b784 	.word	0x0800b784
 8001950:	0800b794 	.word	0x0800b794

08001954 <startDisplayTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDisplayTask */
void startDisplayTask(void *argument)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	 osDelay(1000);
 800195c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001960:	f003 fbf6 	bl	8005150 <osDelay>

	 // Get temperature from global buffer
	 float temperature = 0.0;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
	 temperature = temperature_buffer_read();
 800196a:	f7ff fddd 	bl	8001528 <temperature_buffer_read>
 800196e:	ed87 0a05 	vstr	s0, [r7, #20]

	 // Get time from global buffer
	 char time[6];
	 time_buffer_read(time,6);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	2106      	movs	r1, #6
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fd7b 	bl	8001474 <time_buffer_read>

	 printf("Time: %s - Temperature: %.2f\r\n",time,temperature);
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7fe fdea 	bl	8000558 <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	f107 010c 	add.w	r1, r7, #12
 800198c:	4801      	ldr	r0, [pc, #4]	; (8001994 <startDisplayTask+0x40>)
 800198e:	f007 fbab 	bl	80090e8 <iprintf>
  {
 8001992:	e7e3      	b.n	800195c <startDisplayTask+0x8>
 8001994:	0800b7bc 	.word	0x0800b7bc

08001998 <startTemperature>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTemperature */
void startTemperature(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTemperature */
  /* Infinite loop */
	for(;;)
	  {
		  osDelay(1000);
 80019a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a4:	f003 fbd4 	bl	8005150 <osDelay>
		  uint32_t valueAD;
		  float VRNTC,RNTC,TNTC;
		  int buzzer = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		  ADC_ChannelConfTypeDef sConfig = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
			// configuracion del canal de entrada A/D
		  sConfig.Channel = ADC_CHANNEL_1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
		  sConfig.Rank = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
		  //sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
		  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	4619      	mov	r1, r3
 80019c8:	4885      	ldr	r0, [pc, #532]	; (8001be0 <startTemperature+0x248>)
 80019ca:	f000 fdef 	bl	80025ac <HAL_ADC_ConfigChannel>
		  // Disparo la conversion
		  HAL_ADC_Start(&hadc1);
 80019ce:	4884      	ldr	r0, [pc, #528]	; (8001be0 <startTemperature+0x248>)
 80019d0:	f000 fca0 	bl	8002314 <HAL_ADC_Start>
		  // Espero la finalización
		  HAL_ADC_PollForConversion(&hadc1, 10000);
 80019d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80019d8:	4881      	ldr	r0, [pc, #516]	; (8001be0 <startTemperature+0x248>)
 80019da:	f000 fd4f 	bl	800247c <HAL_ADC_PollForConversion>
		  // Leo el valor de la conversión 4095 y 0
		  valueAD=HAL_ADC_GetValue(&hadc1);
 80019de:	4880      	ldr	r0, [pc, #512]	; (8001be0 <startTemperature+0x248>)
 80019e0:	f000 fdd7 	bl	8002592 <HAL_ADC_GetValue>
 80019e4:	6238      	str	r0, [r7, #32]
		  //printf("valor %d \r\n",valueAD);

		  TNTC=BETA/(log((-10000.0*3.3/(valueAD*3.3/4095.9-3.3)-10000.0)/R25)+BETA/T25)-273.18;
 80019e6:	6a38      	ldr	r0, [r7, #32]
 80019e8:	f7fe fd94 	bl	8000514 <__aeabi_ui2d>
 80019ec:	a36e      	add	r3, pc, #440	; (adr r3, 8001ba8 <startTemperature+0x210>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fe09 	bl	8000608 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	a36c      	add	r3, pc, #432	; (adr r3, 8001bb0 <startTemperature+0x218>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe ff2a 	bl	800085c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	a365      	add	r3, pc, #404	; (adr r3, 8001ba8 <startTemperature+0x210>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fc3f 	bl	8000298 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	a166      	add	r1, pc, #408	; (adr r1, 8001bb8 <startTemperature+0x220>)
 8001a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a24:	f7fe ff1a 	bl	800085c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	a363      	add	r3, pc, #396	; (adr r3, 8001bc0 <startTemperature+0x228>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fc2f 	bl	8000298 <__aeabi_dsub>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	a35f      	add	r3, pc, #380	; (adr r3, 8001bc0 <startTemperature+0x228>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe ff08 	bl	800085c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	ec43 2b17 	vmov	d7, r2, r3
 8001a54:	eeb0 0a47 	vmov.f32	s0, s14
 8001a58:	eef0 0a67 	vmov.f32	s1, s15
 8001a5c:	f009 fc00 	bl	800b260 <log>
 8001a60:	ec51 0b10 	vmov	r0, r1, d0
 8001a64:	a358      	add	r3, pc, #352	; (adr r3, 8001bc8 <startTemperature+0x230>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fc17 	bl	800029c <__adddf3>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	a157      	add	r1, pc, #348	; (adr r1, 8001bd0 <startTemperature+0x238>)
 8001a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a78:	f7fe fef0 	bl	800085c <__aeabi_ddiv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	a354      	add	r3, pc, #336	; (adr r3, 8001bd8 <startTemperature+0x240>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fc05 	bl	8000298 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f88f 	bl	8000bb8 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	61fb      	str	r3, [r7, #28]

		  temperature_buffer_write(TNTC);
 8001a9e:	ed97 0a07 	vldr	s0, [r7, #28]
 8001aa2:	f7ff fd1b 	bl	80014dc <temperature_buffer_write>

		  if(TNTC>32){
 8001aa6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aaa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001be4 <startTemperature+0x24c>
 8001aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	dd19      	ble.n	8001aec <startTemperature+0x154>
			  for(int i = 0; i<4; i++){
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abc:	e007      	b.n	8001ace <startTemperature+0x136>
				  light_list[i] = 1;
 8001abe:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <startTemperature+0x250>)
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(int i = 0; i<4; i++){
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	3301      	adds	r3, #1
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	ddf4      	ble.n	8001abe <startTemperature+0x126>
			  }
			  if(TNTC>34){
 8001ad4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ad8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001bec <startTemperature+0x254>
 8001adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae4:	dd5a      	ble.n	8001b9c <startTemperature+0x204>
				  buzzer = 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aea:	e057      	b.n	8001b9c <startTemperature+0x204>
			  }
		  } else if(TNTC > 29){
 8001aec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af0:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8001af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	dd0e      	ble.n	8001b1c <startTemperature+0x184>
				light_list[0]=0;
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <startTemperature+0x250>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
				light_list[1]=1;
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <startTemperature+0x250>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	605a      	str	r2, [r3, #4]
				light_list[2]=1;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <startTemperature+0x250>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	609a      	str	r2, [r3, #8]
				light_list[3]=1;
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <startTemperature+0x250>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	60da      	str	r2, [r3, #12]
				buzzer = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1a:	e03f      	b.n	8001b9c <startTemperature+0x204>
		  } else if(TNTC > 26){
 8001b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b20:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	dd0e      	ble.n	8001b4c <startTemperature+0x1b4>
				light_list[0]=0;
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <startTemperature+0x250>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
				light_list[1]=0;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <startTemperature+0x250>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
				light_list[2]=1;
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <startTemperature+0x250>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	609a      	str	r2, [r3, #8]
				light_list[3]=1;
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <startTemperature+0x250>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	60da      	str	r2, [r3, #12]
				buzzer=0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4a:	e027      	b.n	8001b9c <startTemperature+0x204>
		  }else if(TNTC > 23){
 8001b4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b50:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5c:	dd0e      	ble.n	8001b7c <startTemperature+0x1e4>
				light_list[0]=0;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <startTemperature+0x250>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
				light_list[1]=0;
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <startTemperature+0x250>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
				light_list[2]=0;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <startTemperature+0x250>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
				light_list[3]=1;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <startTemperature+0x250>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	60da      	str	r2, [r3, #12]
				buzzer = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7a:	e00f      	b.n	8001b9c <startTemperature+0x204>
		  }else{
			  for(int i = 0; i<4; i++){
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	e007      	b.n	8001b92 <startTemperature+0x1fa>
				  light_list[i]=0;
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <startTemperature+0x250>)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	2100      	movs	r1, #0
 8001b88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(int i = 0; i<4; i++){
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3301      	adds	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	ddf4      	ble.n	8001b82 <startTemperature+0x1ea>
			  }
			  buzzer = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  set_lights_and_buzzer(buzzer);
 8001b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b9e:	f7ff fbfb 	bl	8001398 <set_lights_and_buzzer>
	  {
 8001ba2:	e6fd      	b.n	80019a0 <startTemperature+0x8>
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	66666666 	.word	0x66666666
 8001bac:	400a6666 	.word	0x400a6666
 8001bb0:	cccccccd 	.word	0xcccccccd
 8001bb4:	40afffcc 	.word	0x40afffcc
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	c0e01d00 	.word	0xc0e01d00
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40c38800 	.word	0x40c38800
 8001bc8:	cde627c2 	.word	0xcde627c2
 8001bcc:	402a294c 	.word	0x402a294c
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40ae7800 	.word	0x40ae7800
 8001bd8:	47ae147b 	.word	0x47ae147b
 8001bdc:	407112e1 	.word	0x407112e1
 8001be0:	2000bbdc 	.word	0x2000bbdc
 8001be4:	42000000 	.word	0x42000000
 8001be8:	20000200 	.word	0x20000200
 8001bec:	42080000 	.word	0x42080000

08001bf0 <startGlobalTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGlobalTimeTask */
void startGlobalTimeTask(void *argument)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGlobalTimeTask */
	int it;
	char * temp_time;
	it=0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
	ESP8266_Boot();
 8001bfc:	f7ff fdde 	bl	80017bc <ESP8266_Boot>

  /* Infinite loop */
  for(;;)
  {
	  it++;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
	  ESP8266_get_time();
 8001c06:	f7ff fd65 	bl	80016d4 <ESP8266_get_time>

	  temp_time = strstr(buff_response1,"currentDateTime");
 8001c0a:	491e      	ldr	r1, [pc, #120]	; (8001c84 <startGlobalTimeTask+0x94>)
 8001c0c:	481e      	ldr	r0, [pc, #120]	; (8001c88 <startGlobalTimeTask+0x98>)
 8001c0e:	f007 fb17 	bl	8009240 <strstr>
 8001c12:	60f8      	str	r0, [r7, #12]
	  temp_time = temp_time+strlen("currentDateTime:yyyy-mm-dd:")+2; // +2 to skip ""
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	331d      	adds	r3, #29
 8001c18:	60fb      	str	r3, [r7, #12]
		int q = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
		do{
		}while(temp_time[q++]!='+'); //iterate over the timestamp, already know it ends with +
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	613a      	str	r2, [r7, #16]
 8001c24:	461a      	mov	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b2b      	cmp	r3, #43	; 0x2b
 8001c2e:	d1f6      	bne.n	8001c1e <startGlobalTimeTask+0x2e>
		q--;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	613b      	str	r3, [r7, #16]
		for(q; q < strlen(temp_time);q++)temp_time[q]=NULL; //Remove the rest of the response
 8001c36:	e007      	b.n	8001c48 <startGlobalTimeTask+0x58>
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	3301      	adds	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7fe fac9 	bl	80001e0 <strlen>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d8f0      	bhi.n	8001c38 <startGlobalTimeTask+0x48>

	    if(temp_time[0] != 0){
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <startGlobalTimeTask+0x84>
	    	time_buffer_write(temp_time, strlen(temp_time)); // Write current time to global time buffer
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7fe fabe 	bl	80001e0 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff fbcd 	bl	8001408 <time_buffer_write>
	    	temp_time[0] = 0;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
	    }
		fflush(NULL);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f006 fbdd 	bl	8008434 <fflush>

    osDelay(200);
 8001c7a:	20c8      	movs	r0, #200	; 0xc8
 8001c7c:	f003 fa68 	bl	8005150 <osDelay>
  {
 8001c80:	e7be      	b.n	8001c00 <startGlobalTimeTask+0x10>
 8001c82:	bf00      	nop
 8001c84:	0800b7dc 	.word	0x0800b7dc
 8001c88:	2000b3dc 	.word	0x2000b3dc

08001c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c9e:	f000 fad5 	bl	800224c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>
	...

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_MspInit+0x54>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_MspInit+0x54>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_MspInit+0x54>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_MspInit+0x54>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <HAL_MspInit+0x54>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_MspInit+0x54>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	f06f 0001 	mvn.w	r0, #1
 8001d02:	f000 ff39 	bl	8002b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_ADC_MspInit+0x7c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d127      	bne.n	8001d86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_ADC_MspInit+0x80>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <HAL_ADC_MspInit+0x80>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_ADC_MspInit+0x80>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_ADC_MspInit+0x80>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_ADC_MspInit+0x80>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_ADC_MspInit+0x80>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TEMPERATURE_Pin|POT_Pin;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d72:	2303      	movs	r3, #3
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_ADC_MspInit+0x84>)
 8001d82:	f001 fb03 	bl	800338c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40012000 	.word	0x40012000
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_UART_MspInit+0x144>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d15b      	bne.n	8001e76 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a47      	ldr	r2, [pc, #284]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001df6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4835      	ldr	r0, [pc, #212]	; (8001ee8 <HAL_UART_MspInit+0x14c>)
 8001e14:	f001 faba 	bl	800338c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e1a:	4a35      	ldr	r2, [pc, #212]	; (8001ef0 <HAL_UART_MspInit+0x154>)
 8001e1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e32:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e38:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e58:	4824      	ldr	r0, [pc, #144]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e5a:	f000 feb7 	bl	8002bcc <HAL_DMA_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e64:	f7ff ff24 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a20      	ldr	r2, [pc, #128]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_UART_MspInit+0x150>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e74:	e030      	b.n	8001ed8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_UART_MspInit+0x158>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d12b      	bne.n	8001ed8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_UART_MspInit+0x148>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb8:	230c      	movs	r3, #12
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_UART_MspInit+0x14c>)
 8001ed4:	f001 fa5a 	bl	800338c <HAL_GPIO_Init>
}
 8001ed8:	bf00      	nop
 8001eda:	3730      	adds	r7, #48	; 0x30
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	2000bc24 	.word	0x2000bc24
 8001ef0:	40026440 	.word	0x40026440
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	2019      	movs	r0, #25
 8001f0e:	f000 fe33 	bl	8002b78 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f12:	2019      	movs	r0, #25
 8001f14:	f000 fe4c 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_InitTick+0xa0>)
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_InitTick+0xa0>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6453      	str	r3, [r2, #68]	; 0x44
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_InitTick+0xa0>)
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f34:	f107 0210 	add.w	r2, r7, #16
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 f836 	bl	8003fb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f44:	f002 f820 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 8001f48:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <HAL_InitTick+0xa4>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	3b01      	subs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_InitTick+0xa8>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_InitTick+0xac>)
 8001f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_InitTick+0xa8>)
 8001f60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_InitTick+0xa8>)
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_InitTick+0xa8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_InitTick+0xa8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <HAL_InitTick+0xa8>)
 8001f7a:	f002 f84b 	bl	8004014 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d104      	bne.n	8001f8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_InitTick+0xa8>)
 8001f86:	f002 f89f 	bl	80040c8 <HAL_TIM_Base_Start_IT>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3730      	adds	r7, #48	; 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	2000bd84 	.word	0x2000bd84
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <NMI_Handler+0x4>

08001fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fda:	f002 f8d7 	bl	800418c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000bd84 	.word	0x2000bd84

08001fe8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <DMA2_Stream2_IRQHandler+0x10>)
 8001fee:	f000 ff63 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000bc24 	.word	0x2000bc24

08001ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	return 1;
 8002000:	2301      	movs	r3, #1
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_kill>:

int _kill(int pid, int sig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002016:	f006 f945 	bl	80082a4 <__errno>
 800201a:	4603      	mov	r3, r0
 800201c:	2216      	movs	r2, #22
 800201e:	601a      	str	r2, [r3, #0]
	return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_exit>:

void _exit (int status)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffe7 	bl	800200c <_kill>
	while (1) {}		/* Make sure we hang here */
 800203e:	e7fe      	b.n	800203e <_exit+0x12>

08002040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00a      	b.n	8002068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002052:	f3af 8000 	nop.w
 8002056:	4601      	mov	r1, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf0      	blt.n	8002052 <_read+0x12>
	}

return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_close>:
	}
	return len;
}

int _close(int file)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	return -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a2:	605a      	str	r2, [r3, #4]
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_isatty>:

int _isatty(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
	return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f006 f8c6 	bl	80082a4 <__errno>
 8002118:	4603      	mov	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <_sbrk+0x64>)
 8002134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20020000 	.word	0x20020000
 8002144:	00000400 	.word	0x00000400
 8002148:	20000214 	.word	0x20000214
 800214c:	2000be20 	.word	0x2000be20

08002150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <_write>:

return fpriority;
}

int _write(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00b      	b.n	800219e <_write+0x2a>
	{
	   // ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	1c4b      	adds	r3, r1, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002190:	2201      	movs	r2, #1
 8002192:	4807      	ldr	r0, [pc, #28]	; (80021b0 <_write+0x3c>)
 8002194:	f002 fa0b 	bl	80045ae <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbef      	blt.n	8002186 <_write+0x12>
	}

	return len;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000bd40 	.word	0x2000bd40

080021b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d0:	4c0b      	ldr	r4, [pc, #44]	; (8002200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021de:	f7ff ffb7 	bl	8002150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e2:	f006 fa2f 	bl	8008644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e6:	f7fe feb3 	bl	8000f50 <main>
  bx  lr    
 80021ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021f8:	0800bca4 	.word	0x0800bca4
  ldr r2, =_sbss
 80021fc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002200:	2000be20 	.word	0x2000be20

08002204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC_IRQHandler>
	...

08002208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_Init+0x40>)
 8002212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_Init+0x40>)
 800221e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_Init+0x40>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 fc96 	bl	8002b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff fe5e 	bl	8001ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800223c:	f7ff fd3e 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00

0800224c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x24>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_IncTick+0x24>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000008 	.word	0x20000008
 8002270:	2000bdcc 	.word	0x2000bdcc

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	2000bdcc 	.word	0x2000bdcc

0800228c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e033      	b.n	800230a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fd32 	bl	8001d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	f043 0202 	orr.w	r2, r3, #2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa96 	bl	8002810 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
 80022fa:	e001      	b.n	8002300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_ADC_Start+0x1a>
 800232a:	2302      	movs	r3, #2
 800232c:	e097      	b.n	800245e <HAL_ADC_Start+0x14a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d018      	beq.n	8002376 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002354:	4b45      	ldr	r3, [pc, #276]	; (800246c <HAL_ADC_Start+0x158>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a45      	ldr	r2, [pc, #276]	; (8002470 <HAL_ADC_Start+0x15c>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9a      	lsrs	r2, r3, #18
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002368:	e002      	b.n	8002370 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3b01      	subs	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f9      	bne.n	800236a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d15f      	bne.n	8002444 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c2:	d106      	bne.n	80023d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	f023 0206 	bic.w	r2, r3, #6
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_ADC_Start+0x160>)
 80023e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d129      	bne.n	800245c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e020      	b.n	800245c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_ADC_Start+0x164>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d11b      	bne.n	800245c <HAL_ADC_Start+0x148>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d114      	bne.n	800245c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	e00b      	b.n	800245c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f043 0210 	orr.w	r2, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000
 8002470:	431bde83 	.word	0x431bde83
 8002474:	40012300 	.word	0x40012300
 8002478:	40012000 	.word	0x40012000

0800247c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002498:	d113      	bne.n	80024c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a8:	d10b      	bne.n	80024c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0220 	orr.w	r2, r3, #32
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e063      	b.n	800258a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024c2:	f7ff fed7 	bl	8002274 <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024c8:	e021      	b.n	800250e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d0:	d01d      	beq.n	800250e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_ADC_PollForConversion+0x6c>
 80024d8:	f7ff fecc 	bl	8002274 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d212      	bcs.n	800250e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d00b      	beq.n	800250e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0204 	orr.w	r2, r3, #4
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e03d      	b.n	800258a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d1d6      	bne.n	80024ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0212 	mvn.w	r2, #18
 8002524:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d123      	bne.n	8002588 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d11f      	bne.n	8002588 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002560:	2b00      	cmp	r3, #0
 8002562:	d111      	bne.n	8002588 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1c>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e113      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x244>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	d925      	bls.n	8002624 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68d9      	ldr	r1, [r3, #12]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	3b1e      	subs	r3, #30
 80025ee:	2207      	movs	r2, #7
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43da      	mvns	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	400a      	ands	r2, r1
 80025fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68d9      	ldr	r1, [r3, #12]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	4603      	mov	r3, r0
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4403      	add	r3, r0
 8002616:	3b1e      	subs	r3, #30
 8002618:	409a      	lsls	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	e022      	b.n	800266a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6919      	ldr	r1, [r3, #16]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	2207      	movs	r2, #7
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6919      	ldr	r1, [r3, #16]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	4603      	mov	r3, r0
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4403      	add	r3, r0
 8002660:	409a      	lsls	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b06      	cmp	r3, #6
 8002670:	d824      	bhi.n	80026bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3b05      	subs	r3, #5
 8002684:	221f      	movs	r2, #31
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b05      	subs	r3, #5
 80026ae:	fa00 f203 	lsl.w	r2, r0, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ba:	e04c      	b.n	8002756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d824      	bhi.n	800270e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	3b23      	subs	r3, #35	; 0x23
 80026d6:	221f      	movs	r2, #31
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43da      	mvns	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	400a      	ands	r2, r1
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b23      	subs	r3, #35	; 0x23
 8002700:	fa00 f203 	lsl.w	r2, r0, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
 800270c:	e023      	b.n	8002756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3b41      	subs	r3, #65	; 0x41
 8002720:	221f      	movs	r2, #31
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	400a      	ands	r2, r1
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	4618      	mov	r0, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b41      	subs	r3, #65	; 0x41
 800274a:	fa00 f203 	lsl.w	r2, r0, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_ADC_ConfigChannel+0x250>)
 8002758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a28      	ldr	r2, [pc, #160]	; (8002800 <HAL_ADC_ConfigChannel+0x254>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10f      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1d8>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b12      	cmp	r3, #18
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_ADC_ConfigChannel+0x254>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12b      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x23a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <HAL_ADC_ConfigChannel+0x258>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b11      	cmp	r3, #17
 800279e:	d122      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_ADC_ConfigChannel+0x258>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d111      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_ADC_ConfigChannel+0x25c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a11      	ldr	r2, [pc, #68]	; (800280c <HAL_ADC_ConfigChannel+0x260>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	0c9a      	lsrs	r2, r3, #18
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f9      	bne.n	80027da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40012300 	.word	0x40012300
 8002800:	40012000 	.word	0x40012000
 8002804:	10000012 	.word	0x10000012
 8002808:	20000000 	.word	0x20000000
 800280c:	431bde83 	.word	0x431bde83

08002810 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002818:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <ADC_Init+0x1f0>)
 800281a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	431a      	orrs	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <ADC_Init+0x1f4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	e00f      	b.n	800290e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800290c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0202 	bic.w	r2, r2, #2
 800291c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e1b      	ldrb	r3, [r3, #24]
 8002928:	005a      	lsls	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800295a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	3b01      	subs	r3, #1
 8002968:	035a      	lsls	r2, r3, #13
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e007      	b.n	8002984 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002982:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	3b01      	subs	r3, #1
 80029a0:	051a      	lsls	r2, r3, #20
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c6:	025a      	lsls	r2, r3, #9
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	029a      	lsls	r2, r3, #10
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40012300 	.word	0x40012300
 8002a04:	0f000001 	.word	0x0f000001

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60d3      	str	r3, [r2, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff4c 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8a:	f7ff ff61 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002b8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f7ff ffb1 	bl	8002afc <NVIC_EncodePriority>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff80 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff54 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff fb4c 	bl	8002274 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e099      	b.n	8002d1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c08:	e00f      	b.n	8002c2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0a:	f7ff fb33 	bl	8002274 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d908      	bls.n	8002c2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e078      	b.n	8002d1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e8      	bne.n	8002c0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_DMA_Init+0x158>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d107      	bne.n	8002c94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0307 	bic.w	r3, r3, #7
 8002caa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d117      	bne.n	8002cee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fadf 	bl	8003294 <DMA_CheckFifoParam>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cea:	2301      	movs	r3, #1
 8002cec:	e016      	b.n	8002d1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa96 	bl	8003228 <DMA_CalcBaseAndBitshift>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	223f      	movs	r2, #63	; 0x3f
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	f010803f 	.word	0xf010803f

08002d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Start_IT+0x26>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e040      	b.n	8002dd0 <HAL_DMA_Start_IT+0xa8>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d12f      	bne.n	8002dc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fa28 	bl	80031cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	223f      	movs	r2, #63	; 0x3f
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0216 	orr.w	r2, r2, #22
 8002d96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0208 	orr.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e005      	b.n	8002dce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de6:	f7ff fa45 	bl	8002274 <HAL_GetTick>
 8002dea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d008      	beq.n	8002e0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e052      	b.n	8002eb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0216 	bic.w	r2, r2, #22
 8002e18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_DMA_Abort+0x62>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0208 	bic.w	r2, r2, #8
 8002e48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5a:	e013      	b.n	8002e84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5c:	f7ff fa0a 	bl	8002274 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d90c      	bls.n	8002e84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e015      	b.n	8002eb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e4      	bne.n	8002e5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	223f      	movs	r2, #63	; 0x3f
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec4:	4b92      	ldr	r3, [pc, #584]	; (8003110 <HAL_DMA_IRQHandler+0x258>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a92      	ldr	r2, [pc, #584]	; (8003114 <HAL_DMA_IRQHandler+0x25c>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01a      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	2208      	movs	r2, #8
 8002f12:	409a      	lsls	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5e:	2204      	movs	r2, #4
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f043 0204 	orr.w	r2, r3, #4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2210      	movs	r2, #16
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d043      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03c      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d024      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
 8002fe6:	e01f      	b.n	8003028 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
 8002ff8:	e016      	b.n	8003028 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0208 	bic.w	r2, r2, #8
 8003016:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	2220      	movs	r2, #32
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 808e 	beq.w	8003156 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8086 	beq.w	8003156 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	2220      	movs	r2, #32
 8003050:	409a      	lsls	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b05      	cmp	r3, #5
 8003060:	d136      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0216 	bic.w	r2, r2, #22
 8003070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003080:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <HAL_DMA_IRQHandler+0x1da>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0208 	bic.w	r2, r2, #8
 80030a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	223f      	movs	r2, #63	; 0x3f
 80030a8:	409a      	lsls	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d07d      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
        }
        return;
 80030ce:	e078      	b.n	80031c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01c      	beq.n	8003118 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d108      	bne.n	80030fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d030      	beq.n	8003156 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
 80030fc:	e02b      	b.n	8003156 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d027      	beq.n	8003156 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
 800310e:	e022      	b.n	8003156 <HAL_DMA_IRQHandler+0x29e>
 8003110:	20000000 	.word	0x20000000
 8003114:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0210 	bic.w	r2, r2, #16
 8003134:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	2b00      	cmp	r3, #0
 800315c:	d032      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d022      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2205      	movs	r2, #5
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3301      	adds	r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	429a      	cmp	r2, r3
 800318c:	d307      	bcc.n	800319e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f2      	bne.n	8003182 <HAL_DMA_IRQHandler+0x2ca>
 800319c:	e000      	b.n	80031a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800319e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
 80031c0:	e000      	b.n	80031c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031c2:	bf00      	nop
    }
  }
}
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop

080031cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d108      	bne.n	800320c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800320a:	e007      	b.n	800321c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3b10      	subs	r3, #16
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <DMA_CalcBaseAndBitshift+0x64>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <DMA_CalcBaseAndBitshift+0x68>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d909      	bls.n	800326a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	1d1a      	adds	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	659a      	str	r2, [r3, #88]	; 0x58
 8003268:	e007      	b.n	800327a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	aaaaaaab 	.word	0xaaaaaaab
 8003290:	0800b8a8 	.word	0x0800b8a8

08003294 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11f      	bne.n	80032ee <DMA_CheckFifoParam+0x5a>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d856      	bhi.n	8003362 <DMA_CheckFifoParam+0xce>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <DMA_CheckFifoParam+0x28>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032df 	.word	0x080032df
 80032c4:	080032cd 	.word	0x080032cd
 80032c8:	08003363 	.word	0x08003363
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d046      	beq.n	8003366 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032dc:	e043      	b.n	8003366 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032e6:	d140      	bne.n	800336a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e03d      	b.n	800336a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f6:	d121      	bne.n	800333c <DMA_CheckFifoParam+0xa8>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d837      	bhi.n	800336e <DMA_CheckFifoParam+0xda>
 80032fe:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <DMA_CheckFifoParam+0x70>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003315 	.word	0x08003315
 8003308:	0800331b 	.word	0x0800331b
 800330c:	08003315 	.word	0x08003315
 8003310:	0800332d 	.word	0x0800332d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e030      	b.n	800337c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d025      	beq.n	8003372 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332a:	e022      	b.n	8003372 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003334:	d11f      	bne.n	8003376 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333a:	e01c      	b.n	8003376 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d903      	bls.n	800334a <DMA_CheckFifoParam+0xb6>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d003      	beq.n	8003350 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003348:	e018      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      break;
 800334e:	e015      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e00b      	b.n	800337a <DMA_CheckFifoParam+0xe6>
      break;
 8003362:	bf00      	nop
 8003364:	e00a      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e008      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e006      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;   
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
    }
  } 
  
  return status; 
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e159      	b.n	800365c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	f040 8148 	bne.w	8003656 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d005      	beq.n	80033de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d130      	bne.n	8003440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 0201 	and.w	r2, r3, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b03      	cmp	r3, #3
 800344a:	d017      	beq.n	800347c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d123      	bne.n	80034d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	08da      	lsrs	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3208      	adds	r2, #8
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a2 	beq.w	8003656 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_GPIO_Init+0x2e8>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_GPIO_Init+0x2e8>)
 800351c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003520:	6453      	str	r3, [r2, #68]	; 0x44
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <HAL_GPIO_Init+0x2e8>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352e:	4a52      	ldr	r2, [pc, #328]	; (8003678 <HAL_GPIO_Init+0x2ec>)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a49      	ldr	r2, [pc, #292]	; (800367c <HAL_GPIO_Init+0x2f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d019      	beq.n	800358e <HAL_GPIO_Init+0x202>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_GPIO_Init+0x2f4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_GPIO_Init+0x1fe>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a47      	ldr	r2, [pc, #284]	; (8003684 <HAL_GPIO_Init+0x2f8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00d      	beq.n	8003586 <HAL_GPIO_Init+0x1fa>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a46      	ldr	r2, [pc, #280]	; (8003688 <HAL_GPIO_Init+0x2fc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <HAL_GPIO_Init+0x1f6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a45      	ldr	r2, [pc, #276]	; (800368c <HAL_GPIO_Init+0x300>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d101      	bne.n	800357e <HAL_GPIO_Init+0x1f2>
 800357a:	2304      	movs	r3, #4
 800357c:	e008      	b.n	8003590 <HAL_GPIO_Init+0x204>
 800357e:	2307      	movs	r3, #7
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x204>
 8003582:	2303      	movs	r3, #3
 8003584:	e004      	b.n	8003590 <HAL_GPIO_Init+0x204>
 8003586:	2302      	movs	r3, #2
 8003588:	e002      	b.n	8003590 <HAL_GPIO_Init+0x204>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_GPIO_Init+0x204>
 800358e:	2300      	movs	r3, #0
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	f002 0203 	and.w	r2, r2, #3
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	4093      	lsls	r3, r2
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a0:	4935      	ldr	r1, [pc, #212]	; (8003678 <HAL_GPIO_Init+0x2ec>)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ae:	4b38      	ldr	r3, [pc, #224]	; (8003690 <HAL_GPIO_Init+0x304>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <HAL_GPIO_Init+0x304>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_GPIO_Init+0x304>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035fc:	4a24      	ldr	r2, [pc, #144]	; (8003690 <HAL_GPIO_Init+0x304>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003602:	4b23      	ldr	r3, [pc, #140]	; (8003690 <HAL_GPIO_Init+0x304>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003626:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_GPIO_Init+0x304>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_GPIO_Init+0x304>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_GPIO_Init+0x304>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	f67f aea2 	bls.w	80033a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40013800 	.word	0x40013800
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	40020800 	.word	0x40020800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40021000 	.word	0x40021000
 8003690:	40013c00 	.word	0x40013c00

08003694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
 80036a0:	4613      	mov	r3, r2
 80036a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a4:	787b      	ldrb	r3, [r7, #1]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b0:	e003      	b.n	80036ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	041a      	lsls	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	619a      	str	r2, [r3, #24]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e264      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d075      	beq.n	80037d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e6:	4ba3      	ldr	r3, [pc, #652]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d00c      	beq.n	800370c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4ba0      	ldr	r3, [pc, #640]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d112      	bne.n	8003724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b9d      	ldr	r3, [pc, #628]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370a:	d10b      	bne.n	8003724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	4b99      	ldr	r3, [pc, #612]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d05b      	beq.n	80037d0 <HAL_RCC_OscConfig+0x108>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d157      	bne.n	80037d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e23f      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x74>
 800372e:	4b91      	ldr	r3, [pc, #580]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a90      	ldr	r2, [pc, #576]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0xb0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x98>
 8003746:	4b8b      	ldr	r3, [pc, #556]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a8a      	ldr	r2, [pc, #552]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a87      	ldr	r2, [pc, #540]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0xb0>
 8003760:	4b84      	ldr	r3, [pc, #528]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a83      	ldr	r2, [pc, #524]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b81      	ldr	r3, [pc, #516]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a80      	ldr	r2, [pc, #512]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fd78 	bl	8002274 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fd74 	bl	8002274 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e204      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0xc0>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fd64 	bl	8002274 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fd60 	bl	8002274 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1f0      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0xe8>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d063      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037de:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ea:	4b62      	ldr	r3, [pc, #392]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d11c      	bne.n	8003830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f6:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_RCC_OscConfig+0x152>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d001      	beq.n	800381a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e1c4      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b56      	ldr	r3, [pc, #344]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4952      	ldr	r1, [pc, #328]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	e03a      	b.n	80038a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003838:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <HAL_RCC_OscConfig+0x2b0>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe fd19 	bl	8002274 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003846:	f7fe fd15 	bl	8002274 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e1a5      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003864:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4940      	ldr	r1, [pc, #256]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	e015      	b.n	80038a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387a:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_RCC_OscConfig+0x2b0>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe fcf8 	bl	8002274 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003888:	f7fe fcf4 	bl	8002274 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e184      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d030      	beq.n	8003914 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ba:	4b30      	ldr	r3, [pc, #192]	; (800397c <HAL_RCC_OscConfig+0x2b4>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fe fcd8 	bl	8002274 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c8:	f7fe fcd4 	bl	8002274 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e164      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x200>
 80038e6:	e015      	b.n	8003914 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x2b4>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ee:	f7fe fcc1 	bl	8002274 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f6:	f7fe fcbd 	bl	8002274 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e14d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a0 	beq.w	8003a62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x2b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d121      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_RCC_OscConfig+0x2b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a07      	ldr	r2, [pc, #28]	; (8003980 <HAL_RCC_OscConfig+0x2b8>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fe fc83 	bl	8002274 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	e011      	b.n	8003996 <HAL_RCC_OscConfig+0x2ce>
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	42470000 	.word	0x42470000
 800397c:	42470e80 	.word	0x42470e80
 8003980:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fe fc76 	bl	8002274 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e106      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCC_OscConfig+0x4e4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d106      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2f0>
 80039aa:	4b81      	ldr	r3, [pc, #516]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a80      	ldr	r2, [pc, #512]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70
 80039b6:	e01c      	b.n	80039f2 <HAL_RCC_OscConfig+0x32a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d10c      	bne.n	80039da <HAL_RCC_OscConfig+0x312>
 80039c0:	4b7b      	ldr	r3, [pc, #492]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a7a      	ldr	r2, [pc, #488]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039c6:	f043 0304 	orr.w	r3, r3, #4
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
 80039cc:	4b78      	ldr	r3, [pc, #480]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a77      	ldr	r2, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
 80039d8:	e00b      	b.n	80039f2 <HAL_RCC_OscConfig+0x32a>
 80039da:	4b75      	ldr	r3, [pc, #468]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a74      	ldr	r2, [pc, #464]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a71      	ldr	r2, [pc, #452]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	f023 0304 	bic.w	r3, r3, #4
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d015      	beq.n	8003a26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fe fc3b 	bl	8002274 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fe fc37 	bl	8002274 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e0c5      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	4b65      	ldr	r3, [pc, #404]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ee      	beq.n	8003a02 <HAL_RCC_OscConfig+0x33a>
 8003a24:	e014      	b.n	8003a50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fe fc25 	bl	8002274 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fe fc21 	bl	8002274 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0af      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d105      	bne.n	8003a62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a56:	4b56      	ldr	r3, [pc, #344]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a55      	ldr	r2, [pc, #340]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 809b 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a6c:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d05c      	beq.n	8003b32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d141      	bne.n	8003b04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b4c      	ldr	r3, [pc, #304]	; (8003bb4 <HAL_RCC_OscConfig+0x4ec>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fe fbf5 	bl	8002274 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fe fbf1 	bl	8002274 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e081      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa0:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	019b      	lsls	r3, r3, #6
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	4937      	ldr	r1, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad6:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <HAL_RCC_OscConfig+0x4ec>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe fbca 	bl	8002274 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fe fbc6 	bl	8002274 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e056      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x41c>
 8003b02:	e04e      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCC_OscConfig+0x4ec>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fbb3 	bl	8002274 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe fbaf 	bl	8002274 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e03f      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b24:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x44a>
 8003b30:	e037      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e032      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <HAL_RCC_OscConfig+0x4e8>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d028      	beq.n	8003b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d121      	bne.n	8003b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d11a      	bne.n	8003b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d111      	bne.n	8003b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	42470060 	.word	0x42470060

08003bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0cc      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b68      	ldr	r3, [pc, #416]	; (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d90c      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b63      	ldr	r3, [pc, #396]	; (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0b8      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c0c:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a58      	ldr	r2, [pc, #352]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a52      	ldr	r2, [pc, #328]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c30:	4b50      	ldr	r3, [pc, #320]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	494d      	ldr	r1, [pc, #308]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d044      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d119      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e07f      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e06f      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e067      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4934      	ldr	r1, [pc, #208]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca8:	f7fe fae4 	bl	8002274 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fe fae0 	bl	8002274 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e04f      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 020c 	and.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d1eb      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d20c      	bcs.n	8003d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e032      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4916      	ldr	r1, [pc, #88]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	490e      	ldr	r1, [pc, #56]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d3e:	f000 f821 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8003d42:	4602      	mov	r2, r0
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	490a      	ldr	r1, [pc, #40]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	5ccb      	ldrb	r3, [r1, r3]
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe f8ca 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023c00 	.word	0x40023c00
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800b890 	.word	0x0800b890
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	20000004 	.word	0x20000004

08003d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d9c:	4b67      	ldr	r3, [pc, #412]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d00d      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	f200 80bd 	bhi.w	8003f28 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x34>
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003db6:	e0b7      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dba:	60bb      	str	r3, [r7, #8]
       break;
 8003dbc:	e0b7      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dbe:	4b61      	ldr	r3, [pc, #388]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003dc0:	60bb      	str	r3, [r7, #8]
      break;
 8003dc2:	e0b4      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc4:	4b5d      	ldr	r3, [pc, #372]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d04d      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dda:	4b58      	ldr	r3, [pc, #352]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	461a      	mov	r2, r3
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	ea02 0800 	and.w	r8, r2, r0
 8003df2:	ea03 0901 	and.w	r9, r3, r1
 8003df6:	4640      	mov	r0, r8
 8003df8:	4649      	mov	r1, r9
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	014b      	lsls	r3, r1, #5
 8003e04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e08:	0142      	lsls	r2, r0, #5
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	ebb0 0008 	subs.w	r0, r0, r8
 8003e12:	eb61 0109 	sbc.w	r1, r1, r9
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	018b      	lsls	r3, r1, #6
 8003e20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e24:	0182      	lsls	r2, r0, #6
 8003e26:	1a12      	subs	r2, r2, r0
 8003e28:	eb63 0301 	sbc.w	r3, r3, r1
 8003e2c:	f04f 0000 	mov.w	r0, #0
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	00d9      	lsls	r1, r3, #3
 8003e36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e3a:	00d0      	lsls	r0, r2, #3
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	eb12 0208 	adds.w	r2, r2, r8
 8003e44:	eb43 0309 	adc.w	r3, r3, r9
 8003e48:	f04f 0000 	mov.w	r0, #0
 8003e4c:	f04f 0100 	mov.w	r1, #0
 8003e50:	0259      	lsls	r1, r3, #9
 8003e52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e56:	0250      	lsls	r0, r2, #9
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	f7fc fef6 	bl	8000c58 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4613      	mov	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e04a      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	ea02 0400 	and.w	r4, r2, r0
 8003e8e:	ea03 0501 	and.w	r5, r3, r1
 8003e92:	4620      	mov	r0, r4
 8003e94:	4629      	mov	r1, r5
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	014b      	lsls	r3, r1, #5
 8003ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ea4:	0142      	lsls	r2, r0, #5
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	1b00      	subs	r0, r0, r4
 8003eac:	eb61 0105 	sbc.w	r1, r1, r5
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	018b      	lsls	r3, r1, #6
 8003eba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ebe:	0182      	lsls	r2, r0, #6
 8003ec0:	1a12      	subs	r2, r2, r0
 8003ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec6:	f04f 0000 	mov.w	r0, #0
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	00d9      	lsls	r1, r3, #3
 8003ed0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ed4:	00d0      	lsls	r0, r2, #3
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	1912      	adds	r2, r2, r4
 8003edc:	eb45 0303 	adc.w	r3, r5, r3
 8003ee0:	f04f 0000 	mov.w	r0, #0
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	0299      	lsls	r1, r3, #10
 8003eea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003eee:	0290      	lsls	r0, r2, #10
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	f7fc feaa 	bl	8000c58 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4613      	mov	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	60bb      	str	r3, [r7, #8]
      break;
 8003f26:	e002      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f2a:	60bb      	str	r3, [r7, #8]
      break;
 8003f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200

08003f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f64:	f7ff fff0 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0a9b      	lsrs	r3, r3, #10
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	0800b8a0 	.word	0x0800b8a0

08003f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f8c:	f7ff ffdc 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0b5b      	lsrs	r3, r3, #13
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4903      	ldr	r1, [pc, #12]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	0800b8a0 	.word	0x0800b8a0

08003fb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0203 	and.w	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	08db      	lsrs	r3, r3, #3
 8003fea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <HAL_RCC_GetClockConfig+0x60>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0207 	and.w	r2, r3, #7
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40023c00 	.word	0x40023c00

08004014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e041      	b.n	80040aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f839 	bl	80040b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 f9ca 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d001      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e044      	b.n	800416a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <HAL_TIM_Base_Start_IT+0xb0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d018      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x6c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d013      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x6c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_TIM_Base_Start_IT+0xb4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00e      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x6c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a19      	ldr	r2, [pc, #100]	; (8004180 <HAL_TIM_Base_Start_IT+0xb8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d009      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x6c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_TIM_Base_Start_IT+0xbc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x6c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIM_Base_Start_IT+0xc0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d111      	bne.n	8004158 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b06      	cmp	r3, #6
 8004144:	d010      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	e007      	b.n	8004168 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40014000 	.word	0x40014000

0800418c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0202 	mvn.w	r2, #2
 80041b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8ee 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8e0 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8f1 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b04      	cmp	r3, #4
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0204 	mvn.w	r2, #4
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8c4 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8b6 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8c7 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0208 	mvn.w	r2, #8
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2204      	movs	r2, #4
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f89a 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f88c 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f89d 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b10      	cmp	r3, #16
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0210 	mvn.w	r2, #16
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2208      	movs	r2, #8
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f870 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f862 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f873 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0201 	mvn.w	r2, #1
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fcbe 	bl	8001c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d10e      	bne.n	800433c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d107      	bne.n	800433c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8e2 	bl	8004500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f838 	bl	80043d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b20      	cmp	r3, #32
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b20      	cmp	r3, #32
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0220 	mvn.w	r2, #32
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8ac 	bl	80044ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <TIM_Base_SetConfig+0xe4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00f      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d00b      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a31      	ldr	r2, [pc, #196]	; (80044d4 <TIM_Base_SetConfig+0xe8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a30      	ldr	r2, [pc, #192]	; (80044d8 <TIM_Base_SetConfig+0xec>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_Base_SetConfig+0x38>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <TIM_Base_SetConfig+0xf0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d108      	bne.n	8004436 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <TIM_Base_SetConfig+0xe4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01b      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d017      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <TIM_Base_SetConfig+0xe8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <TIM_Base_SetConfig+0xec>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00f      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a20      	ldr	r2, [pc, #128]	; (80044dc <TIM_Base_SetConfig+0xf0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <TIM_Base_SetConfig+0xf4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <TIM_Base_SetConfig+0xf8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <TIM_Base_SetConfig+0xfc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d108      	bne.n	8004488 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <TIM_Base_SetConfig+0xe4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	615a      	str	r2, [r3, #20]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800

080044ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e03f      	b.n	80045a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd fc2e 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fb11 	bl	8004b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d17c      	bne.n	80046c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_Transmit+0x2c>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e075      	b.n	80046ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Transmit+0x3e>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e06e      	b.n	80046ca <HAL_UART_Transmit+0x11c>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2221      	movs	r2, #33	; 0x21
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004602:	f7fd fe37 	bl	8002274 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d108      	bne.n	8004630 <HAL_UART_Transmit+0x82>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e003      	b.n	8004638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004640:	e02a      	b.n	8004698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f9a5 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e036      	b.n	80046ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3302      	adds	r3, #2
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	e007      	b.n	800468a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3301      	adds	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1cf      	bne.n	8004642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2140      	movs	r1, #64	; 0x40
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f975 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e006      	b.n	80046ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d11d      	bne.n	8004728 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_UART_Receive_DMA+0x26>
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e016      	b.n	800472a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_UART_Receive_DMA+0x38>
 8004706:	2302      	movs	r3, #2
 8004708:	e00f      	b.n	800472a <HAL_UART_Receive_DMA+0x58>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	461a      	mov	r2, r3
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f986 	bl	8004a30 <UART_Start_Receive_DMA>
 8004724:	4603      	mov	r3, r0
 8004726:	e000      	b.n	800472a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b21      	cmp	r3, #33	; 0x21
 800475e:	d116      	bne.n	800478e <HAL_UART_DMAStop+0x5c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d013      	beq.n	800478e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004774:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe fb28 	bl	8002dd8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f9b5 	bl	8004af8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b22      	cmp	r3, #34	; 0x22
 80047ae:	d116      	bne.n	80047de <HAL_UART_DMAStop+0xac>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d013      	beq.n	80047de <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fb00 	bl	8002dd8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f9a3 	bl	8004b24 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d12a      	bne.n	80048ae <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0210 	bic.w	r2, r2, #16
 80048ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d106      	bne.n	80048c4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ba:	4619      	mov	r1, r3
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff ffb1 	bl	8004824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048c2:	e002      	b.n	80048ca <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff ff8f 	bl	80047e8 <HAL_UART_RxCpltCallback>
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d108      	bne.n	80048fa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff ff96 	bl	8004824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048f8:	e002      	b.n	8004900 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff ff7e 	bl	80047fc <HAL_UART_RxHalfCpltCallback>
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b21      	cmp	r3, #33	; 0x21
 800493a:	d108      	bne.n	800494e <UART_DMAError+0x46>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2200      	movs	r2, #0
 8004946:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f000 f8d5 	bl	8004af8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b22      	cmp	r3, #34	; 0x22
 800496e:	d108      	bne.n	8004982 <UART_DMAError+0x7a>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800497c:	68b8      	ldr	r0, [r7, #8]
 800497e:	f000 f8d1 	bl	8004b24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f043 0210 	orr.w	r2, r3, #16
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800498e:	68b8      	ldr	r0, [r7, #8]
 8004990:	f7ff ff3e 	bl	8004810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ac:	e02c      	b.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b4:	d028      	beq.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0x30>
 80049bc:	f7fd fc5a 	bl	8002274 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d21d      	bcs.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e00f      	b.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d0c3      	beq.n	80049ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2222      	movs	r2, #34	; 0x22
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	4a23      	ldr	r2, [pc, #140]	; (8004aec <UART_Start_Receive_DMA+0xbc>)
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	4a22      	ldr	r2, [pc, #136]	; (8004af0 <UART_Start_Receive_DMA+0xc0>)
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	4a21      	ldr	r2, [pc, #132]	; (8004af4 <UART_Start_Receive_DMA+0xc4>)
 8004a6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	2200      	movs	r2, #0
 8004a76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a78:	f107 0308 	add.w	r3, r7, #8
 8004a7c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	f7fe f94a 	bl	8002d28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	0800483d 	.word	0x0800483d
 8004af0:	080048d3 	.word	0x080048d3
 8004af4:	08004909 	.word	0x08004909

08004af8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b0e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0210 	bic.w	r2, r2, #16
 8004b62:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	b09f      	sub	sp, #124	; 0x7c
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	68d9      	ldr	r1, [r3, #12]
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	ea40 0301 	orr.w	r3, r0, r1
 8004ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bc4:	f021 010c 	bic.w	r1, r1, #12
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bde:	6999      	ldr	r1, [r3, #24]
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	ea40 0301 	orr.w	r3, r0, r1
 8004be8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4bc5      	ldr	r3, [pc, #788]	; (8004f04 <UART_SetConfig+0x384>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d004      	beq.n	8004bfe <UART_SetConfig+0x7e>
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4bc3      	ldr	r3, [pc, #780]	; (8004f08 <UART_SetConfig+0x388>)
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d103      	bne.n	8004c06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bfe:	f7ff f9c3 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 8004c02:	6778      	str	r0, [r7, #116]	; 0x74
 8004c04:	e002      	b.n	8004c0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c06:	f7ff f9ab 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8004c0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c14:	f040 80b6 	bne.w	8004d84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c1a:	461c      	mov	r4, r3
 8004c1c:	f04f 0500 	mov.w	r5, #0
 8004c20:	4622      	mov	r2, r4
 8004c22:	462b      	mov	r3, r5
 8004c24:	1891      	adds	r1, r2, r2
 8004c26:	6439      	str	r1, [r7, #64]	; 0x40
 8004c28:	415b      	adcs	r3, r3
 8004c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c30:	1912      	adds	r2, r2, r4
 8004c32:	eb45 0303 	adc.w	r3, r5, r3
 8004c36:	f04f 0000 	mov.w	r0, #0
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	00d9      	lsls	r1, r3, #3
 8004c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c44:	00d0      	lsls	r0, r2, #3
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	1911      	adds	r1, r2, r4
 8004c4c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c4e:	416b      	adcs	r3, r5
 8004c50:	667b      	str	r3, [r7, #100]	; 0x64
 8004c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c60:	415b      	adcs	r3, r3
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c6c:	f7fb fff4 	bl	8000c58 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4ba5      	ldr	r3, [pc, #660]	; (8004f0c <UART_SetConfig+0x38c>)
 8004c76:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	011e      	lsls	r6, r3, #4
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c80:	461c      	mov	r4, r3
 8004c82:	f04f 0500 	mov.w	r5, #0
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	1891      	adds	r1, r2, r2
 8004c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c8e:	415b      	adcs	r3, r3
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
 8004c92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c96:	1912      	adds	r2, r2, r4
 8004c98:	eb45 0303 	adc.w	r3, r5, r3
 8004c9c:	f04f 0000 	mov.w	r0, #0
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	00d9      	lsls	r1, r3, #3
 8004ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004caa:	00d0      	lsls	r0, r2, #3
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	1911      	adds	r1, r2, r4
 8004cb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cb4:	416b      	adcs	r3, r5
 8004cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cd2:	f7fb ffc1 	bl	8000c58 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b8c      	ldr	r3, [pc, #560]	; (8004f0c <UART_SetConfig+0x38c>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a87      	ldr	r2, [pc, #540]	; (8004f0c <UART_SetConfig+0x38c>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cfc:	441e      	add	r6, r3
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d00:	4618      	mov	r0, r3
 8004d02:	f04f 0100 	mov.w	r1, #0
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	1894      	adds	r4, r2, r2
 8004d0c:	623c      	str	r4, [r7, #32]
 8004d0e:	415b      	adcs	r3, r3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d16:	1812      	adds	r2, r2, r0
 8004d18:	eb41 0303 	adc.w	r3, r1, r3
 8004d1c:	f04f 0400 	mov.w	r4, #0
 8004d20:	f04f 0500 	mov.w	r5, #0
 8004d24:	00dd      	lsls	r5, r3, #3
 8004d26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d2a:	00d4      	lsls	r4, r2, #3
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	462b      	mov	r3, r5
 8004d30:	1814      	adds	r4, r2, r0
 8004d32:	653c      	str	r4, [r7, #80]	; 0x50
 8004d34:	414b      	adcs	r3, r1
 8004d36:	657b      	str	r3, [r7, #84]	; 0x54
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	61b9      	str	r1, [r7, #24]
 8004d46:	415b      	adcs	r3, r3
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d52:	f7fb ff81 	bl	8000c58 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <UART_SetConfig+0x38c>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	; 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	3332      	adds	r3, #50	; 0x32
 8004d6e:	4a67      	ldr	r2, [pc, #412]	; (8004f0c <UART_SetConfig+0x38c>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 0207 	and.w	r2, r3, #7
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4432      	add	r2, r6
 8004d80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d82:	e0b9      	b.n	8004ef8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d86:	461c      	mov	r4, r3
 8004d88:	f04f 0500 	mov.w	r5, #0
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	462b      	mov	r3, r5
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	6139      	str	r1, [r7, #16]
 8004d94:	415b      	adcs	r3, r3
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d9c:	1912      	adds	r2, r2, r4
 8004d9e:	eb45 0303 	adc.w	r3, r5, r3
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	00d9      	lsls	r1, r3, #3
 8004dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db0:	00d0      	lsls	r0, r2, #3
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	eb12 0804 	adds.w	r8, r2, r4
 8004dba:	eb43 0905 	adc.w	r9, r3, r5
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f04f 0100 	mov.w	r1, #0
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	008b      	lsls	r3, r1, #2
 8004dd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dd6:	0082      	lsls	r2, r0, #2
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4649      	mov	r1, r9
 8004ddc:	f7fb ff3c 	bl	8000c58 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <UART_SetConfig+0x38c>)
 8004de6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	011e      	lsls	r6, r3, #4
 8004dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df0:	4618      	mov	r0, r3
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	1894      	adds	r4, r2, r2
 8004dfc:	60bc      	str	r4, [r7, #8]
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e06:	1812      	adds	r2, r2, r0
 8004e08:	eb41 0303 	adc.w	r3, r1, r3
 8004e0c:	f04f 0400 	mov.w	r4, #0
 8004e10:	f04f 0500 	mov.w	r5, #0
 8004e14:	00dd      	lsls	r5, r3, #3
 8004e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e1a:	00d4      	lsls	r4, r2, #3
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	462b      	mov	r3, r5
 8004e20:	1814      	adds	r4, r2, r0
 8004e22:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e24:	414b      	adcs	r3, r1
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	008b      	lsls	r3, r1, #2
 8004e3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e40:	0082      	lsls	r2, r0, #2
 8004e42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e46:	f7fb ff07 	bl	8000c58 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4b2f      	ldr	r3, [pc, #188]	; (8004f0c <UART_SetConfig+0x38c>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2164      	movs	r1, #100	; 0x64
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	3332      	adds	r3, #50	; 0x32
 8004e62:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <UART_SetConfig+0x38c>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6e:	441e      	add	r6, r3
 8004e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e72:	4618      	mov	r0, r3
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	1894      	adds	r4, r2, r2
 8004e7e:	603c      	str	r4, [r7, #0]
 8004e80:	415b      	adcs	r3, r3
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e88:	1812      	adds	r2, r2, r0
 8004e8a:	eb41 0303 	adc.w	r3, r1, r3
 8004e8e:	f04f 0400 	mov.w	r4, #0
 8004e92:	f04f 0500 	mov.w	r5, #0
 8004e96:	00dd      	lsls	r5, r3, #3
 8004e98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e9c:	00d4      	lsls	r4, r2, #3
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	eb12 0a00 	adds.w	sl, r2, r0
 8004ea6:	eb43 0b01 	adc.w	fp, r3, r1
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	008b      	lsls	r3, r1, #2
 8004ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ec2:	0082      	lsls	r2, r0, #2
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	4659      	mov	r1, fp
 8004ec8:	f7fb fec6 	bl	8000c58 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <UART_SetConfig+0x38c>)
 8004ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2164      	movs	r1, #100	; 0x64
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	3332      	adds	r3, #50	; 0x32
 8004ee4:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <UART_SetConfig+0x38c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4432      	add	r2, r6
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	377c      	adds	r7, #124	; 0x7c
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	bf00      	nop
 8004f04:	40011000 	.word	0x40011000
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	51eb851f 	.word	0x51eb851f

08004f10 <__NVIC_SetPriority>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db0a      	blt.n	8004f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	490c      	ldr	r1, [pc, #48]	; (8004f5c <__NVIC_SetPriority+0x4c>)
 8004f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2e:	0112      	lsls	r2, r2, #4
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	440b      	add	r3, r1
 8004f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f38:	e00a      	b.n	8004f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4908      	ldr	r1, [pc, #32]	; (8004f60 <__NVIC_SetPriority+0x50>)
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	3b04      	subs	r3, #4
 8004f48:	0112      	lsls	r2, r2, #4
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	761a      	strb	r2, [r3, #24]
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000e100 	.word	0xe000e100
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <SysTick_Handler+0x1c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f6c:	f002 fc6a 	bl	8007844 <xTaskGetSchedulerState>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f76:	f000 fea7 	bl	8005cc8 <xPortSysTickHandler>
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	e000e010 	.word	0xe000e010

08004f84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f88:	2100      	movs	r1, #0
 8004f8a:	f06f 0004 	mvn.w	r0, #4
 8004f8e:	f7ff ffbf 	bl	8004f10 <__NVIC_SetPriority>
#endif
}
 8004f92:	bf00      	nop
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f9e:	f3ef 8305 	mrs	r3, IPSR
 8004fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004faa:	f06f 0305 	mvn.w	r3, #5
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	e00c      	b.n	8004fcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <osKernelInitialize+0x44>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <osKernelInitialize+0x44>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e002      	b.n	8004fcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fcc:	687b      	ldr	r3, [r7, #4]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000218 	.word	0x20000218

08004fe0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fe6:	f3ef 8305 	mrs	r3, IPSR
 8004fea:	603b      	str	r3, [r7, #0]
  return(result);
 8004fec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ff2:	f06f 0305 	mvn.w	r3, #5
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	e010      	b.n	800501c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <osKernelStart+0x48>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d109      	bne.n	8005016 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005002:	f7ff ffbf 	bl	8004f84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <osKernelStart+0x48>)
 8005008:	2202      	movs	r2, #2
 800500a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800500c:	f001 ffc2 	bl	8006f94 <vTaskStartScheduler>
      stat = osOK;
 8005010:	2300      	movs	r3, #0
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	e002      	b.n	800501c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800501a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800501c:	687b      	ldr	r3, [r7, #4]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000218 	.word	0x20000218

0800502c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b08e      	sub	sp, #56	; 0x38
 8005030:	af04      	add	r7, sp, #16
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800503c:	f3ef 8305 	mrs	r3, IPSR
 8005040:	617b      	str	r3, [r7, #20]
  return(result);
 8005042:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005044:	2b00      	cmp	r3, #0
 8005046:	d17e      	bne.n	8005146 <osThreadNew+0x11a>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d07b      	beq.n	8005146 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005052:	2318      	movs	r3, #24
 8005054:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800505a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800505e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d045      	beq.n	80050f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <osThreadNew+0x48>
        name = attr->name;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <osThreadNew+0x6e>
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b38      	cmp	r3, #56	; 0x38
 800508c:	d805      	bhi.n	800509a <osThreadNew+0x6e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <osThreadNew+0x72>
        return (NULL);
 800509a:	2300      	movs	r3, #0
 800509c:	e054      	b.n	8005148 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	089b      	lsrs	r3, r3, #2
 80050ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <osThreadNew+0xa8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b5b      	cmp	r3, #91	; 0x5b
 80050bc:	d90a      	bls.n	80050d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <osThreadNew+0xa8>
        mem = 1;
 80050ce:	2301      	movs	r3, #1
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e010      	b.n	80050f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10c      	bne.n	80050f6 <osThreadNew+0xca>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <osThreadNew+0xca>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <osThreadNew+0xca>
          mem = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e001      	b.n	80050f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d110      	bne.n	800511e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005104:	9202      	str	r2, [sp, #8]
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f001 fd68 	bl	8006be8 <xTaskCreateStatic>
 8005118:	4603      	mov	r3, r0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	e013      	b.n	8005146 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d110      	bne.n	8005146 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	b29a      	uxth	r2, r3
 8005128:	f107 0310 	add.w	r3, r7, #16
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f001 fdb3 	bl	8006ca2 <xTaskCreate>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <osThreadNew+0x11a>
            hTask = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005146:	693b      	ldr	r3, [r7, #16]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005158:	f3ef 8305 	mrs	r3, IPSR
 800515c:	60bb      	str	r3, [r7, #8]
  return(result);
 800515e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <osDelay+0x1c>
    stat = osErrorISR;
 8005164:	f06f 0305 	mvn.w	r3, #5
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e007      	b.n	800517c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 fed8 	bl	8006f2c <vTaskDelay>
    }
  }

  return (stat);
 800517c:	68fb      	ldr	r3, [r7, #12]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005186:	b580      	push	{r7, lr}
 8005188:	b088      	sub	sp, #32
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005192:	f3ef 8305 	mrs	r3, IPSR
 8005196:	60bb      	str	r3, [r7, #8]
  return(result);
 8005198:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800519a:	2b00      	cmp	r3, #0
 800519c:	d174      	bne.n	8005288 <osMutexNew+0x102>
    if (attr != NULL) {
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <osMutexNew+0x26>
      type = attr->attr_bits;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e001      	b.n	80051b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <osMutexNew+0x3a>
      rmtx = 1U;
 80051ba:	2301      	movs	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e001      	b.n	80051c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d15c      	bne.n	8005288 <osMutexNew+0x102>
      mem = -1;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <osMutexNew+0x6a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b4f      	cmp	r3, #79	; 0x4f
 80051e8:	d902      	bls.n	80051f0 <osMutexNew+0x6a>
          mem = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	e00c      	b.n	800520a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <osMutexNew+0x84>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <osMutexNew+0x84>
            mem = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	e001      	b.n	800520a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d112      	bne.n	8005236 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	4619      	mov	r1, r3
 800521c:	2004      	movs	r0, #4
 800521e:	f000 ff52 	bl	80060c6 <xQueueCreateMutexStatic>
 8005222:	61f8      	str	r0, [r7, #28]
 8005224:	e016      	b.n	8005254 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	4619      	mov	r1, r3
 800522c:	2001      	movs	r0, #1
 800522e:	f000 ff4a 	bl	80060c6 <xQueueCreateMutexStatic>
 8005232:	61f8      	str	r0, [r7, #28]
 8005234:	e00e      	b.n	8005254 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005242:	2004      	movs	r0, #4
 8005244:	f000 ff27 	bl	8006096 <xQueueCreateMutex>
 8005248:	61f8      	str	r0, [r7, #28]
 800524a:	e003      	b.n	8005254 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800524c:	2001      	movs	r0, #1
 800524e:	f000 ff22 	bl	8006096 <xQueueCreateMutex>
 8005252:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <osMutexNew+0xee>
        if (attr != NULL) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <osMutexNew+0xe2>
          name = attr->name;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e001      	b.n	800526c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	69f8      	ldr	r0, [r7, #28]
 8005270:	f001 fc5c 	bl	8006b2c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <osMutexNew+0x102>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005288:	69fb      	ldr	r3, [r7, #28]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052b0:	f3ef 8305 	mrs	r3, IPSR
 80052b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80052bc:	f06f 0305 	mvn.w	r3, #5
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e02c      	b.n	800531e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80052ca:	f06f 0303 	mvn.w	r3, #3
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e025      	b.n	800531e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d011      	beq.n	80052fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6938      	ldr	r0, [r7, #16]
 80052dc:	f000 ff42 	bl	8006164 <xQueueTakeMutexRecursive>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d01b      	beq.n	800531e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80052ec:	f06f 0301 	mvn.w	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e014      	b.n	800531e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80052f4:	f06f 0302 	mvn.w	r3, #2
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e010      	b.n	800531e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f001 f9e0 	bl	80066c4 <xQueueSemaphoreTake>
 8005304:	4603      	mov	r3, r0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d009      	beq.n	800531e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005310:	f06f 0301 	mvn.w	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e002      	b.n	800531e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005318:	f06f 0302 	mvn.w	r3, #2
 800531c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800531e:	697b      	ldr	r3, [r7, #20]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005344:	f3ef 8305 	mrs	r3, IPSR
 8005348:	60bb      	str	r3, [r7, #8]
  return(result);
 800534a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005350:	f06f 0305 	mvn.w	r3, #5
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e01f      	b.n	8005398 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800535e:	f06f 0303 	mvn.w	r3, #3
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e018      	b.n	8005398 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800536c:	6938      	ldr	r0, [r7, #16]
 800536e:	f000 fec5 	bl	80060fc <xQueueGiveMutexRecursive>
 8005372:	4603      	mov	r3, r0
 8005374:	2b01      	cmp	r3, #1
 8005376:	d00f      	beq.n	8005398 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005378:	f06f 0302 	mvn.w	r3, #2
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e00b      	b.n	8005398 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005380:	2300      	movs	r3, #0
 8005382:	2200      	movs	r2, #0
 8005384:	2100      	movs	r1, #0
 8005386:	6938      	ldr	r0, [r7, #16]
 8005388:	f000 ff22 	bl	80061d0 <xQueueGenericSend>
 800538c:	4603      	mov	r3, r0
 800538e:	2b01      	cmp	r3, #1
 8005390:	d002      	beq.n	8005398 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005392:	f06f 0302 	mvn.w	r3, #2
 8005396:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005398:	697b      	ldr	r3, [r7, #20]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80053b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a06      	ldr	r2, [pc, #24]	; (80053d4 <vApplicationGetIdleTaskMemory+0x30>)
 80053ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	601a      	str	r2, [r3, #0]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000021c 	.word	0x2000021c
 80053d4:	20000278 	.word	0x20000278

080053d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a07      	ldr	r2, [pc, #28]	; (8005404 <vApplicationGetTimerTaskMemory+0x2c>)
 80053e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4a06      	ldr	r2, [pc, #24]	; (8005408 <vApplicationGetTimerTaskMemory+0x30>)
 80053ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f6:	601a      	str	r2, [r3, #0]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	20000478 	.word	0x20000478
 8005408:	200004d4 	.word	0x200004d4

0800540c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005418:	f001 fe22 	bl	8007060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800541c:	4b5b      	ldr	r3, [pc, #364]	; (800558c <pvPortMalloc+0x180>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005424:	f000 f920 	bl	8005668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005428:	4b59      	ldr	r3, [pc, #356]	; (8005590 <pvPortMalloc+0x184>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 8093 	bne.w	800555c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01d      	beq.n	8005478 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800543c:	2208      	movs	r2, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d014      	beq.n	8005478 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	3308      	adds	r3, #8
 8005456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d06e      	beq.n	800555c <pvPortMalloc+0x150>
 800547e:	4b45      	ldr	r3, [pc, #276]	; (8005594 <pvPortMalloc+0x188>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d869      	bhi.n	800555c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005488:	4b43      	ldr	r3, [pc, #268]	; (8005598 <pvPortMalloc+0x18c>)
 800548a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800548c:	4b42      	ldr	r3, [pc, #264]	; (8005598 <pvPortMalloc+0x18c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005492:	e004      	b.n	800549e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d903      	bls.n	80054b0 <pvPortMalloc+0xa4>
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f1      	bne.n	8005494 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054b0:	4b36      	ldr	r3, [pc, #216]	; (800558c <pvPortMalloc+0x180>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d050      	beq.n	800555c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2208      	movs	r2, #8
 80054c0:	4413      	add	r3, r2
 80054c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	2308      	movs	r3, #8
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	429a      	cmp	r2, r3
 80054da:	d91f      	bls.n	800551c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <pvPortMalloc+0xf8>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	613b      	str	r3, [r7, #16]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005516:	69b8      	ldr	r0, [r7, #24]
 8005518:	f000 f908 	bl	800572c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <pvPortMalloc+0x188>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <pvPortMalloc+0x188>)
 8005528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <pvPortMalloc+0x188>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b1b      	ldr	r3, [pc, #108]	; (800559c <pvPortMalloc+0x190>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d203      	bcs.n	800553e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005536:	4b17      	ldr	r3, [pc, #92]	; (8005594 <pvPortMalloc+0x188>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a18      	ldr	r2, [pc, #96]	; (800559c <pvPortMalloc+0x190>)
 800553c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <pvPortMalloc+0x184>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	431a      	orrs	r2, r3
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005552:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <pvPortMalloc+0x194>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <pvPortMalloc+0x194>)
 800555a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800555c:	f001 fd8e 	bl	800707c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <pvPortMalloc+0x174>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60fb      	str	r3, [r7, #12]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <pvPortMalloc+0x172>
	return pvReturn;
 8005580:	69fb      	ldr	r3, [r7, #28]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3728      	adds	r7, #40	; 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2000a51c 	.word	0x2000a51c
 8005590:	2000a530 	.word	0x2000a530
 8005594:	2000a520 	.word	0x2000a520
 8005598:	2000a514 	.word	0x2000a514
 800559c:	2000a524 	.word	0x2000a524
 80055a0:	2000a528 	.word	0x2000a528

080055a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04d      	beq.n	8005652 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055b6:	2308      	movs	r3, #8
 80055b8:	425b      	negs	r3, r3
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	4b24      	ldr	r3, [pc, #144]	; (800565c <vPortFree+0xb8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <vPortFree+0x44>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	60fb      	str	r3, [r7, #12]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <vPortFree+0x62>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60bb      	str	r3, [r7, #8]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <vPortFree+0xb8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01e      	beq.n	8005652 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11a      	bne.n	8005652 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <vPortFree+0xb8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	43db      	mvns	r3, r3
 8005626:	401a      	ands	r2, r3
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800562c:	f001 fd18 	bl	8007060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <vPortFree+0xbc>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4413      	add	r3, r2
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <vPortFree+0xbc>)
 800563c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800563e:	6938      	ldr	r0, [r7, #16]
 8005640:	f000 f874 	bl	800572c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <vPortFree+0xc0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3301      	adds	r3, #1
 800564a:	4a06      	ldr	r2, [pc, #24]	; (8005664 <vPortFree+0xc0>)
 800564c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800564e:	f001 fd15 	bl	800707c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005652:	bf00      	nop
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	2000a530 	.word	0x2000a530
 8005660:	2000a520 	.word	0x2000a520
 8005664:	2000a52c 	.word	0x2000a52c

08005668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800566e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <prvHeapInit+0xac>)
 8005676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3307      	adds	r3, #7
 8005686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <prvHeapInit+0xac>)
 8005698:	4413      	add	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <prvHeapInit+0xb0>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <prvHeapInit+0xb0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056b4:	2208      	movs	r2, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <prvHeapInit+0xb4>)
 80056c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <prvHeapInit+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <prvHeapInit+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <prvHeapInit+0xb4>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <prvHeapInit+0xb8>)
 80056f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <prvHeapInit+0xbc>)
 80056fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <prvHeapInit+0xc0>)
 8005702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005706:	601a      	str	r2, [r3, #0]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	200008d4 	.word	0x200008d4
 8005718:	2000a514 	.word	0x2000a514
 800571c:	2000a51c 	.word	0x2000a51c
 8005720:	2000a524 	.word	0x2000a524
 8005724:	2000a520 	.word	0x2000a520
 8005728:	2000a530 	.word	0x2000a530

0800572c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005734:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <prvInsertBlockIntoFreeList+0xac>)
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e002      	b.n	8005740 <prvInsertBlockIntoFreeList+0x14>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d8f7      	bhi.n	800573a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4413      	add	r3, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d108      	bne.n	800576e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	441a      	add	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d118      	bne.n	80057b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <prvInsertBlockIntoFreeList+0xb0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d00d      	beq.n	80057aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e008      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <prvInsertBlockIntoFreeList+0xb0>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e003      	b.n	80057bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d002      	beq.n	80057ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	2000a514 	.word	0x2000a514
 80057dc:	2000a51c 	.word	0x2000a51c

080057e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f103 0208 	add.w	r2, r3, #8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f103 0208 	add.w	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f103 0208 	add.w	r2, r3, #8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005898:	d103      	bne.n	80058a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e00c      	b.n	80058bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3308      	adds	r3, #8
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e002      	b.n	80058b0 <vListInsert+0x2e>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d2f6      	bcs.n	80058aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6892      	ldr	r2, [r2, #8]
 800590a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6852      	ldr	r2, [r2, #4]
 8005914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d103      	bne.n	8005928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3b04      	subs	r3, #4
 8005958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3b04      	subs	r3, #4
 8005966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3b04      	subs	r3, #4
 8005976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005978:	4a0c      	ldr	r2, [pc, #48]	; (80059ac <pxPortInitialiseStack+0x64>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3b14      	subs	r3, #20
 8005982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3b04      	subs	r3, #4
 800598e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f06f 0202 	mvn.w	r2, #2
 8005996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3b20      	subs	r3, #32
 800599c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	080059b1 	.word	0x080059b1

080059b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <prvTaskExitError+0x54>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c2:	d00a      	beq.n	80059da <prvTaskExitError+0x2a>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60fb      	str	r3, [r7, #12]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <prvTaskExitError+0x28>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60bb      	str	r3, [r7, #8]
}
 80059ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ee:	bf00      	nop
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0fc      	beq.n	80059f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	2000000c 	.word	0x2000000c
	...

08005a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <pxCurrentTCBConst2>)
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	6808      	ldr	r0, [r1, #0]
 8005a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	f380 8809 	msr	PSP, r0
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8811 	msr	BASEPRI, r0
 8005a2a:	4770      	bx	lr
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst2>:
 8005a30:	2000a53c 	.word	0x2000a53c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a38:	4808      	ldr	r0, [pc, #32]	; (8005a5c <prvPortStartFirstTask+0x24>)
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	6800      	ldr	r0, [r0, #0]
 8005a3e:	f380 8808 	msr	MSP, r0
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8814 	msr	CONTROL, r0
 8005a4a:	b662      	cpsie	i
 8005a4c:	b661      	cpsie	f
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	df00      	svc	0
 8005a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a5a:	bf00      	nop
 8005a5c:	e000ed08 	.word	0xe000ed08

08005a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a66:	4b46      	ldr	r3, [pc, #280]	; (8005b80 <xPortStartScheduler+0x120>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a46      	ldr	r2, [pc, #280]	; (8005b84 <xPortStartScheduler+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10a      	bne.n	8005a86 <xPortStartScheduler+0x26>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a86:	4b3e      	ldr	r3, [pc, #248]	; (8005b80 <xPortStartScheduler+0x120>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3f      	ldr	r2, [pc, #252]	; (8005b88 <xPortStartScheduler+0x128>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10a      	bne.n	8005aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aa6:	4b39      	ldr	r3, [pc, #228]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <xPortStartScheduler+0x130>)
 8005acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ace:	4b31      	ldr	r3, [pc, #196]	; (8005b94 <xPortStartScheduler+0x134>)
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ad4:	e009      	b.n	8005aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ad6:	4b2f      	ldr	r3, [pc, #188]	; (8005b94 <xPortStartScheduler+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <xPortStartScheduler+0x134>)
 8005ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d0ef      	beq.n	8005ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <xPortStartScheduler+0x134>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f1c3 0307 	rsb	r3, r3, #7
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d00a      	beq.n	8005b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	60bb      	str	r3, [r7, #8]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b18:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b36:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b4e:	f000 f8dd 	bl	8005d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <xPortStartScheduler+0x13c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b58:	f000 f8fc 	bl	8005d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <xPortStartScheduler+0x140>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <xPortStartScheduler+0x140>)
 8005b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b68:	f7ff ff66 	bl	8005a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b6c:	f001 fbee 	bl	800734c <vTaskSwitchContext>
	prvTaskExitError();
 8005b70:	f7ff ff1e 	bl	80059b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	e000ed00 	.word	0xe000ed00
 8005b84:	410fc271 	.word	0x410fc271
 8005b88:	410fc270 	.word	0x410fc270
 8005b8c:	e000e400 	.word	0xe000e400
 8005b90:	2000a534 	.word	0x2000a534
 8005b94:	2000a538 	.word	0x2000a538
 8005b98:	e000ed20 	.word	0xe000ed20
 8005b9c:	2000000c 	.word	0x2000000c
 8005ba0:	e000ef34 	.word	0xe000ef34

08005ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	607b      	str	r3, [r7, #4]
}
 8005bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <vPortEnterCritical+0x58>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a0d      	ldr	r2, [pc, #52]	; (8005bfc <vPortEnterCritical+0x58>)
 8005bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <vPortEnterCritical+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d10f      	bne.n	8005bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <vPortEnterCritical+0x5c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	603b      	str	r3, [r7, #0]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <vPortEnterCritical+0x4a>
	}
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <vPortExitCritical+0x50>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <vPortExitCritical+0x24>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	607b      	str	r3, [r7, #4]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <vPortExitCritical+0x50>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <vPortExitCritical+0x50>)
 8005c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <vPortExitCritical+0x50>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <vPortExitCritical+0x42>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	2000000c 	.word	0x2000000c
	...

08005c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c60:	f3ef 8009 	mrs	r0, PSP
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <pxCurrentTCBConst>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f01e 0f10 	tst.w	lr, #16
 8005c70:	bf08      	it	eq
 8005c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	6010      	str	r0, [r2, #0]
 8005c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c84:	f380 8811 	msr	BASEPRI, r0
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f001 fb5c 	bl	800734c <vTaskSwitchContext>
 8005c94:	f04f 0000 	mov.w	r0, #0
 8005c98:	f380 8811 	msr	BASEPRI, r0
 8005c9c:	bc09      	pop	{r0, r3}
 8005c9e:	6819      	ldr	r1, [r3, #0]
 8005ca0:	6808      	ldr	r0, [r1, #0]
 8005ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca6:	f01e 0f10 	tst.w	lr, #16
 8005caa:	bf08      	it	eq
 8005cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cb0:	f380 8809 	msr	PSP, r0
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst>:
 8005cc0:	2000a53c 	.word	0x2000a53c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
}
 8005ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ce2:	f001 fa79 	bl	80071d8 <xTaskIncrementTick>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <xPortSysTickHandler+0x40>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f383 8811 	msr	BASEPRI, r3
}
 8005cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <vPortSetupTimerInterrupt+0x34>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <vPortSetupTimerInterrupt+0x38>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <vPortSetupTimerInterrupt+0x3c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <vPortSetupTimerInterrupt+0x40>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <vPortSetupTimerInterrupt+0x44>)
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <vPortSetupTimerInterrupt+0x34>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010
 8005d44:	e000e018 	.word	0xe000e018
 8005d48:	20000000 	.word	0x20000000
 8005d4c:	10624dd3 	.word	0x10624dd3
 8005d50:	e000e014 	.word	0xe000e014

08005d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d64 <vPortEnableVFP+0x10>
 8005d58:	6801      	ldr	r1, [r0, #0]
 8005d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d5e:	6001      	str	r1, [r0, #0]
 8005d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d62:	bf00      	nop
 8005d64:	e000ed88 	.word	0xe000ed88

08005d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d6e:	f3ef 8305 	mrs	r3, IPSR
 8005d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d914      	bls.n	8005da4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <vPortValidateInterruptPriority+0x70>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d84:	4b15      	ldr	r3, [pc, #84]	; (8005ddc <vPortValidateInterruptPriority+0x74>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	7afa      	ldrb	r2, [r7, #11]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d20a      	bcs.n	8005da4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005da4:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <vPortValidateInterruptPriority+0x78>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <vPortValidateInterruptPriority+0x7c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d90a      	bls.n	8005dca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	603b      	str	r3, [r7, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <vPortValidateInterruptPriority+0x60>
	}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	e000e3f0 	.word	0xe000e3f0
 8005ddc:	2000a534 	.word	0x2000a534
 8005de0:	e000ed0c 	.word	0xe000ed0c
 8005de4:	2000a538 	.word	0x2000a538

08005de8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <xQueueGenericReset+0x2a>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	60bb      	str	r3, [r7, #8]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e12:	f7ff fec7 	bl	8005ba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	441a      	add	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	3b01      	subs	r3, #1
 8005e44:	68f9      	ldr	r1, [r7, #12]
 8005e46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22ff      	movs	r2, #255	; 0xff
 8005e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d114      	bne.n	8005e92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01a      	beq.n	8005ea6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3310      	adds	r3, #16
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 fb17 	bl	80074a8 <xTaskRemoveFromEventList>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d012      	beq.n	8005ea6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e80:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <xQueueGenericReset+0xcc>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	e009      	b.n	8005ea6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3310      	adds	r3, #16
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fca2 	bl	80057e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fc9d 	bl	80057e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ea6:	f7ff fead 	bl	8005c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005eaa:	2301      	movs	r3, #1
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08e      	sub	sp, #56	; 0x38
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <xQueueGenericCreateStatic+0x52>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <xQueueGenericCreateStatic+0x56>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericCreateStatic+0x58>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <xQueueGenericCreateStatic+0x7e>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <xQueueGenericCreateStatic+0x82>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueGenericCreateStatic+0x84>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61fb      	str	r3, [r7, #28]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f56:	2350      	movs	r3, #80	; 0x50
 8005f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b50      	cmp	r3, #80	; 0x50
 8005f5e:	d00a      	beq.n	8005f76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	61bb      	str	r3, [r7, #24]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f83f 	bl	800601c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3730      	adds	r7, #48	; 0x30
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	613b      	str	r3, [r7, #16]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3350      	adds	r3, #80	; 0x50
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fa13 	bl	800540c <pvPortMalloc>
 8005fe6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3350      	adds	r3, #80	; 0x50
 8005ff6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006000:	79fa      	ldrb	r2, [r7, #7]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f805 	bl	800601c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006012:	69bb      	ldr	r3, [r7, #24]
	}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d103      	bne.n	8006038 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e002      	b.n	800603e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800604a:	2101      	movs	r1, #1
 800604c:	69b8      	ldr	r0, [r7, #24]
 800604e:	f7ff fecb 	bl	8005de8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	78fa      	ldrb	r2, [r7, #3]
 8006056:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006082:	2300      	movs	r3, #0
 8006084:	2200      	movs	r2, #0
 8006086:	2100      	movs	r1, #0
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f8a1 	bl	80061d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	4603      	mov	r3, r0
 800609e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	461a      	mov	r2, r3
 80060ac:	6939      	ldr	r1, [r7, #16]
 80060ae:	6978      	ldr	r0, [r7, #20]
 80060b0:	f7ff ff7a 	bl	8005fa8 <xQueueGenericCreate>
 80060b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ffd3 	bl	8006062 <prvInitialiseMutex>

		return xNewQueue;
 80060bc:	68fb      	ldr	r3, [r7, #12]
	}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b088      	sub	sp, #32
 80060ca:	af02      	add	r7, sp, #8
 80060cc:	4603      	mov	r3, r0
 80060ce:	6039      	str	r1, [r7, #0]
 80060d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060d2:	2301      	movs	r3, #1
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	6939      	ldr	r1, [r7, #16]
 80060e4:	6978      	ldr	r0, [r7, #20]
 80060e6:	f7ff fee7 	bl	8005eb8 <xQueueGenericCreateStatic>
 80060ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff ffb8 	bl	8006062 <prvInitialiseMutex>

		return xNewQueue;
 80060f2:	68fb      	ldr	r3, [r7, #12]
	}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60fb      	str	r3, [r7, #12]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	689c      	ldr	r4, [r3, #8]
 8006128:	f001 fb7c 	bl	8007824 <xTaskGetCurrentTaskHandle>
 800612c:	4603      	mov	r3, r0
 800612e:	429c      	cmp	r4, r3
 8006130:	d111      	bne.n	8006156 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	6938      	ldr	r0, [r7, #16]
 800614c:	f000 f840 	bl	80061d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e001      	b.n	800615a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800615a:	697b      	ldr	r3, [r7, #20]
	}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	60fb      	str	r3, [r7, #12]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	689c      	ldr	r4, [r3, #8]
 8006192:	f001 fb47 	bl	8007824 <xTaskGetCurrentTaskHandle>
 8006196:	4603      	mov	r3, r0
 8006198:	429c      	cmp	r4, r3
 800619a:	d107      	bne.n	80061ac <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80061a6:	2301      	movs	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e00c      	b.n	80061c6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6938      	ldr	r0, [r7, #16]
 80061b0:	f000 fa88 	bl	80066c4 <xQueueSemaphoreTake>
 80061b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80061c6:	697b      	ldr	r3, [r7, #20]
	}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd90      	pop	{r4, r7, pc}

080061d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08e      	sub	sp, #56	; 0x38
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061de:	2300      	movs	r3, #0
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xQueueGenericSend+0x32>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <xQueueGenericSend+0x40>
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <xQueueGenericSend+0x44>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <xQueueGenericSend+0x46>
 8006214:	2300      	movs	r3, #0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <xQueueGenericSend+0x60>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d103      	bne.n	800623e <xQueueGenericSend+0x6e>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <xQueueGenericSend+0x72>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueGenericSend+0x74>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xQueueGenericSend+0x8e>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	623b      	str	r3, [r7, #32]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625e:	f001 faf1 	bl	8007844 <xTaskGetSchedulerState>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xQueueGenericSend+0x9e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueGenericSend+0xa2>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueGenericSend+0xa4>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueGenericSend+0xbe>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800628e:	f7ff fc89 	bl	8005ba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <xQueueGenericSend+0xd4>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d129      	bne.n	80062f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062aa:	f000 fb2f 	bl	800690c <prvCopyDataToQueue>
 80062ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d010      	beq.n	80062da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	3324      	adds	r3, #36	; 0x24
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 f8f3 	bl	80074a8 <xTaskRemoveFromEventList>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d013      	beq.n	80062f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062c8:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <xQueueGenericSend+0x1f8>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	e00a      	b.n	80062f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062e0:	4b39      	ldr	r3, [pc, #228]	; (80063c8 <xQueueGenericSend+0x1f8>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062f0:	f7ff fc88 	bl	8005c04 <vPortExitCritical>
				return pdPASS;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e063      	b.n	80063c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062fe:	f7ff fc81 	bl	8005c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006302:	2300      	movs	r3, #0
 8006304:	e05c      	b.n	80063c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f92d 	bl	8007570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800631a:	f7ff fc73 	bl	8005c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800631e:	f000 fe9f 	bl	8007060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006322:	f7ff fc3f 	bl	8005ba4 <vPortEnterCritical>
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800632c:	b25b      	sxtb	r3, r3
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006332:	d103      	bne.n	800633c <xQueueGenericSend+0x16c>
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006342:	b25b      	sxtb	r3, r3
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006348:	d103      	bne.n	8006352 <xQueueGenericSend+0x182>
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006352:	f7ff fc57 	bl	8005c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006356:	1d3a      	adds	r2, r7, #4
 8006358:	f107 0314 	add.w	r3, r7, #20
 800635c:	4611      	mov	r1, r2
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f91c 	bl	800759c <xTaskCheckForTimeOut>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d124      	bne.n	80063b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800636a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800636c:	f000 fbc6 	bl	8006afc <prvIsQueueFull>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d018      	beq.n	80063a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	3310      	adds	r3, #16
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f001 f842 	bl	8007408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006386:	f000 fb51 	bl	8006a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800638a:	f000 fe77 	bl	800707c <xTaskResumeAll>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f af7c 	bne.w	800628e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <xQueueGenericSend+0x1f8>)
 8006398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	e772      	b.n	800628e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063aa:	f000 fb3f 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ae:	f000 fe65 	bl	800707c <xTaskResumeAll>
 80063b2:	e76c      	b.n	800628e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b6:	f000 fb39 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ba:	f000 fe5f 	bl	800707c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3738      	adds	r7, #56	; 0x38
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b090      	sub	sp, #64	; 0x40
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <xQueueGenericSendFromISR+0x3c>
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <xQueueGenericSendFromISR+0x40>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <xQueueGenericSendFromISR+0x42>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d103      	bne.n	8006436 <xQueueGenericSendFromISR+0x6a>
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <xQueueGenericSendFromISR+0x6e>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <xQueueGenericSendFromISR+0x70>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	623b      	str	r3, [r7, #32]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006456:	f7ff fc87 	bl	8005d68 <vPortValidateInterruptPriority>
	__asm volatile
 800645a:	f3ef 8211 	mrs	r2, BASEPRI
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	61fa      	str	r2, [r7, #28]
 8006470:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006472:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <xQueueGenericSendFromISR+0xbc>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d12f      	bne.n	80064e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800649e:	f000 fa35 	bl	800690c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064aa:	d112      	bne.n	80064d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d016      	beq.n	80064e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	3324      	adds	r3, #36	; 0x24
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fff5 	bl	80074a8 <xTaskRemoveFromEventList>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e007      	b.n	80064e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064d6:	3301      	adds	r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	b25a      	sxtb	r2, r3
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064e2:	2301      	movs	r3, #1
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064e6:	e001      	b.n	80064ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ee:	617b      	str	r3, [r7, #20]
	__asm volatile
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f383 8811 	msr	BASEPRI, r3
}
 80064f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3740      	adds	r7, #64	; 0x40
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08c      	sub	sp, #48	; 0x30
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006510:	2300      	movs	r3, #0
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <xQueueReceive+0x30>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	623b      	str	r3, [r7, #32]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <xQueueReceive+0x3e>
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <xQueueReceive+0x42>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <xQueueReceive+0x44>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueReceive+0x5e>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	61fb      	str	r3, [r7, #28]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006562:	f001 f96f 	bl	8007844 <xTaskGetSchedulerState>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <xQueueReceive+0x6e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <xQueueReceive+0x72>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <xQueueReceive+0x74>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <xQueueReceive+0x8e>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	61bb      	str	r3, [r7, #24]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006592:	f7ff fb07 	bl	8005ba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01f      	beq.n	80065e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a6:	f000 fa1b 	bl	80069e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1e5a      	subs	r2, r3, #1
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00f      	beq.n	80065da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	3310      	adds	r3, #16
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 ff72 	bl	80074a8 <xTaskRemoveFromEventList>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065ca:	4b3d      	ldr	r3, [pc, #244]	; (80066c0 <xQueueReceive+0x1bc>)
 80065cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065da:	f7ff fb13 	bl	8005c04 <vPortExitCritical>
				return pdPASS;
 80065de:	2301      	movs	r3, #1
 80065e0:	e069      	b.n	80066b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065e8:	f7ff fb0c 	bl	8005c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e062      	b.n	80066b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065f6:	f107 0310 	add.w	r3, r7, #16
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 ffb8 	bl	8007570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006604:	f7ff fafe 	bl	8005c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006608:	f000 fd2a 	bl	8007060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800660c:	f7ff faca 	bl	8005ba4 <vPortEnterCritical>
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006616:	b25b      	sxtb	r3, r3
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800661c:	d103      	bne.n	8006626 <xQueueReceive+0x122>
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800662c:	b25b      	sxtb	r3, r3
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006632:	d103      	bne.n	800663c <xQueueReceive+0x138>
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800663c:	f7ff fae2 	bl	8005c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006640:	1d3a      	adds	r2, r7, #4
 8006642:	f107 0310 	add.w	r3, r7, #16
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f000 ffa7 	bl	800759c <xTaskCheckForTimeOut>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d123      	bne.n	800669c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	f000 fa3b 	bl	8006ad0 <prvIsQueueEmpty>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	3324      	adds	r3, #36	; 0x24
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fecd 	bl	8007408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800666e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006670:	f000 f9dc 	bl	8006a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006674:	f000 fd02 	bl	800707c <xTaskResumeAll>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d189      	bne.n	8006592 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800667e:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <xQueueReceive+0x1bc>)
 8006680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	e780      	b.n	8006592 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006692:	f000 f9cb 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006696:	f000 fcf1 	bl	800707c <xTaskResumeAll>
 800669a:	e77a      	b.n	8006592 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800669c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800669e:	f000 f9c5 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066a2:	f000 fceb 	bl	800707c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a8:	f000 fa12 	bl	8006ad0 <prvIsQueueEmpty>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f43f af6f 	beq.w	8006592 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3730      	adds	r7, #48	; 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	; 0x38
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61fb      	str	r3, [r7, #28]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006714:	f001 f896 	bl	8007844 <xTaskGetSchedulerState>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <xQueueSemaphoreTake+0x60>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <xQueueSemaphoreTake+0x64>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <xQueueSemaphoreTake+0x66>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	61bb      	str	r3, [r7, #24]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006744:	f7ff fa2e 	bl	8005ba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	d024      	beq.n	800679e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	1e5a      	subs	r2, r3, #1
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006764:	f001 f9e4 	bl	8007b30 <pvTaskIncrementMutexHeldCount>
 8006768:	4602      	mov	r2, r0
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00f      	beq.n	8006796 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	3310      	adds	r3, #16
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fe94 	bl	80074a8 <xTaskRemoveFromEventList>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006786:	4b54      	ldr	r3, [pc, #336]	; (80068d8 <xQueueSemaphoreTake+0x214>)
 8006788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006796:	f7ff fa35 	bl	8005c04 <vPortExitCritical>
				return pdPASS;
 800679a:	2301      	movs	r3, #1
 800679c:	e097      	b.n	80068ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d111      	bne.n	80067c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	617b      	str	r3, [r7, #20]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80067c0:	f7ff fa20 	bl	8005c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e082      	b.n	80068ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067ce:	f107 030c 	add.w	r3, r7, #12
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fecc 	bl	8007570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067dc:	f7ff fa12 	bl	8005c04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067e0:	f000 fc3e 	bl	8007060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067e4:	f7ff f9de 	bl	8005ba4 <vPortEnterCritical>
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f4:	d103      	bne.n	80067fe <xQueueSemaphoreTake+0x13a>
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006804:	b25b      	sxtb	r3, r3
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800680a:	d103      	bne.n	8006814 <xQueueSemaphoreTake+0x150>
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006814:	f7ff f9f6 	bl	8005c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006818:	463a      	mov	r2, r7
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f000 febb 	bl	800759c <xTaskCheckForTimeOut>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d132      	bne.n	8006892 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800682c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800682e:	f000 f94f 	bl	8006ad0 <prvIsQueueEmpty>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d026      	beq.n	8006886 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006840:	f7ff f9b0 	bl	8005ba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4618      	mov	r0, r3
 800684a:	f001 f819 	bl	8007880 <xTaskPriorityInherit>
 800684e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006850:	f7ff f9d8 	bl	8005c04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	3324      	adds	r3, #36	; 0x24
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fdd3 	bl	8007408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006864:	f000 f8e2 	bl	8006a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006868:	f000 fc08 	bl	800707c <xTaskResumeAll>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	f47f af68 	bne.w	8006744 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006874:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <xQueueSemaphoreTake+0x214>)
 8006876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	e75e      	b.n	8006744 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006888:	f000 f8d0 	bl	8006a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800688c:	f000 fbf6 	bl	800707c <xTaskResumeAll>
 8006890:	e758      	b.n	8006744 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006894:	f000 f8ca 	bl	8006a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006898:	f000 fbf0 	bl	800707c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800689c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800689e:	f000 f917 	bl	8006ad0 <prvIsQueueEmpty>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f43f af4d 	beq.w	8006744 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00d      	beq.n	80068cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80068b0:	f7ff f978 	bl	8005ba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80068b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068b6:	f000 f811 	bl	80068dc <prvGetDisinheritPriorityAfterTimeout>
 80068ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 f8b2 	bl	8007a2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80068c8:	f7ff f99c 	bl	8005c04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3738      	adds	r7, #56	; 0x38
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e001      	b.n	80068fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10d      	bne.n	8006946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d14d      	bne.n	80069ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f001 f80a 	bl	8007950 <xTaskPriorityDisinherit>
 800693c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e043      	b.n	80069ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d119      	bne.n	8006980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6858      	ldr	r0, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	461a      	mov	r2, r3
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	f001 fe9b 	bl	8008692 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	441a      	add	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d32b      	bcc.n	80069ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	e026      	b.n	80069ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68d8      	ldr	r0, [r3, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	461a      	mov	r2, r3
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	f001 fe81 	bl	8008692 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	425b      	negs	r3, r3
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d207      	bcs.n	80069bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	425b      	negs	r3, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d105      	bne.n	80069ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d018      	beq.n	8006a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	441a      	add	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d303      	bcc.n	8006a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68d9      	ldr	r1, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6838      	ldr	r0, [r7, #0]
 8006a20:	f001 fe37 	bl	8008692 <memcpy>
	}
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a34:	f7ff f8b6 	bl	8005ba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a40:	e011      	b.n	8006a66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d012      	beq.n	8006a70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3324      	adds	r3, #36	; 0x24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fd2a 	bl	80074a8 <xTaskRemoveFromEventList>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a5a:	f000 fe01 	bl	8007660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dce9      	bgt.n	8006a42 <prvUnlockQueue+0x16>
 8006a6e:	e000      	b.n	8006a72 <prvUnlockQueue+0x46>
					break;
 8006a70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a7a:	f7ff f8c3 	bl	8005c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a7e:	f7ff f891 	bl	8005ba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a8a:	e011      	b.n	8006ab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3310      	adds	r3, #16
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fd05 	bl	80074a8 <xTaskRemoveFromEventList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006aa4:	f000 fddc 	bl	8007660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dce9      	bgt.n	8006a8c <prvUnlockQueue+0x60>
 8006ab8:	e000      	b.n	8006abc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006aba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	22ff      	movs	r2, #255	; 0xff
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ac4:	f7ff f89e 	bl	8005c04 <vPortExitCritical>
}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad8:	f7ff f864 	bl	8005ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e001      	b.n	8006aee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f7ff f889 	bl	8005c04 <vPortExitCritical>

	return xReturn;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b04:	f7ff f84e 	bl	8005ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d102      	bne.n	8006b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e001      	b.n	8006b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b1e:	f7ff f871 	bl	8005c04 <vPortExitCritical>

	return xReturn;
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	e014      	b.n	8006b66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b3c:	4a0f      	ldr	r2, [pc, #60]	; (8006b7c <vQueueAddToRegistry+0x50>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b48:	490c      	ldr	r1, [pc, #48]	; (8006b7c <vQueueAddToRegistry+0x50>)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b52:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <vQueueAddToRegistry+0x50>)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4413      	add	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b5e:	e006      	b.n	8006b6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b07      	cmp	r3, #7
 8006b6a:	d9e7      	bls.n	8006b3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	2000bdd0 	.word	0x2000bdd0

08006b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b90:	f7ff f808 	bl	8005ba4 <vPortEnterCritical>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba0:	d103      	bne.n	8006baa <vQueueWaitForMessageRestricted+0x2a>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb0:	b25b      	sxtb	r3, r3
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb6:	d103      	bne.n	8006bc0 <vQueueWaitForMessageRestricted+0x40>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc0:	f7ff f820 	bl	8005c04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fc3b 	bl	8007450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f7ff ff26 	bl	8006a2c <prvUnlockQueue>
	}
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	623b      	str	r3, [r7, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xTaskCreateStatic+0x46>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	61fb      	str	r3, [r7, #28]
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c2e:	235c      	movs	r3, #92	; 0x5c
 8006c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b5c      	cmp	r3, #92	; 0x5c
 8006c36:	d00a      	beq.n	8006c4e <xTaskCreateStatic+0x66>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61bb      	str	r3, [r7, #24]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01e      	beq.n	8006c94 <xTaskCreateStatic+0xac>
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01b      	beq.n	8006c94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	9302      	str	r3, [sp, #8]
 8006c76:	f107 0314 	add.w	r3, r7, #20
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f850 	bl	8006d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c8e:	f000 f8dd 	bl	8006e4c <prvAddNewTaskToReadyList>
 8006c92:	e001      	b.n	8006c98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c98:	697b      	ldr	r3, [r7, #20]
	}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3728      	adds	r7, #40	; 0x28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b08c      	sub	sp, #48	; 0x30
 8006ca6:	af04      	add	r7, sp, #16
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fba8 	bl	800540c <pvPortMalloc>
 8006cbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00e      	beq.n	8006ce2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cc4:	205c      	movs	r0, #92	; 0x5c
 8006cc6:	f7fe fba1 	bl	800540c <pvPortMalloc>
 8006cca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd8:	e005      	b.n	8006ce6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	f7fe fc62 	bl	80055a4 <vPortFree>
 8006ce0:	e001      	b.n	8006ce6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d017      	beq.n	8006d1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9303      	str	r3, [sp, #12]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	9302      	str	r3, [sp, #8]
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f80e 	bl	8006d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d10:	69f8      	ldr	r0, [r7, #28]
 8006d12:	f000 f89b 	bl	8006e4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d16:	2301      	movs	r3, #1
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	e002      	b.n	8006d22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d22:	69bb      	ldr	r3, [r7, #24]
	}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	461a      	mov	r2, r3
 8006d44:	21a5      	movs	r1, #165	; 0xa5
 8006d46:	f001 fcb2 	bl	80086ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d54:	3b01      	subs	r3, #1
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f023 0307 	bic.w	r3, r3, #7
 8006d62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	617b      	str	r3, [r7, #20]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01f      	beq.n	8006dca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e012      	b.n	8006db6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	7819      	ldrb	r1, [r3, #0]
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3334      	adds	r3, #52	; 0x34
 8006da0:	460a      	mov	r2, r1
 8006da2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	2b0f      	cmp	r3, #15
 8006dba:	d9e9      	bls.n	8006d90 <prvInitialiseNewTask+0x64>
 8006dbc:	e000      	b.n	8006dc0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006dbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dc8:	e003      	b.n	8006dd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	2b37      	cmp	r3, #55	; 0x37
 8006dd6:	d901      	bls.n	8006ddc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dd8:	2337      	movs	r3, #55	; 0x37
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	2200      	movs	r2, #0
 8006dec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fd14 	bl	8005820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	3318      	adds	r3, #24
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fd0f 	bl	8005820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	69b8      	ldr	r0, [r7, #24]
 8006e2c:	f7fe fd8c 	bl	8005948 <pxPortInitialiseStack>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e42:	bf00      	nop
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e54:	f7fe fea6 	bl	8005ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <prvAddNewTaskToReadyList+0xc4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	; (8006f10 <prvAddNewTaskToReadyList+0xc4>)
 8006e60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e62:	4b2c      	ldr	r3, [pc, #176]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e70:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <prvAddNewTaskToReadyList+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d110      	bne.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e78:	f000 fc16 	bl	80076a8 <prvInitialiseTaskLists>
 8006e7c:	e00d      	b.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <prvAddNewTaskToReadyList+0xcc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e86:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d802      	bhi.n	8006e9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e94:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e9a:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <prvAddNewTaskToReadyList+0xd0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <prvAddNewTaskToReadyList+0xd0>)
 8006ea2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <prvAddNewTaskToReadyList+0xd0>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <prvAddNewTaskToReadyList+0xd4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d903      	bls.n	8006ec0 <prvAddNewTaskToReadyList+0x74>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4a18      	ldr	r2, [pc, #96]	; (8006f20 <prvAddNewTaskToReadyList+0xd4>)
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <prvAddNewTaskToReadyList+0xd8>)
 8006ece:	441a      	add	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f7fe fcaf 	bl	800583a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006edc:	f7fe fe92 	bl	8005c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ee0:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <prvAddNewTaskToReadyList+0xcc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00e      	beq.n	8006f06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <prvAddNewTaskToReadyList+0xc8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d207      	bcs.n	8006f06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvAddNewTaskToReadyList+0xdc>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	2000aa10 	.word	0x2000aa10
 8006f14:	2000a53c 	.word	0x2000a53c
 8006f18:	2000aa1c 	.word	0x2000aa1c
 8006f1c:	2000aa2c 	.word	0x2000aa2c
 8006f20:	2000aa18 	.word	0x2000aa18
 8006f24:	2000a540 	.word	0x2000a540
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d017      	beq.n	8006f6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <vTaskDelay+0x60>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <vTaskDelay+0x30>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60bb      	str	r3, [r7, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f5c:	f000 f880 	bl	8007060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f60:	2100      	movs	r1, #0
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fdf8 	bl	8007b58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f68:	f000 f888 	bl	800707c <xTaskResumeAll>
 8006f6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d107      	bne.n	8006f84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <vTaskDelay+0x64>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	2000aa38 	.word	0x2000aa38
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fa2:	463a      	mov	r2, r7
 8006fa4:	1d39      	adds	r1, r7, #4
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe f9fa 	bl	80053a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	9202      	str	r2, [sp, #8]
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	4921      	ldr	r1, [pc, #132]	; (8007048 <vTaskStartScheduler+0xb4>)
 8006fc4:	4821      	ldr	r0, [pc, #132]	; (800704c <vTaskStartScheduler+0xb8>)
 8006fc6:	f7ff fe0f 	bl	8006be8 <xTaskCreateStatic>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4a20      	ldr	r2, [pc, #128]	; (8007050 <vTaskStartScheduler+0xbc>)
 8006fce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fd0:	4b1f      	ldr	r3, [pc, #124]	; (8007050 <vTaskStartScheduler+0xbc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e001      	b.n	8006fe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d102      	bne.n	8006fee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fe8:	f000 fe0a 	bl	8007c00 <xTimerCreateTimerTask>
 8006fec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d116      	bne.n	8007022 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	613b      	str	r3, [r7, #16]
}
 8007006:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <vTaskStartScheduler+0xc0>)
 800700a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800700e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007010:	4b11      	ldr	r3, [pc, #68]	; (8007058 <vTaskStartScheduler+0xc4>)
 8007012:	2201      	movs	r2, #1
 8007014:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007016:	4b11      	ldr	r3, [pc, #68]	; (800705c <vTaskStartScheduler+0xc8>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800701c:	f7fe fd20 	bl	8005a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007020:	e00e      	b.n	8007040 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007028:	d10a      	bne.n	8007040 <vTaskStartScheduler+0xac>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60fb      	str	r3, [r7, #12]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <vTaskStartScheduler+0xaa>
}
 8007040:	bf00      	nop
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	0800b7ec 	.word	0x0800b7ec
 800704c:	08007679 	.word	0x08007679
 8007050:	2000aa34 	.word	0x2000aa34
 8007054:	2000aa30 	.word	0x2000aa30
 8007058:	2000aa1c 	.word	0x2000aa1c
 800705c:	2000aa14 	.word	0x2000aa14

08007060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <vTaskSuspendAll+0x18>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3301      	adds	r3, #1
 800706a:	4a03      	ldr	r2, [pc, #12]	; (8007078 <vTaskSuspendAll+0x18>)
 800706c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800706e:	bf00      	nop
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	2000aa38 	.word	0x2000aa38

0800707c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800708a:	4b42      	ldr	r3, [pc, #264]	; (8007194 <xTaskResumeAll+0x118>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	603b      	str	r3, [r7, #0]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070a8:	f7fe fd7c 	bl	8005ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070ac:	4b39      	ldr	r3, [pc, #228]	; (8007194 <xTaskResumeAll+0x118>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	4a38      	ldr	r2, [pc, #224]	; (8007194 <xTaskResumeAll+0x118>)
 80070b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b6:	4b37      	ldr	r3, [pc, #220]	; (8007194 <xTaskResumeAll+0x118>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d162      	bne.n	8007184 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070be:	4b36      	ldr	r3, [pc, #216]	; (8007198 <xTaskResumeAll+0x11c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d05e      	beq.n	8007184 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070c6:	e02f      	b.n	8007128 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c8:	4b34      	ldr	r3, [pc, #208]	; (800719c <xTaskResumeAll+0x120>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3318      	adds	r3, #24
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe fc0d 	bl	80058f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fc08 	bl	80058f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <xTaskResumeAll+0x124>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d903      	bls.n	80070f8 <xTaskResumeAll+0x7c>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	4a2a      	ldr	r2, [pc, #168]	; (80071a0 <xTaskResumeAll+0x124>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <xTaskResumeAll+0x128>)
 8007106:	441a      	add	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fe fb93 	bl	800583a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <xTaskResumeAll+0x12c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	429a      	cmp	r2, r3
 8007120:	d302      	bcc.n	8007128 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007122:	4b22      	ldr	r3, [pc, #136]	; (80071ac <xTaskResumeAll+0x130>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007128:	4b1c      	ldr	r3, [pc, #112]	; (800719c <xTaskResumeAll+0x120>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1cb      	bne.n	80070c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007136:	f000 fb55 	bl	80077e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800713a:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <xTaskResumeAll+0x134>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d010      	beq.n	8007168 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007146:	f000 f847 	bl	80071d8 <xTaskIncrementTick>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007150:	4b16      	ldr	r3, [pc, #88]	; (80071ac <xTaskResumeAll+0x130>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3b01      	subs	r3, #1
 800715a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f1      	bne.n	8007146 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007162:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <xTaskResumeAll+0x134>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007168:	4b10      	ldr	r3, [pc, #64]	; (80071ac <xTaskResumeAll+0x130>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007174:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <xTaskResumeAll+0x138>)
 8007176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007184:	f7fe fd3e 	bl	8005c04 <vPortExitCritical>

	return xAlreadyYielded;
 8007188:	68bb      	ldr	r3, [r7, #8]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	2000aa38 	.word	0x2000aa38
 8007198:	2000aa10 	.word	0x2000aa10
 800719c:	2000a9d0 	.word	0x2000a9d0
 80071a0:	2000aa18 	.word	0x2000aa18
 80071a4:	2000a540 	.word	0x2000a540
 80071a8:	2000a53c 	.word	0x2000a53c
 80071ac:	2000aa24 	.word	0x2000aa24
 80071b0:	2000aa20 	.word	0x2000aa20
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <xTaskGetTickCount+0x1c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071c4:	687b      	ldr	r3, [r7, #4]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	2000aa14 	.word	0x2000aa14

080071d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e2:	4b4f      	ldr	r3, [pc, #316]	; (8007320 <xTaskIncrementTick+0x148>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 808f 	bne.w	800730a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071ec:	4b4d      	ldr	r3, [pc, #308]	; (8007324 <xTaskIncrementTick+0x14c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3301      	adds	r3, #1
 80071f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071f4:	4a4b      	ldr	r2, [pc, #300]	; (8007324 <xTaskIncrementTick+0x14c>)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d120      	bne.n	8007242 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007200:	4b49      	ldr	r3, [pc, #292]	; (8007328 <xTaskIncrementTick+0x150>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <xTaskIncrementTick+0x48>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	603b      	str	r3, [r7, #0]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <xTaskIncrementTick+0x46>
 8007220:	4b41      	ldr	r3, [pc, #260]	; (8007328 <xTaskIncrementTick+0x150>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	4b41      	ldr	r3, [pc, #260]	; (800732c <xTaskIncrementTick+0x154>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3f      	ldr	r2, [pc, #252]	; (8007328 <xTaskIncrementTick+0x150>)
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	4a3f      	ldr	r2, [pc, #252]	; (800732c <xTaskIncrementTick+0x154>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b3e      	ldr	r3, [pc, #248]	; (8007330 <xTaskIncrementTick+0x158>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3301      	adds	r3, #1
 800723a:	4a3d      	ldr	r2, [pc, #244]	; (8007330 <xTaskIncrementTick+0x158>)
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	f000 fad1 	bl	80077e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007242:	4b3c      	ldr	r3, [pc, #240]	; (8007334 <xTaskIncrementTick+0x15c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	429a      	cmp	r2, r3
 800724a:	d349      	bcc.n	80072e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800724c:	4b36      	ldr	r3, [pc, #216]	; (8007328 <xTaskIncrementTick+0x150>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	4b37      	ldr	r3, [pc, #220]	; (8007334 <xTaskIncrementTick+0x15c>)
 8007258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800725c:	601a      	str	r2, [r3, #0]
					break;
 800725e:	e03f      	b.n	80072e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007260:	4b31      	ldr	r3, [pc, #196]	; (8007328 <xTaskIncrementTick+0x150>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d203      	bcs.n	8007280 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007278:	4a2e      	ldr	r2, [pc, #184]	; (8007334 <xTaskIncrementTick+0x15c>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800727e:	e02f      	b.n	80072e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fb35 	bl	80058f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3318      	adds	r3, #24
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fb2c 	bl	80058f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	4b25      	ldr	r3, [pc, #148]	; (8007338 <xTaskIncrementTick+0x160>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d903      	bls.n	80072b0 <xTaskIncrementTick+0xd8>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	4a22      	ldr	r2, [pc, #136]	; (8007338 <xTaskIncrementTick+0x160>)
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4a1f      	ldr	r2, [pc, #124]	; (800733c <xTaskIncrementTick+0x164>)
 80072be:	441a      	add	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe fab7 	bl	800583a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <xTaskIncrementTick+0x168>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d3b8      	bcc.n	800724c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072da:	2301      	movs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072de:	e7b5      	b.n	800724c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072e0:	4b17      	ldr	r3, [pc, #92]	; (8007340 <xTaskIncrementTick+0x168>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e6:	4915      	ldr	r1, [pc, #84]	; (800733c <xTaskIncrementTick+0x164>)
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d901      	bls.n	80072fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072fc:	4b11      	ldr	r3, [pc, #68]	; (8007344 <xTaskIncrementTick+0x16c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e004      	b.n	8007314 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <xTaskIncrementTick+0x170>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3301      	adds	r3, #1
 8007310:	4a0d      	ldr	r2, [pc, #52]	; (8007348 <xTaskIncrementTick+0x170>)
 8007312:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007314:	697b      	ldr	r3, [r7, #20]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	2000aa38 	.word	0x2000aa38
 8007324:	2000aa14 	.word	0x2000aa14
 8007328:	2000a9c8 	.word	0x2000a9c8
 800732c:	2000a9cc 	.word	0x2000a9cc
 8007330:	2000aa28 	.word	0x2000aa28
 8007334:	2000aa30 	.word	0x2000aa30
 8007338:	2000aa18 	.word	0x2000aa18
 800733c:	2000a540 	.word	0x2000a540
 8007340:	2000a53c 	.word	0x2000a53c
 8007344:	2000aa24 	.word	0x2000aa24
 8007348:	2000aa20 	.word	0x2000aa20

0800734c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007352:	4b28      	ldr	r3, [pc, #160]	; (80073f4 <vTaskSwitchContext+0xa8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800735a:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <vTaskSwitchContext+0xac>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007360:	e041      	b.n	80073e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007362:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <vTaskSwitchContext+0xac>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007368:	4b24      	ldr	r3, [pc, #144]	; (80073fc <vTaskSwitchContext+0xb0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e010      	b.n	8007392 <vTaskSwitchContext+0x46>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <vTaskSwitchContext+0x40>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	607b      	str	r3, [r7, #4]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <vTaskSwitchContext+0x3e>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3b01      	subs	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	491b      	ldr	r1, [pc, #108]	; (8007400 <vTaskSwitchContext+0xb4>)
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0e4      	beq.n	8007370 <vTaskSwitchContext+0x24>
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <vTaskSwitchContext+0xb4>)
 80073b2:	4413      	add	r3, r2
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	605a      	str	r2, [r3, #4]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	3308      	adds	r3, #8
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d104      	bne.n	80073d6 <vTaskSwitchContext+0x8a>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	605a      	str	r2, [r3, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a09      	ldr	r2, [pc, #36]	; (8007404 <vTaskSwitchContext+0xb8>)
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4a06      	ldr	r2, [pc, #24]	; (80073fc <vTaskSwitchContext+0xb0>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6013      	str	r3, [r2, #0]
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	2000aa38 	.word	0x2000aa38
 80073f8:	2000aa24 	.word	0x2000aa24
 80073fc:	2000aa18 	.word	0x2000aa18
 8007400:	2000a540 	.word	0x2000a540
 8007404:	2000a53c 	.word	0x2000a53c

08007408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	60fb      	str	r3, [r7, #12]
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <vTaskPlaceOnEventList+0x44>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3318      	adds	r3, #24
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fe fa23 	bl	8005882 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800743c:	2101      	movs	r1, #1
 800743e:	6838      	ldr	r0, [r7, #0]
 8007440:	f000 fb8a 	bl	8007b58 <prvAddCurrentTaskToDelayedList>
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	2000a53c 	.word	0x2000a53c

08007450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	617b      	str	r3, [r7, #20]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3318      	adds	r3, #24
 800747e:	4619      	mov	r1, r3
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7fe f9da 	bl	800583a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800748c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007490:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	68b8      	ldr	r0, [r7, #8]
 8007496:	f000 fb5f 	bl	8007b58 <prvAddCurrentTaskToDelayedList>
	}
 800749a:	bf00      	nop
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	2000a53c 	.word	0x2000a53c

080074a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	3318      	adds	r3, #24
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fa0b 	bl	80058f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074de:	4b1e      	ldr	r3, [pc, #120]	; (8007558 <xTaskRemoveFromEventList+0xb0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d11d      	bne.n	8007522 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fa02 	bl	80058f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	4b19      	ldr	r3, [pc, #100]	; (800755c <xTaskRemoveFromEventList+0xb4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d903      	bls.n	8007504 <xTaskRemoveFromEventList+0x5c>
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a16      	ldr	r2, [pc, #88]	; (800755c <xTaskRemoveFromEventList+0xb4>)
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4a13      	ldr	r2, [pc, #76]	; (8007560 <xTaskRemoveFromEventList+0xb8>)
 8007512:	441a      	add	r2, r3
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3304      	adds	r3, #4
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7fe f98d 	bl	800583a <vListInsertEnd>
 8007520:	e005      	b.n	800752e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3318      	adds	r3, #24
 8007526:	4619      	mov	r1, r3
 8007528:	480e      	ldr	r0, [pc, #56]	; (8007564 <xTaskRemoveFromEventList+0xbc>)
 800752a:	f7fe f986 	bl	800583a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <xTaskRemoveFromEventList+0xc0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	429a      	cmp	r2, r3
 800753a:	d905      	bls.n	8007548 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <xTaskRemoveFromEventList+0xc4>)
 8007542:	2201      	movs	r2, #1
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	e001      	b.n	800754c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800754c:	697b      	ldr	r3, [r7, #20]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	2000aa38 	.word	0x2000aa38
 800755c:	2000aa18 	.word	0x2000aa18
 8007560:	2000a540 	.word	0x2000a540
 8007564:	2000a9d0 	.word	0x2000a9d0
 8007568:	2000a53c 	.word	0x2000a53c
 800756c:	2000aa24 	.word	0x2000aa24

08007570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <vTaskInternalSetTimeOutState+0x24>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <vTaskInternalSetTimeOutState+0x28>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	605a      	str	r2, [r3, #4]
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	2000aa28 	.word	0x2000aa28
 8007598:	2000aa14 	.word	0x2000aa14

0800759c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	613b      	str	r3, [r7, #16]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	60fb      	str	r3, [r7, #12]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80075de:	f7fe fae1 	bl	8005ba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075e2:	4b1d      	ldr	r3, [pc, #116]	; (8007658 <xTaskCheckForTimeOut+0xbc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075fa:	d102      	bne.n	8007602 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e023      	b.n	800764a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b15      	ldr	r3, [pc, #84]	; (800765c <xTaskCheckForTimeOut+0xc0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d007      	beq.n	800761e <xTaskCheckForTimeOut+0x82>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	429a      	cmp	r2, r3
 8007616:	d302      	bcc.n	800761e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	61fb      	str	r3, [r7, #28]
 800761c:	e015      	b.n	800764a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	429a      	cmp	r2, r3
 8007626:	d20b      	bcs.n	8007640 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ff9b 	bl	8007570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	e004      	b.n	800764a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007646:	2301      	movs	r3, #1
 8007648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800764a:	f7fe fadb 	bl	8005c04 <vPortExitCritical>

	return xReturn;
 800764e:	69fb      	ldr	r3, [r7, #28]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	2000aa14 	.word	0x2000aa14
 800765c:	2000aa28 	.word	0x2000aa28

08007660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007664:	4b03      	ldr	r3, [pc, #12]	; (8007674 <vTaskMissedYield+0x14>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	bf00      	nop
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	2000aa24 	.word	0x2000aa24

08007678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007680:	f000 f852 	bl	8007728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <prvIdleTask+0x28>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d9f9      	bls.n	8007680 <prvIdleTask+0x8>
			{
				taskYIELD();
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <prvIdleTask+0x2c>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800769c:	e7f0      	b.n	8007680 <prvIdleTask+0x8>
 800769e:	bf00      	nop
 80076a0:	2000a540 	.word	0x2000a540
 80076a4:	e000ed04 	.word	0xe000ed04

080076a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
 80076b2:	e00c      	b.n	80076ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4a12      	ldr	r2, [pc, #72]	; (8007708 <prvInitialiseTaskLists+0x60>)
 80076c0:	4413      	add	r3, r2
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe f88c 	bl	80057e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3301      	adds	r3, #1
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b37      	cmp	r3, #55	; 0x37
 80076d2:	d9ef      	bls.n	80076b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076d4:	480d      	ldr	r0, [pc, #52]	; (800770c <prvInitialiseTaskLists+0x64>)
 80076d6:	f7fe f883 	bl	80057e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076da:	480d      	ldr	r0, [pc, #52]	; (8007710 <prvInitialiseTaskLists+0x68>)
 80076dc:	f7fe f880 	bl	80057e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076e0:	480c      	ldr	r0, [pc, #48]	; (8007714 <prvInitialiseTaskLists+0x6c>)
 80076e2:	f7fe f87d 	bl	80057e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076e6:	480c      	ldr	r0, [pc, #48]	; (8007718 <prvInitialiseTaskLists+0x70>)
 80076e8:	f7fe f87a 	bl	80057e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076ec:	480b      	ldr	r0, [pc, #44]	; (800771c <prvInitialiseTaskLists+0x74>)
 80076ee:	f7fe f877 	bl	80057e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076f2:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <prvInitialiseTaskLists+0x78>)
 80076f4:	4a05      	ldr	r2, [pc, #20]	; (800770c <prvInitialiseTaskLists+0x64>)
 80076f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <prvInitialiseTaskLists+0x7c>)
 80076fa:	4a05      	ldr	r2, [pc, #20]	; (8007710 <prvInitialiseTaskLists+0x68>)
 80076fc:	601a      	str	r2, [r3, #0]
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	2000a540 	.word	0x2000a540
 800770c:	2000a9a0 	.word	0x2000a9a0
 8007710:	2000a9b4 	.word	0x2000a9b4
 8007714:	2000a9d0 	.word	0x2000a9d0
 8007718:	2000a9e4 	.word	0x2000a9e4
 800771c:	2000a9fc 	.word	0x2000a9fc
 8007720:	2000a9c8 	.word	0x2000a9c8
 8007724:	2000a9cc 	.word	0x2000a9cc

08007728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800772e:	e019      	b.n	8007764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007730:	f7fe fa38 	bl	8005ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007734:	4b10      	ldr	r3, [pc, #64]	; (8007778 <prvCheckTasksWaitingTermination+0x50>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe f8d7 	bl	80058f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <prvCheckTasksWaitingTermination+0x54>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3b01      	subs	r3, #1
 800774c:	4a0b      	ldr	r2, [pc, #44]	; (800777c <prvCheckTasksWaitingTermination+0x54>)
 800774e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007750:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <prvCheckTasksWaitingTermination+0x58>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3b01      	subs	r3, #1
 8007756:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <prvCheckTasksWaitingTermination+0x58>)
 8007758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800775a:	f7fe fa53 	bl	8005c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f810 	bl	8007784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <prvCheckTasksWaitingTermination+0x58>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e1      	bne.n	8007730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800776c:	bf00      	nop
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	2000a9e4 	.word	0x2000a9e4
 800777c:	2000aa10 	.word	0x2000aa10
 8007780:	2000a9f8 	.word	0x2000a9f8

08007784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007792:	2b00      	cmp	r3, #0
 8007794:	d108      	bne.n	80077a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	4618      	mov	r0, r3
 800779c:	f7fd ff02 	bl	80055a4 <vPortFree>
				vPortFree( pxTCB );
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fd feff 	bl	80055a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077a6:	e018      	b.n	80077da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d103      	bne.n	80077ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fd fef6 	bl	80055a4 <vPortFree>
	}
 80077b8:	e00f      	b.n	80077da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d00a      	beq.n	80077da <prvDeleteTCB+0x56>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	60fb      	str	r3, [r7, #12]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <prvDeleteTCB+0x54>
	}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077ea:	4b0c      	ldr	r3, [pc, #48]	; (800781c <prvResetNextTaskUnblockTime+0x38>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <prvResetNextTaskUnblockTime+0x3c>)
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077fc:	e008      	b.n	8007810 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fe:	4b07      	ldr	r3, [pc, #28]	; (800781c <prvResetNextTaskUnblockTime+0x38>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4a04      	ldr	r2, [pc, #16]	; (8007820 <prvResetNextTaskUnblockTime+0x3c>)
 800780e:	6013      	str	r3, [r2, #0]
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	2000a9c8 	.word	0x2000a9c8
 8007820:	2000aa30 	.word	0x2000aa30

08007824 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800782a:	4b05      	ldr	r3, [pc, #20]	; (8007840 <xTaskGetCurrentTaskHandle+0x1c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007830:	687b      	ldr	r3, [r7, #4]
	}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2000a53c 	.word	0x2000a53c

08007844 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800784a:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <xTaskGetSchedulerState+0x34>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d102      	bne.n	8007858 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007852:	2301      	movs	r3, #1
 8007854:	607b      	str	r3, [r7, #4]
 8007856:	e008      	b.n	800786a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <xTaskGetSchedulerState+0x38>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007860:	2302      	movs	r3, #2
 8007862:	607b      	str	r3, [r7, #4]
 8007864:	e001      	b.n	800786a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007866:	2300      	movs	r3, #0
 8007868:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800786a:	687b      	ldr	r3, [r7, #4]
	}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	2000aa1c 	.word	0x2000aa1c
 800787c:	2000aa38 	.word	0x2000aa38

08007880 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d051      	beq.n	800793a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789a:	4b2a      	ldr	r3, [pc, #168]	; (8007944 <xTaskPriorityInherit+0xc4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d241      	bcs.n	8007928 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	db06      	blt.n	80078ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ac:	4b25      	ldr	r3, [pc, #148]	; (8007944 <xTaskPriorityInherit+0xc4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6959      	ldr	r1, [r3, #20]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4a1f      	ldr	r2, [pc, #124]	; (8007948 <xTaskPriorityInherit+0xc8>)
 80078cc:	4413      	add	r3, r2
 80078ce:	4299      	cmp	r1, r3
 80078d0:	d122      	bne.n	8007918 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe f80c 	bl	80058f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078dc:	4b19      	ldr	r3, [pc, #100]	; (8007944 <xTaskPriorityInherit+0xc4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ea:	4b18      	ldr	r3, [pc, #96]	; (800794c <xTaskPriorityInherit+0xcc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d903      	bls.n	80078fa <xTaskPriorityInherit+0x7a>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f6:	4a15      	ldr	r2, [pc, #84]	; (800794c <xTaskPriorityInherit+0xcc>)
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4a10      	ldr	r2, [pc, #64]	; (8007948 <xTaskPriorityInherit+0xc8>)
 8007908:	441a      	add	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	3304      	adds	r3, #4
 800790e:	4619      	mov	r1, r3
 8007910:	4610      	mov	r0, r2
 8007912:	f7fd ff92 	bl	800583a <vListInsertEnd>
 8007916:	e004      	b.n	8007922 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <xTaskPriorityInherit+0xc4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007922:	2301      	movs	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	e008      	b.n	800793a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <xTaskPriorityInherit+0xc4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	429a      	cmp	r2, r3
 8007934:	d201      	bcs.n	800793a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007936:	2301      	movs	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800793a:	68fb      	ldr	r3, [r7, #12]
	}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	2000a53c 	.word	0x2000a53c
 8007948:	2000a540 	.word	0x2000a540
 800794c:	2000aa18 	.word	0x2000aa18

08007950 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d056      	beq.n	8007a14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007966:	4b2e      	ldr	r3, [pc, #184]	; (8007a20 <xTaskPriorityDisinherit+0xd0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	429a      	cmp	r2, r3
 800796e:	d00a      	beq.n	8007986 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60bb      	str	r3, [r7, #8]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a8:	1e5a      	subs	r2, r3, #1
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d02c      	beq.n	8007a14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d128      	bne.n	8007a14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	3304      	adds	r3, #4
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd ff94 	bl	80058f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e4:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <xTaskPriorityDisinherit+0xd4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d903      	bls.n	80079f4 <xTaskPriorityDisinherit+0xa4>
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <xTaskPriorityDisinherit+0xd4>)
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f8:	4613      	mov	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <xTaskPriorityDisinherit+0xd8>)
 8007a02:	441a      	add	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fd ff15 	bl	800583a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a14:	697b      	ldr	r3, [r7, #20]
	}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	2000a53c 	.word	0x2000a53c
 8007a24:	2000aa18 	.word	0x2000aa18
 8007a28:	2000a540 	.word	0x2000a540

08007a2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d06a      	beq.n	8007b1a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60fb      	str	r3, [r7, #12]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d902      	bls.n	8007a72 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	e002      	b.n	8007a78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d04b      	beq.n	8007b1a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d146      	bne.n	8007b1a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a8c:	4b25      	ldr	r3, [pc, #148]	; (8007b24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d10a      	bne.n	8007aac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	60bb      	str	r3, [r7, #8]
}
 8007aa8:	bf00      	nop
 8007aaa:	e7fe      	b.n	8007aaa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db04      	blt.n	8007aca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	6959      	ldr	r1, [r3, #20]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4a13      	ldr	r2, [pc, #76]	; (8007b28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ada:	4413      	add	r3, r2
 8007adc:	4299      	cmp	r1, r3
 8007ade:	d11c      	bne.n	8007b1a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd ff05 	bl	80058f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d903      	bls.n	8007afe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4a07      	ldr	r2, [pc, #28]	; (8007b28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b0c:	441a      	add	r2, r3
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7fd fe90 	bl	800583a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b1a:	bf00      	nop
 8007b1c:	3720      	adds	r7, #32
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	2000a53c 	.word	0x2000a53c
 8007b28:	2000a540 	.word	0x2000a540
 8007b2c:	2000aa18 	.word	0x2000aa18

08007b30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b42:	3201      	adds	r2, #1
 8007b44:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b48:	681b      	ldr	r3, [r3, #0]
	}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	2000a53c 	.word	0x2000a53c

08007b58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b62:	4b21      	ldr	r3, [pc, #132]	; (8007be8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b68:	4b20      	ldr	r3, [pc, #128]	; (8007bec <prvAddCurrentTaskToDelayedList+0x94>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fd fec0 	bl	80058f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b7a:	d10a      	bne.n	8007b92 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b82:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <prvAddCurrentTaskToDelayedList+0x94>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4819      	ldr	r0, [pc, #100]	; (8007bf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b8c:	f7fd fe55 	bl	800583a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b90:	e026      	b.n	8007be0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <prvAddCurrentTaskToDelayedList+0x94>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d209      	bcs.n	8007bbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fd fe63 	bl	8005882 <vListInsert>
}
 8007bbc:	e010      	b.n	8007be0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bbe:	4b0e      	ldr	r3, [pc, #56]	; (8007bf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <prvAddCurrentTaskToDelayedList+0x94>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f7fd fe59 	bl	8005882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d202      	bcs.n	8007be0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bda:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6013      	str	r3, [r2, #0]
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	2000aa14 	.word	0x2000aa14
 8007bec:	2000a53c 	.word	0x2000a53c
 8007bf0:	2000a9fc 	.word	0x2000a9fc
 8007bf4:	2000a9cc 	.word	0x2000a9cc
 8007bf8:	2000a9c8 	.word	0x2000a9c8
 8007bfc:	2000aa30 	.word	0x2000aa30

08007c00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c0a:	f000 fb07 	bl	800821c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	; (8007c80 <xTimerCreateTimerTask+0x80>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d021      	beq.n	8007c5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c1e:	1d3a      	adds	r2, r7, #4
 8007c20:	f107 0108 	add.w	r1, r7, #8
 8007c24:	f107 030c 	add.w	r3, r7, #12
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fd fbd5 	bl	80053d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	9202      	str	r2, [sp, #8]
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	2302      	movs	r3, #2
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	460a      	mov	r2, r1
 8007c40:	4910      	ldr	r1, [pc, #64]	; (8007c84 <xTimerCreateTimerTask+0x84>)
 8007c42:	4811      	ldr	r0, [pc, #68]	; (8007c88 <xTimerCreateTimerTask+0x88>)
 8007c44:	f7fe ffd0 	bl	8006be8 <xTaskCreateStatic>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	4a10      	ldr	r2, [pc, #64]	; (8007c8c <xTimerCreateTimerTask+0x8c>)
 8007c4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <xTimerCreateTimerTask+0x8c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c56:	2301      	movs	r3, #1
 8007c58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c76:	697b      	ldr	r3, [r7, #20]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	2000aa6c 	.word	0x2000aa6c
 8007c84:	0800b7f4 	.word	0x0800b7f4
 8007c88:	08007dc5 	.word	0x08007dc5
 8007c8c:	2000aa70 	.word	0x2000aa70

08007c90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	623b      	str	r3, [r7, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cbe:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <xTimerGenericCommand+0x98>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02a      	beq.n	8007d1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b05      	cmp	r3, #5
 8007cd6:	dc18      	bgt.n	8007d0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cd8:	f7ff fdb4 	bl	8007844 <xTaskGetSchedulerState>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d109      	bne.n	8007cf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ce2:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <xTimerGenericCommand+0x98>)
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f107 0110 	add.w	r1, r7, #16
 8007cea:	2300      	movs	r3, #0
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	f7fe fa6f 	bl	80061d0 <xQueueGenericSend>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8007cf4:	e012      	b.n	8007d1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <xTimerGenericCommand+0x98>)
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	f107 0110 	add.w	r1, r7, #16
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2200      	movs	r2, #0
 8007d02:	f7fe fa65 	bl	80061d0 <xQueueGenericSend>
 8007d06:	6278      	str	r0, [r7, #36]	; 0x24
 8007d08:	e008      	b.n	8007d1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <xTimerGenericCommand+0x98>)
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	f107 0110 	add.w	r1, r7, #16
 8007d12:	2300      	movs	r3, #0
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	f7fe fb59 	bl	80063cc <xQueueGenericSendFromISR>
 8007d1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	2000aa6c 	.word	0x2000aa6c

08007d2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d36:	4b22      	ldr	r3, [pc, #136]	; (8007dc0 <prvProcessExpiredTimer+0x94>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fd fdd5 	bl	80058f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d022      	beq.n	8007d9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	699a      	ldr	r2, [r3, #24]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	18d1      	adds	r1, r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	f000 f8d1 	bl	8007f0c <prvInsertTimerInActiveList>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01f      	beq.n	8007db0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d70:	2300      	movs	r3, #0
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	6978      	ldr	r0, [r7, #20]
 8007d7c:	f7ff ff88 	bl	8007c90 <xTimerGenericCommand>
 8007d80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d113      	bne.n	8007db0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	60fb      	str	r3, [r7, #12]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	6978      	ldr	r0, [r7, #20]
 8007db6:	4798      	blx	r3
}
 8007db8:	bf00      	nop
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	2000aa64 	.word	0x2000aa64

08007dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dcc:	f107 0308 	add.w	r3, r7, #8
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 f857 	bl	8007e84 <prvGetNextExpireTime>
 8007dd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f803 	bl	8007de8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007de2:	f000 f8d5 	bl	8007f90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007de6:	e7f1      	b.n	8007dcc <prvTimerTask+0x8>

08007de8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007df2:	f7ff f935 	bl	8007060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007df6:	f107 0308 	add.w	r3, r7, #8
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f866 	bl	8007ecc <prvSampleTimeNow>
 8007e00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d130      	bne.n	8007e6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <prvProcessTimerOrBlockTask+0x3c>
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d806      	bhi.n	8007e24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e16:	f7ff f931 	bl	800707c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e1a:	68f9      	ldr	r1, [r7, #12]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ff85 	bl	8007d2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e22:	e024      	b.n	8007e6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e2a:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <prvProcessTimerOrBlockTask+0x90>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <prvProcessTimerOrBlockTask+0x50>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <prvProcessTimerOrBlockTask+0x52>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e3c:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <prvProcessTimerOrBlockTask+0x94>)
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f7fe fe99 	bl	8006b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e4e:	f7ff f915 	bl	800707c <xTaskResumeAll>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e58:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <prvProcessTimerOrBlockTask+0x98>)
 8007e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	f3bf 8f6f 	isb	sy
}
 8007e68:	e001      	b.n	8007e6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e6a:	f7ff f907 	bl	800707c <xTaskResumeAll>
}
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	2000aa68 	.word	0x2000aa68
 8007e7c:	2000aa6c 	.word	0x2000aa6c
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ec8 <prvGetNextExpireTime+0x44>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <prvGetNextExpireTime+0x16>
 8007e96:	2201      	movs	r2, #1
 8007e98:	e000      	b.n	8007e9c <prvGetNextExpireTime+0x18>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ea8:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <prvGetNextExpireTime+0x44>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	e001      	b.n	8007eb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	2000aa64 	.word	0x2000aa64

08007ecc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ed4:	f7ff f970 	bl	80071b8 <xTaskGetTickCount>
 8007ed8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <prvSampleTimeNow+0x3c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d205      	bcs.n	8007ef0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ee4:	f000 f936 	bl	8008154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ef6:	4a04      	ldr	r2, [pc, #16]	; (8007f08 <prvSampleTimeNow+0x3c>)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007efc:	68fb      	ldr	r3, [r7, #12]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2000aa74 	.word	0x2000aa74

08007f0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d812      	bhi.n	8007f58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	e01b      	b.n	8007f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f46:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <prvInsertTimerInActiveList+0x7c>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4610      	mov	r0, r2
 8007f52:	f7fd fc96 	bl	8005882 <vListInsert>
 8007f56:	e012      	b.n	8007f7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d206      	bcs.n	8007f6e <prvInsertTimerInActiveList+0x62>
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d302      	bcc.n	8007f6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	e007      	b.n	8007f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <prvInsertTimerInActiveList+0x80>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3304      	adds	r3, #4
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f7fd fc82 	bl	8005882 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f7e:	697b      	ldr	r3, [r7, #20]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	2000aa68 	.word	0x2000aa68
 8007f8c:	2000aa64 	.word	0x2000aa64

08007f90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08e      	sub	sp, #56	; 0x38
 8007f94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f96:	e0ca      	b.n	800812e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da18      	bge.n	8007fd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	61fb      	str	r3, [r7, #28]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc6:	6850      	ldr	r0, [r2, #4]
 8007fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fca:	6892      	ldr	r2, [r2, #8]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f2c0 80aa 	blt.w	800812c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fd fc83 	bl	80058f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff ff6b 	bl	8007ecc <prvSampleTimeNow>
 8007ff6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	f200 8097 	bhi.w	800812e <prvProcessReceivedCommands+0x19e>
 8008000:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <prvProcessReceivedCommands+0x78>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	08008031 	.word	0x08008031
 800800c:	08008031 	.word	0x08008031
 8008010:	08008031 	.word	0x08008031
 8008014:	080080a5 	.word	0x080080a5
 8008018:	080080b9 	.word	0x080080b9
 800801c:	08008103 	.word	0x08008103
 8008020:	08008031 	.word	0x08008031
 8008024:	08008031 	.word	0x08008031
 8008028:	080080a5 	.word	0x080080a5
 800802c:	080080b9 	.word	0x080080b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	b2da      	uxtb	r2, r3
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	18d1      	adds	r1, r2, r3
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008050:	f7ff ff5c 	bl	8007f0c <prvInsertTimerInActiveList>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d069      	beq.n	800812e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008060:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d05e      	beq.n	800812e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	441a      	add	r2, r3
 8008078:	2300      	movs	r3, #0
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	2300      	movs	r3, #0
 800807e:	2100      	movs	r1, #0
 8008080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008082:	f7ff fe05 	bl	8007c90 <xTimerGenericCommand>
 8008086:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d14f      	bne.n	800812e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	61bb      	str	r3, [r7, #24]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080aa:	f023 0301 	bic.w	r3, r3, #1
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080b6:	e03a      	b.n	800812e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	617b      	str	r3, [r7, #20]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	18d1      	adds	r1, r2, r3
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fc:	f7ff ff06 	bl	8007f0c <prvInsertTimerInActiveList>
					break;
 8008100:	e015      	b.n	800812e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d103      	bne.n	8008118 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008112:	f7fd fa47 	bl	80055a4 <vPortFree>
 8008116:	e00a      	b.n	800812e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800811e:	f023 0301 	bic.w	r3, r3, #1
 8008122:	b2da      	uxtb	r2, r3
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800812a:	e000      	b.n	800812e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800812c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800812e:	4b08      	ldr	r3, [pc, #32]	; (8008150 <prvProcessReceivedCommands+0x1c0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	1d39      	adds	r1, r7, #4
 8008134:	2200      	movs	r2, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe f9e4 	bl	8006504 <xQueueReceive>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	f47f af2a 	bne.w	8007f98 <prvProcessReceivedCommands+0x8>
	}
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	3730      	adds	r7, #48	; 0x30
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	2000aa6c 	.word	0x2000aa6c

08008154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800815a:	e048      	b.n	80081ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800815c:	4b2d      	ldr	r3, [pc, #180]	; (8008214 <prvSwitchTimerLists+0xc0>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008166:	4b2b      	ldr	r3, [pc, #172]	; (8008214 <prvSwitchTimerLists+0xc0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3304      	adds	r3, #4
 8008174:	4618      	mov	r0, r3
 8008176:	f7fd fbbd 	bl	80058f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d02e      	beq.n	80081ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4413      	add	r3, r2
 8008198:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d90e      	bls.n	80081c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081ae:	4b19      	ldr	r3, [pc, #100]	; (8008214 <prvSwitchTimerLists+0xc0>)
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7fd fb62 	bl	8005882 <vListInsert>
 80081be:	e016      	b.n	80081ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081c0:	2300      	movs	r3, #0
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	2300      	movs	r3, #0
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	2100      	movs	r1, #0
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff fd60 	bl	8007c90 <xTimerGenericCommand>
 80081d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	603b      	str	r3, [r7, #0]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <prvSwitchTimerLists+0xc0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1b1      	bne.n	800815c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081f8:	4b06      	ldr	r3, [pc, #24]	; (8008214 <prvSwitchTimerLists+0xc0>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <prvSwitchTimerLists+0xc4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a04      	ldr	r2, [pc, #16]	; (8008214 <prvSwitchTimerLists+0xc0>)
 8008204:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008206:	4a04      	ldr	r2, [pc, #16]	; (8008218 <prvSwitchTimerLists+0xc4>)
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6013      	str	r3, [r2, #0]
}
 800820c:	bf00      	nop
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	2000aa64 	.word	0x2000aa64
 8008218:	2000aa68 	.word	0x2000aa68

0800821c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008222:	f7fd fcbf 	bl	8005ba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008226:	4b15      	ldr	r3, [pc, #84]	; (800827c <prvCheckForValidListAndQueue+0x60>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d120      	bne.n	8008270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800822e:	4814      	ldr	r0, [pc, #80]	; (8008280 <prvCheckForValidListAndQueue+0x64>)
 8008230:	f7fd fad6 	bl	80057e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008234:	4813      	ldr	r0, [pc, #76]	; (8008284 <prvCheckForValidListAndQueue+0x68>)
 8008236:	f7fd fad3 	bl	80057e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800823a:	4b13      	ldr	r3, [pc, #76]	; (8008288 <prvCheckForValidListAndQueue+0x6c>)
 800823c:	4a10      	ldr	r2, [pc, #64]	; (8008280 <prvCheckForValidListAndQueue+0x64>)
 800823e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008240:	4b12      	ldr	r3, [pc, #72]	; (800828c <prvCheckForValidListAndQueue+0x70>)
 8008242:	4a10      	ldr	r2, [pc, #64]	; (8008284 <prvCheckForValidListAndQueue+0x68>)
 8008244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008246:	2300      	movs	r3, #0
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	4b11      	ldr	r3, [pc, #68]	; (8008290 <prvCheckForValidListAndQueue+0x74>)
 800824c:	4a11      	ldr	r2, [pc, #68]	; (8008294 <prvCheckForValidListAndQueue+0x78>)
 800824e:	2110      	movs	r1, #16
 8008250:	200a      	movs	r0, #10
 8008252:	f7fd fe31 	bl	8005eb8 <xQueueGenericCreateStatic>
 8008256:	4603      	mov	r3, r0
 8008258:	4a08      	ldr	r2, [pc, #32]	; (800827c <prvCheckForValidListAndQueue+0x60>)
 800825a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800825c:	4b07      	ldr	r3, [pc, #28]	; (800827c <prvCheckForValidListAndQueue+0x60>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <prvCheckForValidListAndQueue+0x60>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	490b      	ldr	r1, [pc, #44]	; (8008298 <prvCheckForValidListAndQueue+0x7c>)
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fc5e 	bl	8006b2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008270:	f7fd fcc8 	bl	8005c04 <vPortExitCritical>
}
 8008274:	bf00      	nop
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	2000aa6c 	.word	0x2000aa6c
 8008280:	2000aa3c 	.word	0x2000aa3c
 8008284:	2000aa50 	.word	0x2000aa50
 8008288:	2000aa64 	.word	0x2000aa64
 800828c:	2000aa68 	.word	0x2000aa68
 8008290:	2000ab18 	.word	0x2000ab18
 8008294:	2000aa78 	.word	0x2000aa78
 8008298:	0800b7fc 	.word	0x0800b7fc

0800829c <atoi>:
 800829c:	220a      	movs	r2, #10
 800829e:	2100      	movs	r1, #0
 80082a0:	f001 b86a 	b.w	8009378 <strtol>

080082a4 <__errno>:
 80082a4:	4b01      	ldr	r3, [pc, #4]	; (80082ac <__errno+0x8>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000010 	.word	0x20000010

080082b0 <__sflush_r>:
 80082b0:	898a      	ldrh	r2, [r1, #12]
 80082b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	4605      	mov	r5, r0
 80082b8:	0710      	lsls	r0, r2, #28
 80082ba:	460c      	mov	r4, r1
 80082bc:	d458      	bmi.n	8008370 <__sflush_r+0xc0>
 80082be:	684b      	ldr	r3, [r1, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc05      	bgt.n	80082d0 <__sflush_r+0x20>
 80082c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc02      	bgt.n	80082d0 <__sflush_r+0x20>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	d0f9      	beq.n	80082ca <__sflush_r+0x1a>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082dc:	682f      	ldr	r7, [r5, #0]
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	d032      	beq.n	8008348 <__sflush_r+0x98>
 80082e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	075a      	lsls	r2, r3, #29
 80082e8:	d505      	bpl.n	80082f6 <__sflush_r+0x46>
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	1ac0      	subs	r0, r0, r3
 80082ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f0:	b10b      	cbz	r3, 80082f6 <__sflush_r+0x46>
 80082f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f4:	1ac0      	subs	r0, r0, r3
 80082f6:	2300      	movs	r3, #0
 80082f8:	4602      	mov	r2, r0
 80082fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082fc:	6a21      	ldr	r1, [r4, #32]
 80082fe:	4628      	mov	r0, r5
 8008300:	47b0      	blx	r6
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	d106      	bne.n	8008316 <__sflush_r+0x66>
 8008308:	6829      	ldr	r1, [r5, #0]
 800830a:	291d      	cmp	r1, #29
 800830c:	d82c      	bhi.n	8008368 <__sflush_r+0xb8>
 800830e:	4a2a      	ldr	r2, [pc, #168]	; (80083b8 <__sflush_r+0x108>)
 8008310:	40ca      	lsrs	r2, r1
 8008312:	07d6      	lsls	r6, r2, #31
 8008314:	d528      	bpl.n	8008368 <__sflush_r+0xb8>
 8008316:	2200      	movs	r2, #0
 8008318:	6062      	str	r2, [r4, #4]
 800831a:	04d9      	lsls	r1, r3, #19
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	6022      	str	r2, [r4, #0]
 8008320:	d504      	bpl.n	800832c <__sflush_r+0x7c>
 8008322:	1c42      	adds	r2, r0, #1
 8008324:	d101      	bne.n	800832a <__sflush_r+0x7a>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	b903      	cbnz	r3, 800832c <__sflush_r+0x7c>
 800832a:	6560      	str	r0, [r4, #84]	; 0x54
 800832c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800832e:	602f      	str	r7, [r5, #0]
 8008330:	2900      	cmp	r1, #0
 8008332:	d0ca      	beq.n	80082ca <__sflush_r+0x1a>
 8008334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008338:	4299      	cmp	r1, r3
 800833a:	d002      	beq.n	8008342 <__sflush_r+0x92>
 800833c:	4628      	mov	r0, r5
 800833e:	f000 f9bf 	bl	80086c0 <_free_r>
 8008342:	2000      	movs	r0, #0
 8008344:	6360      	str	r0, [r4, #52]	; 0x34
 8008346:	e7c1      	b.n	80082cc <__sflush_r+0x1c>
 8008348:	6a21      	ldr	r1, [r4, #32]
 800834a:	2301      	movs	r3, #1
 800834c:	4628      	mov	r0, r5
 800834e:	47b0      	blx	r6
 8008350:	1c41      	adds	r1, r0, #1
 8008352:	d1c7      	bne.n	80082e4 <__sflush_r+0x34>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0c4      	beq.n	80082e4 <__sflush_r+0x34>
 800835a:	2b1d      	cmp	r3, #29
 800835c:	d001      	beq.n	8008362 <__sflush_r+0xb2>
 800835e:	2b16      	cmp	r3, #22
 8008360:	d101      	bne.n	8008366 <__sflush_r+0xb6>
 8008362:	602f      	str	r7, [r5, #0]
 8008364:	e7b1      	b.n	80082ca <__sflush_r+0x1a>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	e7ad      	b.n	80082cc <__sflush_r+0x1c>
 8008370:	690f      	ldr	r7, [r1, #16]
 8008372:	2f00      	cmp	r7, #0
 8008374:	d0a9      	beq.n	80082ca <__sflush_r+0x1a>
 8008376:	0793      	lsls	r3, r2, #30
 8008378:	680e      	ldr	r6, [r1, #0]
 800837a:	bf08      	it	eq
 800837c:	694b      	ldreq	r3, [r1, #20]
 800837e:	600f      	str	r7, [r1, #0]
 8008380:	bf18      	it	ne
 8008382:	2300      	movne	r3, #0
 8008384:	eba6 0807 	sub.w	r8, r6, r7
 8008388:	608b      	str	r3, [r1, #8]
 800838a:	f1b8 0f00 	cmp.w	r8, #0
 800838e:	dd9c      	ble.n	80082ca <__sflush_r+0x1a>
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008394:	4643      	mov	r3, r8
 8008396:	463a      	mov	r2, r7
 8008398:	4628      	mov	r0, r5
 800839a:	47b0      	blx	r6
 800839c:	2800      	cmp	r0, #0
 800839e:	dc06      	bgt.n	80083ae <__sflush_r+0xfe>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a6:	81a3      	strh	r3, [r4, #12]
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ac:	e78e      	b.n	80082cc <__sflush_r+0x1c>
 80083ae:	4407      	add	r7, r0
 80083b0:	eba8 0800 	sub.w	r8, r8, r0
 80083b4:	e7e9      	b.n	800838a <__sflush_r+0xda>
 80083b6:	bf00      	nop
 80083b8:	20400001 	.word	0x20400001

080083bc <_fflush_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	690b      	ldr	r3, [r1, #16]
 80083c0:	4605      	mov	r5, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b913      	cbnz	r3, 80083cc <_fflush_r+0x10>
 80083c6:	2500      	movs	r5, #0
 80083c8:	4628      	mov	r0, r5
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	b118      	cbz	r0, 80083d6 <_fflush_r+0x1a>
 80083ce:	6983      	ldr	r3, [r0, #24]
 80083d0:	b90b      	cbnz	r3, 80083d6 <_fflush_r+0x1a>
 80083d2:	f000 f899 	bl	8008508 <__sinit>
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <_fflush_r+0x6c>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	d11b      	bne.n	8008414 <_fflush_r+0x58>
 80083dc:	686c      	ldr	r4, [r5, #4]
 80083de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0ef      	beq.n	80083c6 <_fflush_r+0xa>
 80083e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e8:	07d0      	lsls	r0, r2, #31
 80083ea:	d404      	bmi.n	80083f6 <_fflush_r+0x3a>
 80083ec:	0599      	lsls	r1, r3, #22
 80083ee:	d402      	bmi.n	80083f6 <_fflush_r+0x3a>
 80083f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083f2:	f000 f94c 	bl	800868e <__retarget_lock_acquire_recursive>
 80083f6:	4628      	mov	r0, r5
 80083f8:	4621      	mov	r1, r4
 80083fa:	f7ff ff59 	bl	80082b0 <__sflush_r>
 80083fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008400:	07da      	lsls	r2, r3, #31
 8008402:	4605      	mov	r5, r0
 8008404:	d4e0      	bmi.n	80083c8 <_fflush_r+0xc>
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	059b      	lsls	r3, r3, #22
 800840a:	d4dd      	bmi.n	80083c8 <_fflush_r+0xc>
 800840c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840e:	f000 f93f 	bl	8008690 <__retarget_lock_release_recursive>
 8008412:	e7d9      	b.n	80083c8 <_fflush_r+0xc>
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <_fflush_r+0x70>)
 8008416:	429c      	cmp	r4, r3
 8008418:	d101      	bne.n	800841e <_fflush_r+0x62>
 800841a:	68ac      	ldr	r4, [r5, #8]
 800841c:	e7df      	b.n	80083de <_fflush_r+0x22>
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <_fflush_r+0x74>)
 8008420:	429c      	cmp	r4, r3
 8008422:	bf08      	it	eq
 8008424:	68ec      	ldreq	r4, [r5, #12]
 8008426:	e7da      	b.n	80083de <_fflush_r+0x22>
 8008428:	0800b8d0 	.word	0x0800b8d0
 800842c:	0800b8f0 	.word	0x0800b8f0
 8008430:	0800b8b0 	.word	0x0800b8b0

08008434 <fflush>:
 8008434:	4601      	mov	r1, r0
 8008436:	b920      	cbnz	r0, 8008442 <fflush+0xe>
 8008438:	4b04      	ldr	r3, [pc, #16]	; (800844c <fflush+0x18>)
 800843a:	4905      	ldr	r1, [pc, #20]	; (8008450 <fflush+0x1c>)
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	f000 b8e1 	b.w	8008604 <_fwalk_reent>
 8008442:	4b04      	ldr	r3, [pc, #16]	; (8008454 <fflush+0x20>)
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	f7ff bfb9 	b.w	80083bc <_fflush_r>
 800844a:	bf00      	nop
 800844c:	0800b910 	.word	0x0800b910
 8008450:	080083bd 	.word	0x080083bd
 8008454:	20000010 	.word	0x20000010

08008458 <std>:
 8008458:	2300      	movs	r3, #0
 800845a:	b510      	push	{r4, lr}
 800845c:	4604      	mov	r4, r0
 800845e:	e9c0 3300 	strd	r3, r3, [r0]
 8008462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008466:	6083      	str	r3, [r0, #8]
 8008468:	8181      	strh	r1, [r0, #12]
 800846a:	6643      	str	r3, [r0, #100]	; 0x64
 800846c:	81c2      	strh	r2, [r0, #14]
 800846e:	6183      	str	r3, [r0, #24]
 8008470:	4619      	mov	r1, r3
 8008472:	2208      	movs	r2, #8
 8008474:	305c      	adds	r0, #92	; 0x5c
 8008476:	f000 f91a 	bl	80086ae <memset>
 800847a:	4b05      	ldr	r3, [pc, #20]	; (8008490 <std+0x38>)
 800847c:	6263      	str	r3, [r4, #36]	; 0x24
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <std+0x3c>)
 8008480:	62a3      	str	r3, [r4, #40]	; 0x28
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <std+0x40>)
 8008484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008486:	4b05      	ldr	r3, [pc, #20]	; (800849c <std+0x44>)
 8008488:	6224      	str	r4, [r4, #32]
 800848a:	6323      	str	r3, [r4, #48]	; 0x30
 800848c:	bd10      	pop	{r4, pc}
 800848e:	bf00      	nop
 8008490:	08009179 	.word	0x08009179
 8008494:	0800919b 	.word	0x0800919b
 8008498:	080091d3 	.word	0x080091d3
 800849c:	080091f7 	.word	0x080091f7

080084a0 <_cleanup_r>:
 80084a0:	4901      	ldr	r1, [pc, #4]	; (80084a8 <_cleanup_r+0x8>)
 80084a2:	f000 b8af 	b.w	8008604 <_fwalk_reent>
 80084a6:	bf00      	nop
 80084a8:	080083bd 	.word	0x080083bd

080084ac <__sfmoreglue>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	1e4a      	subs	r2, r1, #1
 80084b0:	2568      	movs	r5, #104	; 0x68
 80084b2:	4355      	muls	r5, r2
 80084b4:	460e      	mov	r6, r1
 80084b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084ba:	f000 f951 	bl	8008760 <_malloc_r>
 80084be:	4604      	mov	r4, r0
 80084c0:	b140      	cbz	r0, 80084d4 <__sfmoreglue+0x28>
 80084c2:	2100      	movs	r1, #0
 80084c4:	e9c0 1600 	strd	r1, r6, [r0]
 80084c8:	300c      	adds	r0, #12
 80084ca:	60a0      	str	r0, [r4, #8]
 80084cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084d0:	f000 f8ed 	bl	80086ae <memset>
 80084d4:	4620      	mov	r0, r4
 80084d6:	bd70      	pop	{r4, r5, r6, pc}

080084d8 <__sfp_lock_acquire>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__sfp_lock_acquire+0x8>)
 80084da:	f000 b8d8 	b.w	800868e <__retarget_lock_acquire_recursive>
 80084de:	bf00      	nop
 80084e0:	2000be18 	.word	0x2000be18

080084e4 <__sfp_lock_release>:
 80084e4:	4801      	ldr	r0, [pc, #4]	; (80084ec <__sfp_lock_release+0x8>)
 80084e6:	f000 b8d3 	b.w	8008690 <__retarget_lock_release_recursive>
 80084ea:	bf00      	nop
 80084ec:	2000be18 	.word	0x2000be18

080084f0 <__sinit_lock_acquire>:
 80084f0:	4801      	ldr	r0, [pc, #4]	; (80084f8 <__sinit_lock_acquire+0x8>)
 80084f2:	f000 b8cc 	b.w	800868e <__retarget_lock_acquire_recursive>
 80084f6:	bf00      	nop
 80084f8:	2000be13 	.word	0x2000be13

080084fc <__sinit_lock_release>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__sinit_lock_release+0x8>)
 80084fe:	f000 b8c7 	b.w	8008690 <__retarget_lock_release_recursive>
 8008502:	bf00      	nop
 8008504:	2000be13 	.word	0x2000be13

08008508 <__sinit>:
 8008508:	b510      	push	{r4, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	f7ff fff0 	bl	80084f0 <__sinit_lock_acquire>
 8008510:	69a3      	ldr	r3, [r4, #24]
 8008512:	b11b      	cbz	r3, 800851c <__sinit+0x14>
 8008514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008518:	f7ff bff0 	b.w	80084fc <__sinit_lock_release>
 800851c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008520:	6523      	str	r3, [r4, #80]	; 0x50
 8008522:	4b13      	ldr	r3, [pc, #76]	; (8008570 <__sinit+0x68>)
 8008524:	4a13      	ldr	r2, [pc, #76]	; (8008574 <__sinit+0x6c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	62a2      	str	r2, [r4, #40]	; 0x28
 800852a:	42a3      	cmp	r3, r4
 800852c:	bf04      	itt	eq
 800852e:	2301      	moveq	r3, #1
 8008530:	61a3      	streq	r3, [r4, #24]
 8008532:	4620      	mov	r0, r4
 8008534:	f000 f820 	bl	8008578 <__sfp>
 8008538:	6060      	str	r0, [r4, #4]
 800853a:	4620      	mov	r0, r4
 800853c:	f000 f81c 	bl	8008578 <__sfp>
 8008540:	60a0      	str	r0, [r4, #8]
 8008542:	4620      	mov	r0, r4
 8008544:	f000 f818 	bl	8008578 <__sfp>
 8008548:	2200      	movs	r2, #0
 800854a:	60e0      	str	r0, [r4, #12]
 800854c:	2104      	movs	r1, #4
 800854e:	6860      	ldr	r0, [r4, #4]
 8008550:	f7ff ff82 	bl	8008458 <std>
 8008554:	68a0      	ldr	r0, [r4, #8]
 8008556:	2201      	movs	r2, #1
 8008558:	2109      	movs	r1, #9
 800855a:	f7ff ff7d 	bl	8008458 <std>
 800855e:	68e0      	ldr	r0, [r4, #12]
 8008560:	2202      	movs	r2, #2
 8008562:	2112      	movs	r1, #18
 8008564:	f7ff ff78 	bl	8008458 <std>
 8008568:	2301      	movs	r3, #1
 800856a:	61a3      	str	r3, [r4, #24]
 800856c:	e7d2      	b.n	8008514 <__sinit+0xc>
 800856e:	bf00      	nop
 8008570:	0800b910 	.word	0x0800b910
 8008574:	080084a1 	.word	0x080084a1

08008578 <__sfp>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	4607      	mov	r7, r0
 800857c:	f7ff ffac 	bl	80084d8 <__sfp_lock_acquire>
 8008580:	4b1e      	ldr	r3, [pc, #120]	; (80085fc <__sfp+0x84>)
 8008582:	681e      	ldr	r6, [r3, #0]
 8008584:	69b3      	ldr	r3, [r6, #24]
 8008586:	b913      	cbnz	r3, 800858e <__sfp+0x16>
 8008588:	4630      	mov	r0, r6
 800858a:	f7ff ffbd 	bl	8008508 <__sinit>
 800858e:	3648      	adds	r6, #72	; 0x48
 8008590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008594:	3b01      	subs	r3, #1
 8008596:	d503      	bpl.n	80085a0 <__sfp+0x28>
 8008598:	6833      	ldr	r3, [r6, #0]
 800859a:	b30b      	cbz	r3, 80085e0 <__sfp+0x68>
 800859c:	6836      	ldr	r6, [r6, #0]
 800859e:	e7f7      	b.n	8008590 <__sfp+0x18>
 80085a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085a4:	b9d5      	cbnz	r5, 80085dc <__sfp+0x64>
 80085a6:	4b16      	ldr	r3, [pc, #88]	; (8008600 <__sfp+0x88>)
 80085a8:	60e3      	str	r3, [r4, #12]
 80085aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085ae:	6665      	str	r5, [r4, #100]	; 0x64
 80085b0:	f000 f86c 	bl	800868c <__retarget_lock_init_recursive>
 80085b4:	f7ff ff96 	bl	80084e4 <__sfp_lock_release>
 80085b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085c0:	6025      	str	r5, [r4, #0]
 80085c2:	61a5      	str	r5, [r4, #24]
 80085c4:	2208      	movs	r2, #8
 80085c6:	4629      	mov	r1, r5
 80085c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085cc:	f000 f86f 	bl	80086ae <memset>
 80085d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085d8:	4620      	mov	r0, r4
 80085da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085dc:	3468      	adds	r4, #104	; 0x68
 80085de:	e7d9      	b.n	8008594 <__sfp+0x1c>
 80085e0:	2104      	movs	r1, #4
 80085e2:	4638      	mov	r0, r7
 80085e4:	f7ff ff62 	bl	80084ac <__sfmoreglue>
 80085e8:	4604      	mov	r4, r0
 80085ea:	6030      	str	r0, [r6, #0]
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d1d5      	bne.n	800859c <__sfp+0x24>
 80085f0:	f7ff ff78 	bl	80084e4 <__sfp_lock_release>
 80085f4:	230c      	movs	r3, #12
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	e7ee      	b.n	80085d8 <__sfp+0x60>
 80085fa:	bf00      	nop
 80085fc:	0800b910 	.word	0x0800b910
 8008600:	ffff0001 	.word	0xffff0001

08008604 <_fwalk_reent>:
 8008604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008608:	4606      	mov	r6, r0
 800860a:	4688      	mov	r8, r1
 800860c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008610:	2700      	movs	r7, #0
 8008612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008616:	f1b9 0901 	subs.w	r9, r9, #1
 800861a:	d505      	bpl.n	8008628 <_fwalk_reent+0x24>
 800861c:	6824      	ldr	r4, [r4, #0]
 800861e:	2c00      	cmp	r4, #0
 8008620:	d1f7      	bne.n	8008612 <_fwalk_reent+0xe>
 8008622:	4638      	mov	r0, r7
 8008624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008628:	89ab      	ldrh	r3, [r5, #12]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d907      	bls.n	800863e <_fwalk_reent+0x3a>
 800862e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008632:	3301      	adds	r3, #1
 8008634:	d003      	beq.n	800863e <_fwalk_reent+0x3a>
 8008636:	4629      	mov	r1, r5
 8008638:	4630      	mov	r0, r6
 800863a:	47c0      	blx	r8
 800863c:	4307      	orrs	r7, r0
 800863e:	3568      	adds	r5, #104	; 0x68
 8008640:	e7e9      	b.n	8008616 <_fwalk_reent+0x12>
	...

08008644 <__libc_init_array>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	4d0d      	ldr	r5, [pc, #52]	; (800867c <__libc_init_array+0x38>)
 8008648:	4c0d      	ldr	r4, [pc, #52]	; (8008680 <__libc_init_array+0x3c>)
 800864a:	1b64      	subs	r4, r4, r5
 800864c:	10a4      	asrs	r4, r4, #2
 800864e:	2600      	movs	r6, #0
 8008650:	42a6      	cmp	r6, r4
 8008652:	d109      	bne.n	8008668 <__libc_init_array+0x24>
 8008654:	4d0b      	ldr	r5, [pc, #44]	; (8008684 <__libc_init_array+0x40>)
 8008656:	4c0c      	ldr	r4, [pc, #48]	; (8008688 <__libc_init_array+0x44>)
 8008658:	f003 f80e 	bl	800b678 <_init>
 800865c:	1b64      	subs	r4, r4, r5
 800865e:	10a4      	asrs	r4, r4, #2
 8008660:	2600      	movs	r6, #0
 8008662:	42a6      	cmp	r6, r4
 8008664:	d105      	bne.n	8008672 <__libc_init_array+0x2e>
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	f855 3b04 	ldr.w	r3, [r5], #4
 800866c:	4798      	blx	r3
 800866e:	3601      	adds	r6, #1
 8008670:	e7ee      	b.n	8008650 <__libc_init_array+0xc>
 8008672:	f855 3b04 	ldr.w	r3, [r5], #4
 8008676:	4798      	blx	r3
 8008678:	3601      	adds	r6, #1
 800867a:	e7f2      	b.n	8008662 <__libc_init_array+0x1e>
 800867c:	0800bc9c 	.word	0x0800bc9c
 8008680:	0800bc9c 	.word	0x0800bc9c
 8008684:	0800bc9c 	.word	0x0800bc9c
 8008688:	0800bca0 	.word	0x0800bca0

0800868c <__retarget_lock_init_recursive>:
 800868c:	4770      	bx	lr

0800868e <__retarget_lock_acquire_recursive>:
 800868e:	4770      	bx	lr

08008690 <__retarget_lock_release_recursive>:
 8008690:	4770      	bx	lr

08008692 <memcpy>:
 8008692:	440a      	add	r2, r1
 8008694:	4291      	cmp	r1, r2
 8008696:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800869a:	d100      	bne.n	800869e <memcpy+0xc>
 800869c:	4770      	bx	lr
 800869e:	b510      	push	{r4, lr}
 80086a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086a8:	4291      	cmp	r1, r2
 80086aa:	d1f9      	bne.n	80086a0 <memcpy+0xe>
 80086ac:	bd10      	pop	{r4, pc}

080086ae <memset>:
 80086ae:	4402      	add	r2, r0
 80086b0:	4603      	mov	r3, r0
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d100      	bne.n	80086b8 <memset+0xa>
 80086b6:	4770      	bx	lr
 80086b8:	f803 1b01 	strb.w	r1, [r3], #1
 80086bc:	e7f9      	b.n	80086b2 <memset+0x4>
	...

080086c0 <_free_r>:
 80086c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086c2:	2900      	cmp	r1, #0
 80086c4:	d048      	beq.n	8008758 <_free_r+0x98>
 80086c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ca:	9001      	str	r0, [sp, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f1a1 0404 	sub.w	r4, r1, #4
 80086d2:	bfb8      	it	lt
 80086d4:	18e4      	addlt	r4, r4, r3
 80086d6:	f001 fd2b 	bl	800a130 <__malloc_lock>
 80086da:	4a20      	ldr	r2, [pc, #128]	; (800875c <_free_r+0x9c>)
 80086dc:	9801      	ldr	r0, [sp, #4]
 80086de:	6813      	ldr	r3, [r2, #0]
 80086e0:	4615      	mov	r5, r2
 80086e2:	b933      	cbnz	r3, 80086f2 <_free_r+0x32>
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	6014      	str	r4, [r2, #0]
 80086e8:	b003      	add	sp, #12
 80086ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ee:	f001 bd25 	b.w	800a13c <__malloc_unlock>
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	d90b      	bls.n	800870e <_free_r+0x4e>
 80086f6:	6821      	ldr	r1, [r4, #0]
 80086f8:	1862      	adds	r2, r4, r1
 80086fa:	4293      	cmp	r3, r2
 80086fc:	bf04      	itt	eq
 80086fe:	681a      	ldreq	r2, [r3, #0]
 8008700:	685b      	ldreq	r3, [r3, #4]
 8008702:	6063      	str	r3, [r4, #4]
 8008704:	bf04      	itt	eq
 8008706:	1852      	addeq	r2, r2, r1
 8008708:	6022      	streq	r2, [r4, #0]
 800870a:	602c      	str	r4, [r5, #0]
 800870c:	e7ec      	b.n	80086e8 <_free_r+0x28>
 800870e:	461a      	mov	r2, r3
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	b10b      	cbz	r3, 8008718 <_free_r+0x58>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d9fa      	bls.n	800870e <_free_r+0x4e>
 8008718:	6811      	ldr	r1, [r2, #0]
 800871a:	1855      	adds	r5, r2, r1
 800871c:	42a5      	cmp	r5, r4
 800871e:	d10b      	bne.n	8008738 <_free_r+0x78>
 8008720:	6824      	ldr	r4, [r4, #0]
 8008722:	4421      	add	r1, r4
 8008724:	1854      	adds	r4, r2, r1
 8008726:	42a3      	cmp	r3, r4
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	d1dd      	bne.n	80086e8 <_free_r+0x28>
 800872c:	681c      	ldr	r4, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	6053      	str	r3, [r2, #4]
 8008732:	4421      	add	r1, r4
 8008734:	6011      	str	r1, [r2, #0]
 8008736:	e7d7      	b.n	80086e8 <_free_r+0x28>
 8008738:	d902      	bls.n	8008740 <_free_r+0x80>
 800873a:	230c      	movs	r3, #12
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	e7d3      	b.n	80086e8 <_free_r+0x28>
 8008740:	6825      	ldr	r5, [r4, #0]
 8008742:	1961      	adds	r1, r4, r5
 8008744:	428b      	cmp	r3, r1
 8008746:	bf04      	itt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	bf04      	itt	eq
 8008750:	1949      	addeq	r1, r1, r5
 8008752:	6021      	streq	r1, [r4, #0]
 8008754:	6054      	str	r4, [r2, #4]
 8008756:	e7c7      	b.n	80086e8 <_free_r+0x28>
 8008758:	b003      	add	sp, #12
 800875a:	bd30      	pop	{r4, r5, pc}
 800875c:	2000ab68 	.word	0x2000ab68

08008760 <_malloc_r>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	1ccd      	adds	r5, r1, #3
 8008764:	f025 0503 	bic.w	r5, r5, #3
 8008768:	3508      	adds	r5, #8
 800876a:	2d0c      	cmp	r5, #12
 800876c:	bf38      	it	cc
 800876e:	250c      	movcc	r5, #12
 8008770:	2d00      	cmp	r5, #0
 8008772:	4606      	mov	r6, r0
 8008774:	db01      	blt.n	800877a <_malloc_r+0x1a>
 8008776:	42a9      	cmp	r1, r5
 8008778:	d903      	bls.n	8008782 <_malloc_r+0x22>
 800877a:	230c      	movs	r3, #12
 800877c:	6033      	str	r3, [r6, #0]
 800877e:	2000      	movs	r0, #0
 8008780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008782:	f001 fcd5 	bl	800a130 <__malloc_lock>
 8008786:	4921      	ldr	r1, [pc, #132]	; (800880c <_malloc_r+0xac>)
 8008788:	680a      	ldr	r2, [r1, #0]
 800878a:	4614      	mov	r4, r2
 800878c:	b99c      	cbnz	r4, 80087b6 <_malloc_r+0x56>
 800878e:	4f20      	ldr	r7, [pc, #128]	; (8008810 <_malloc_r+0xb0>)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	b923      	cbnz	r3, 800879e <_malloc_r+0x3e>
 8008794:	4621      	mov	r1, r4
 8008796:	4630      	mov	r0, r6
 8008798:	f000 fcbe 	bl	8009118 <_sbrk_r>
 800879c:	6038      	str	r0, [r7, #0]
 800879e:	4629      	mov	r1, r5
 80087a0:	4630      	mov	r0, r6
 80087a2:	f000 fcb9 	bl	8009118 <_sbrk_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	d123      	bne.n	80087f2 <_malloc_r+0x92>
 80087aa:	230c      	movs	r3, #12
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	4630      	mov	r0, r6
 80087b0:	f001 fcc4 	bl	800a13c <__malloc_unlock>
 80087b4:	e7e3      	b.n	800877e <_malloc_r+0x1e>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	1b5b      	subs	r3, r3, r5
 80087ba:	d417      	bmi.n	80087ec <_malloc_r+0x8c>
 80087bc:	2b0b      	cmp	r3, #11
 80087be:	d903      	bls.n	80087c8 <_malloc_r+0x68>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	441c      	add	r4, r3
 80087c4:	6025      	str	r5, [r4, #0]
 80087c6:	e004      	b.n	80087d2 <_malloc_r+0x72>
 80087c8:	6863      	ldr	r3, [r4, #4]
 80087ca:	42a2      	cmp	r2, r4
 80087cc:	bf0c      	ite	eq
 80087ce:	600b      	streq	r3, [r1, #0]
 80087d0:	6053      	strne	r3, [r2, #4]
 80087d2:	4630      	mov	r0, r6
 80087d4:	f001 fcb2 	bl	800a13c <__malloc_unlock>
 80087d8:	f104 000b 	add.w	r0, r4, #11
 80087dc:	1d23      	adds	r3, r4, #4
 80087de:	f020 0007 	bic.w	r0, r0, #7
 80087e2:	1ac2      	subs	r2, r0, r3
 80087e4:	d0cc      	beq.n	8008780 <_malloc_r+0x20>
 80087e6:	1a1b      	subs	r3, r3, r0
 80087e8:	50a3      	str	r3, [r4, r2]
 80087ea:	e7c9      	b.n	8008780 <_malloc_r+0x20>
 80087ec:	4622      	mov	r2, r4
 80087ee:	6864      	ldr	r4, [r4, #4]
 80087f0:	e7cc      	b.n	800878c <_malloc_r+0x2c>
 80087f2:	1cc4      	adds	r4, r0, #3
 80087f4:	f024 0403 	bic.w	r4, r4, #3
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d0e3      	beq.n	80087c4 <_malloc_r+0x64>
 80087fc:	1a21      	subs	r1, r4, r0
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 fc8a 	bl	8009118 <_sbrk_r>
 8008804:	3001      	adds	r0, #1
 8008806:	d1dd      	bne.n	80087c4 <_malloc_r+0x64>
 8008808:	e7cf      	b.n	80087aa <_malloc_r+0x4a>
 800880a:	bf00      	nop
 800880c:	2000ab68 	.word	0x2000ab68
 8008810:	2000ab6c 	.word	0x2000ab6c

08008814 <__cvt>:
 8008814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	ec55 4b10 	vmov	r4, r5, d0
 800881c:	2d00      	cmp	r5, #0
 800881e:	460e      	mov	r6, r1
 8008820:	4619      	mov	r1, r3
 8008822:	462b      	mov	r3, r5
 8008824:	bfbb      	ittet	lt
 8008826:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800882a:	461d      	movlt	r5, r3
 800882c:	2300      	movge	r3, #0
 800882e:	232d      	movlt	r3, #45	; 0x2d
 8008830:	700b      	strb	r3, [r1, #0]
 8008832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008834:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008838:	4691      	mov	r9, r2
 800883a:	f023 0820 	bic.w	r8, r3, #32
 800883e:	bfbc      	itt	lt
 8008840:	4622      	movlt	r2, r4
 8008842:	4614      	movlt	r4, r2
 8008844:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008848:	d005      	beq.n	8008856 <__cvt+0x42>
 800884a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800884e:	d100      	bne.n	8008852 <__cvt+0x3e>
 8008850:	3601      	adds	r6, #1
 8008852:	2102      	movs	r1, #2
 8008854:	e000      	b.n	8008858 <__cvt+0x44>
 8008856:	2103      	movs	r1, #3
 8008858:	ab03      	add	r3, sp, #12
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	ab02      	add	r3, sp, #8
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	ec45 4b10 	vmov	d0, r4, r5
 8008864:	4653      	mov	r3, sl
 8008866:	4632      	mov	r2, r6
 8008868:	f000 fe3e 	bl	80094e8 <_dtoa_r>
 800886c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008870:	4607      	mov	r7, r0
 8008872:	d102      	bne.n	800887a <__cvt+0x66>
 8008874:	f019 0f01 	tst.w	r9, #1
 8008878:	d022      	beq.n	80088c0 <__cvt+0xac>
 800887a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800887e:	eb07 0906 	add.w	r9, r7, r6
 8008882:	d110      	bne.n	80088a6 <__cvt+0x92>
 8008884:	783b      	ldrb	r3, [r7, #0]
 8008886:	2b30      	cmp	r3, #48	; 0x30
 8008888:	d10a      	bne.n	80088a0 <__cvt+0x8c>
 800888a:	2200      	movs	r2, #0
 800888c:	2300      	movs	r3, #0
 800888e:	4620      	mov	r0, r4
 8008890:	4629      	mov	r1, r5
 8008892:	f7f8 f921 	bl	8000ad8 <__aeabi_dcmpeq>
 8008896:	b918      	cbnz	r0, 80088a0 <__cvt+0x8c>
 8008898:	f1c6 0601 	rsb	r6, r6, #1
 800889c:	f8ca 6000 	str.w	r6, [sl]
 80088a0:	f8da 3000 	ldr.w	r3, [sl]
 80088a4:	4499      	add	r9, r3
 80088a6:	2200      	movs	r2, #0
 80088a8:	2300      	movs	r3, #0
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7f8 f913 	bl	8000ad8 <__aeabi_dcmpeq>
 80088b2:	b108      	cbz	r0, 80088b8 <__cvt+0xa4>
 80088b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80088b8:	2230      	movs	r2, #48	; 0x30
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	454b      	cmp	r3, r9
 80088be:	d307      	bcc.n	80088d0 <__cvt+0xbc>
 80088c0:	9b03      	ldr	r3, [sp, #12]
 80088c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088c4:	1bdb      	subs	r3, r3, r7
 80088c6:	4638      	mov	r0, r7
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	b004      	add	sp, #16
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	1c59      	adds	r1, r3, #1
 80088d2:	9103      	str	r1, [sp, #12]
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e7f0      	b.n	80088ba <__cvt+0xa6>

080088d8 <__exponent>:
 80088d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088da:	4603      	mov	r3, r0
 80088dc:	2900      	cmp	r1, #0
 80088de:	bfb8      	it	lt
 80088e0:	4249      	neglt	r1, r1
 80088e2:	f803 2b02 	strb.w	r2, [r3], #2
 80088e6:	bfb4      	ite	lt
 80088e8:	222d      	movlt	r2, #45	; 0x2d
 80088ea:	222b      	movge	r2, #43	; 0x2b
 80088ec:	2909      	cmp	r1, #9
 80088ee:	7042      	strb	r2, [r0, #1]
 80088f0:	dd2a      	ble.n	8008948 <__exponent+0x70>
 80088f2:	f10d 0407 	add.w	r4, sp, #7
 80088f6:	46a4      	mov	ip, r4
 80088f8:	270a      	movs	r7, #10
 80088fa:	46a6      	mov	lr, r4
 80088fc:	460a      	mov	r2, r1
 80088fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8008902:	fb07 1516 	mls	r5, r7, r6, r1
 8008906:	3530      	adds	r5, #48	; 0x30
 8008908:	2a63      	cmp	r2, #99	; 0x63
 800890a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800890e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008912:	4631      	mov	r1, r6
 8008914:	dcf1      	bgt.n	80088fa <__exponent+0x22>
 8008916:	3130      	adds	r1, #48	; 0x30
 8008918:	f1ae 0502 	sub.w	r5, lr, #2
 800891c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008920:	1c44      	adds	r4, r0, #1
 8008922:	4629      	mov	r1, r5
 8008924:	4561      	cmp	r1, ip
 8008926:	d30a      	bcc.n	800893e <__exponent+0x66>
 8008928:	f10d 0209 	add.w	r2, sp, #9
 800892c:	eba2 020e 	sub.w	r2, r2, lr
 8008930:	4565      	cmp	r5, ip
 8008932:	bf88      	it	hi
 8008934:	2200      	movhi	r2, #0
 8008936:	4413      	add	r3, r2
 8008938:	1a18      	subs	r0, r3, r0
 800893a:	b003      	add	sp, #12
 800893c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008942:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008946:	e7ed      	b.n	8008924 <__exponent+0x4c>
 8008948:	2330      	movs	r3, #48	; 0x30
 800894a:	3130      	adds	r1, #48	; 0x30
 800894c:	7083      	strb	r3, [r0, #2]
 800894e:	70c1      	strb	r1, [r0, #3]
 8008950:	1d03      	adds	r3, r0, #4
 8008952:	e7f1      	b.n	8008938 <__exponent+0x60>

08008954 <_printf_float>:
 8008954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	ed2d 8b02 	vpush	{d8}
 800895c:	b08d      	sub	sp, #52	; 0x34
 800895e:	460c      	mov	r4, r1
 8008960:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008964:	4616      	mov	r6, r2
 8008966:	461f      	mov	r7, r3
 8008968:	4605      	mov	r5, r0
 800896a:	f001 fba9 	bl	800a0c0 <_localeconv_r>
 800896e:	f8d0 a000 	ldr.w	sl, [r0]
 8008972:	4650      	mov	r0, sl
 8008974:	f7f7 fc34 	bl	80001e0 <strlen>
 8008978:	2300      	movs	r3, #0
 800897a:	930a      	str	r3, [sp, #40]	; 0x28
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	9305      	str	r3, [sp, #20]
 8008980:	f8d8 3000 	ldr.w	r3, [r8]
 8008984:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008988:	3307      	adds	r3, #7
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	f103 0208 	add.w	r2, r3, #8
 8008992:	f8c8 2000 	str.w	r2, [r8]
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800899e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80089a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089a6:	9307      	str	r3, [sp, #28]
 80089a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80089ac:	ee08 0a10 	vmov	s16, r0
 80089b0:	4b9f      	ldr	r3, [pc, #636]	; (8008c30 <_printf_float+0x2dc>)
 80089b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ba:	f7f8 f8bf 	bl	8000b3c <__aeabi_dcmpun>
 80089be:	bb88      	cbnz	r0, 8008a24 <_printf_float+0xd0>
 80089c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089c4:	4b9a      	ldr	r3, [pc, #616]	; (8008c30 <_printf_float+0x2dc>)
 80089c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ca:	f7f8 f899 	bl	8000b00 <__aeabi_dcmple>
 80089ce:	bb48      	cbnz	r0, 8008a24 <_printf_float+0xd0>
 80089d0:	2200      	movs	r2, #0
 80089d2:	2300      	movs	r3, #0
 80089d4:	4640      	mov	r0, r8
 80089d6:	4649      	mov	r1, r9
 80089d8:	f7f8 f888 	bl	8000aec <__aeabi_dcmplt>
 80089dc:	b110      	cbz	r0, 80089e4 <_printf_float+0x90>
 80089de:	232d      	movs	r3, #45	; 0x2d
 80089e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e4:	4b93      	ldr	r3, [pc, #588]	; (8008c34 <_printf_float+0x2e0>)
 80089e6:	4894      	ldr	r0, [pc, #592]	; (8008c38 <_printf_float+0x2e4>)
 80089e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80089ec:	bf94      	ite	ls
 80089ee:	4698      	movls	r8, r3
 80089f0:	4680      	movhi	r8, r0
 80089f2:	2303      	movs	r3, #3
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	9b05      	ldr	r3, [sp, #20]
 80089f8:	f023 0204 	bic.w	r2, r3, #4
 80089fc:	6022      	str	r2, [r4, #0]
 80089fe:	f04f 0900 	mov.w	r9, #0
 8008a02:	9700      	str	r7, [sp, #0]
 8008a04:	4633      	mov	r3, r6
 8008a06:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f000 f9d8 	bl	8008dc0 <_printf_common>
 8008a10:	3001      	adds	r0, #1
 8008a12:	f040 8090 	bne.w	8008b36 <_printf_float+0x1e2>
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a1a:	b00d      	add	sp, #52	; 0x34
 8008a1c:	ecbd 8b02 	vpop	{d8}
 8008a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a24:	4642      	mov	r2, r8
 8008a26:	464b      	mov	r3, r9
 8008a28:	4640      	mov	r0, r8
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	f7f8 f886 	bl	8000b3c <__aeabi_dcmpun>
 8008a30:	b140      	cbz	r0, 8008a44 <_printf_float+0xf0>
 8008a32:	464b      	mov	r3, r9
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfbc      	itt	lt
 8008a38:	232d      	movlt	r3, #45	; 0x2d
 8008a3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a3e:	487f      	ldr	r0, [pc, #508]	; (8008c3c <_printf_float+0x2e8>)
 8008a40:	4b7f      	ldr	r3, [pc, #508]	; (8008c40 <_printf_float+0x2ec>)
 8008a42:	e7d1      	b.n	80089e8 <_printf_float+0x94>
 8008a44:	6863      	ldr	r3, [r4, #4]
 8008a46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a4a:	9206      	str	r2, [sp, #24]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	d13f      	bne.n	8008ad0 <_printf_float+0x17c>
 8008a50:	2306      	movs	r3, #6
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	9b05      	ldr	r3, [sp, #20]
 8008a56:	6861      	ldr	r1, [r4, #4]
 8008a58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9303      	str	r3, [sp, #12]
 8008a60:	ab0a      	add	r3, sp, #40	; 0x28
 8008a62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a66:	ab09      	add	r3, sp, #36	; 0x24
 8008a68:	ec49 8b10 	vmov	d0, r8, r9
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7ff fecd 	bl	8008814 <__cvt>
 8008a7a:	9b06      	ldr	r3, [sp, #24]
 8008a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a7e:	2b47      	cmp	r3, #71	; 0x47
 8008a80:	4680      	mov	r8, r0
 8008a82:	d108      	bne.n	8008a96 <_printf_float+0x142>
 8008a84:	1cc8      	adds	r0, r1, #3
 8008a86:	db02      	blt.n	8008a8e <_printf_float+0x13a>
 8008a88:	6863      	ldr	r3, [r4, #4]
 8008a8a:	4299      	cmp	r1, r3
 8008a8c:	dd41      	ble.n	8008b12 <_printf_float+0x1be>
 8008a8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a92:	fa5f fb8b 	uxtb.w	fp, fp
 8008a96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a9a:	d820      	bhi.n	8008ade <_printf_float+0x18a>
 8008a9c:	3901      	subs	r1, #1
 8008a9e:	465a      	mov	r2, fp
 8008aa0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008aa4:	9109      	str	r1, [sp, #36]	; 0x24
 8008aa6:	f7ff ff17 	bl	80088d8 <__exponent>
 8008aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aac:	1813      	adds	r3, r2, r0
 8008aae:	2a01      	cmp	r2, #1
 8008ab0:	4681      	mov	r9, r0
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	dc02      	bgt.n	8008abc <_printf_float+0x168>
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	07d2      	lsls	r2, r2, #31
 8008aba:	d501      	bpl.n	8008ac0 <_printf_float+0x16c>
 8008abc:	3301      	adds	r3, #1
 8008abe:	6123      	str	r3, [r4, #16]
 8008ac0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d09c      	beq.n	8008a02 <_printf_float+0xae>
 8008ac8:	232d      	movs	r3, #45	; 0x2d
 8008aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ace:	e798      	b.n	8008a02 <_printf_float+0xae>
 8008ad0:	9a06      	ldr	r2, [sp, #24]
 8008ad2:	2a47      	cmp	r2, #71	; 0x47
 8008ad4:	d1be      	bne.n	8008a54 <_printf_float+0x100>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1bc      	bne.n	8008a54 <_printf_float+0x100>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e7b9      	b.n	8008a52 <_printf_float+0xfe>
 8008ade:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ae2:	d118      	bne.n	8008b16 <_printf_float+0x1c2>
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	6863      	ldr	r3, [r4, #4]
 8008ae8:	dd0b      	ble.n	8008b02 <_printf_float+0x1ae>
 8008aea:	6121      	str	r1, [r4, #16]
 8008aec:	b913      	cbnz	r3, 8008af4 <_printf_float+0x1a0>
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	07d0      	lsls	r0, r2, #31
 8008af2:	d502      	bpl.n	8008afa <_printf_float+0x1a6>
 8008af4:	3301      	adds	r3, #1
 8008af6:	440b      	add	r3, r1
 8008af8:	6123      	str	r3, [r4, #16]
 8008afa:	65a1      	str	r1, [r4, #88]	; 0x58
 8008afc:	f04f 0900 	mov.w	r9, #0
 8008b00:	e7de      	b.n	8008ac0 <_printf_float+0x16c>
 8008b02:	b913      	cbnz	r3, 8008b0a <_printf_float+0x1b6>
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	07d2      	lsls	r2, r2, #31
 8008b08:	d501      	bpl.n	8008b0e <_printf_float+0x1ba>
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	e7f4      	b.n	8008af8 <_printf_float+0x1a4>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e7f2      	b.n	8008af8 <_printf_float+0x1a4>
 8008b12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b18:	4299      	cmp	r1, r3
 8008b1a:	db05      	blt.n	8008b28 <_printf_float+0x1d4>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	6121      	str	r1, [r4, #16]
 8008b20:	07d8      	lsls	r0, r3, #31
 8008b22:	d5ea      	bpl.n	8008afa <_printf_float+0x1a6>
 8008b24:	1c4b      	adds	r3, r1, #1
 8008b26:	e7e7      	b.n	8008af8 <_printf_float+0x1a4>
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	bfd4      	ite	le
 8008b2c:	f1c1 0202 	rsble	r2, r1, #2
 8008b30:	2201      	movgt	r2, #1
 8008b32:	4413      	add	r3, r2
 8008b34:	e7e0      	b.n	8008af8 <_printf_float+0x1a4>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	055a      	lsls	r2, r3, #21
 8008b3a:	d407      	bmi.n	8008b4c <_printf_float+0x1f8>
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	4642      	mov	r2, r8
 8008b40:	4631      	mov	r1, r6
 8008b42:	4628      	mov	r0, r5
 8008b44:	47b8      	blx	r7
 8008b46:	3001      	adds	r0, #1
 8008b48:	d12c      	bne.n	8008ba4 <_printf_float+0x250>
 8008b4a:	e764      	b.n	8008a16 <_printf_float+0xc2>
 8008b4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b50:	f240 80e0 	bls.w	8008d14 <_printf_float+0x3c0>
 8008b54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f7f7 ffbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d034      	beq.n	8008bce <_printf_float+0x27a>
 8008b64:	4a37      	ldr	r2, [pc, #220]	; (8008c44 <_printf_float+0x2f0>)
 8008b66:	2301      	movs	r3, #1
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	f43f af51 	beq.w	8008a16 <_printf_float+0xc2>
 8008b74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	db02      	blt.n	8008b82 <_printf_float+0x22e>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	07d8      	lsls	r0, r3, #31
 8008b80:	d510      	bpl.n	8008ba4 <_printf_float+0x250>
 8008b82:	ee18 3a10 	vmov	r3, s16
 8008b86:	4652      	mov	r2, sl
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b8      	blx	r7
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f43f af41 	beq.w	8008a16 <_printf_float+0xc2>
 8008b94:	f04f 0800 	mov.w	r8, #0
 8008b98:	f104 091a 	add.w	r9, r4, #26
 8008b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	4543      	cmp	r3, r8
 8008ba2:	dc09      	bgt.n	8008bb8 <_printf_float+0x264>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	079b      	lsls	r3, r3, #30
 8008ba8:	f100 8105 	bmi.w	8008db6 <_printf_float+0x462>
 8008bac:	68e0      	ldr	r0, [r4, #12]
 8008bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb0:	4298      	cmp	r0, r3
 8008bb2:	bfb8      	it	lt
 8008bb4:	4618      	movlt	r0, r3
 8008bb6:	e730      	b.n	8008a1a <_printf_float+0xc6>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	464a      	mov	r2, r9
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f af27 	beq.w	8008a16 <_printf_float+0xc2>
 8008bc8:	f108 0801 	add.w	r8, r8, #1
 8008bcc:	e7e6      	b.n	8008b9c <_printf_float+0x248>
 8008bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dc39      	bgt.n	8008c48 <_printf_float+0x2f4>
 8008bd4:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <_printf_float+0x2f0>)
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	f43f af19 	beq.w	8008a16 <_printf_float+0xc2>
 8008be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be8:	4313      	orrs	r3, r2
 8008bea:	d102      	bne.n	8008bf2 <_printf_float+0x29e>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	07d9      	lsls	r1, r3, #31
 8008bf0:	d5d8      	bpl.n	8008ba4 <_printf_float+0x250>
 8008bf2:	ee18 3a10 	vmov	r3, s16
 8008bf6:	4652      	mov	r2, sl
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af09 	beq.w	8008a16 <_printf_float+0xc2>
 8008c04:	f04f 0900 	mov.w	r9, #0
 8008c08:	f104 0a1a 	add.w	sl, r4, #26
 8008c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0e:	425b      	negs	r3, r3
 8008c10:	454b      	cmp	r3, r9
 8008c12:	dc01      	bgt.n	8008c18 <_printf_float+0x2c4>
 8008c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c16:	e792      	b.n	8008b3e <_printf_float+0x1ea>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b8      	blx	r7
 8008c22:	3001      	adds	r0, #1
 8008c24:	f43f aef7 	beq.w	8008a16 <_printf_float+0xc2>
 8008c28:	f109 0901 	add.w	r9, r9, #1
 8008c2c:	e7ee      	b.n	8008c0c <_printf_float+0x2b8>
 8008c2e:	bf00      	nop
 8008c30:	7fefffff 	.word	0x7fefffff
 8008c34:	0800b914 	.word	0x0800b914
 8008c38:	0800b918 	.word	0x0800b918
 8008c3c:	0800b920 	.word	0x0800b920
 8008c40:	0800b91c 	.word	0x0800b91c
 8008c44:	0800b924 	.word	0x0800b924
 8008c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	bfa8      	it	ge
 8008c50:	461a      	movge	r2, r3
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	4691      	mov	r9, r2
 8008c56:	dc37      	bgt.n	8008cc8 <_printf_float+0x374>
 8008c58:	f04f 0b00 	mov.w	fp, #0
 8008c5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c60:	f104 021a 	add.w	r2, r4, #26
 8008c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	eba3 0309 	sub.w	r3, r3, r9
 8008c6c:	455b      	cmp	r3, fp
 8008c6e:	dc33      	bgt.n	8008cd8 <_printf_float+0x384>
 8008c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c74:	429a      	cmp	r2, r3
 8008c76:	db3b      	blt.n	8008cf0 <_printf_float+0x39c>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	07da      	lsls	r2, r3, #31
 8008c7c:	d438      	bmi.n	8008cf0 <_printf_float+0x39c>
 8008c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c80:	9b05      	ldr	r3, [sp, #20]
 8008c82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	eba2 0901 	sub.w	r9, r2, r1
 8008c8a:	4599      	cmp	r9, r3
 8008c8c:	bfa8      	it	ge
 8008c8e:	4699      	movge	r9, r3
 8008c90:	f1b9 0f00 	cmp.w	r9, #0
 8008c94:	dc35      	bgt.n	8008d02 <_printf_float+0x3ae>
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c9e:	f104 0a1a 	add.w	sl, r4, #26
 8008ca2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ca6:	1a9b      	subs	r3, r3, r2
 8008ca8:	eba3 0309 	sub.w	r3, r3, r9
 8008cac:	4543      	cmp	r3, r8
 8008cae:	f77f af79 	ble.w	8008ba4 <_printf_float+0x250>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4652      	mov	r2, sl
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b8      	blx	r7
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	f43f aeaa 	beq.w	8008a16 <_printf_float+0xc2>
 8008cc2:	f108 0801 	add.w	r8, r8, #1
 8008cc6:	e7ec      	b.n	8008ca2 <_printf_float+0x34e>
 8008cc8:	4613      	mov	r3, r2
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4642      	mov	r2, r8
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b8      	blx	r7
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	d1c0      	bne.n	8008c58 <_printf_float+0x304>
 8008cd6:	e69e      	b.n	8008a16 <_printf_float+0xc2>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4628      	mov	r0, r5
 8008cde:	9205      	str	r2, [sp, #20]
 8008ce0:	47b8      	blx	r7
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	f43f ae97 	beq.w	8008a16 <_printf_float+0xc2>
 8008ce8:	9a05      	ldr	r2, [sp, #20]
 8008cea:	f10b 0b01 	add.w	fp, fp, #1
 8008cee:	e7b9      	b.n	8008c64 <_printf_float+0x310>
 8008cf0:	ee18 3a10 	vmov	r3, s16
 8008cf4:	4652      	mov	r2, sl
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	47b8      	blx	r7
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d1be      	bne.n	8008c7e <_printf_float+0x32a>
 8008d00:	e689      	b.n	8008a16 <_printf_float+0xc2>
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	464b      	mov	r3, r9
 8008d06:	4442      	add	r2, r8
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b8      	blx	r7
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d1c1      	bne.n	8008c96 <_printf_float+0x342>
 8008d12:	e680      	b.n	8008a16 <_printf_float+0xc2>
 8008d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d16:	2a01      	cmp	r2, #1
 8008d18:	dc01      	bgt.n	8008d1e <_printf_float+0x3ca>
 8008d1a:	07db      	lsls	r3, r3, #31
 8008d1c:	d538      	bpl.n	8008d90 <_printf_float+0x43c>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4642      	mov	r2, r8
 8008d22:	4631      	mov	r1, r6
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b8      	blx	r7
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f43f ae74 	beq.w	8008a16 <_printf_float+0xc2>
 8008d2e:	ee18 3a10 	vmov	r3, s16
 8008d32:	4652      	mov	r2, sl
 8008d34:	4631      	mov	r1, r6
 8008d36:	4628      	mov	r0, r5
 8008d38:	47b8      	blx	r7
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	f43f ae6b 	beq.w	8008a16 <_printf_float+0xc2>
 8008d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d44:	2200      	movs	r2, #0
 8008d46:	2300      	movs	r3, #0
 8008d48:	f7f7 fec6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d4c:	b9d8      	cbnz	r0, 8008d86 <_printf_float+0x432>
 8008d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d50:	f108 0201 	add.w	r2, r8, #1
 8008d54:	3b01      	subs	r3, #1
 8008d56:	4631      	mov	r1, r6
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b8      	blx	r7
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d10e      	bne.n	8008d7e <_printf_float+0x42a>
 8008d60:	e659      	b.n	8008a16 <_printf_float+0xc2>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4652      	mov	r2, sl
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	47b8      	blx	r7
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	f43f ae52 	beq.w	8008a16 <_printf_float+0xc2>
 8008d72:	f108 0801 	add.w	r8, r8, #1
 8008d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	4543      	cmp	r3, r8
 8008d7c:	dcf1      	bgt.n	8008d62 <_printf_float+0x40e>
 8008d7e:	464b      	mov	r3, r9
 8008d80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d84:	e6dc      	b.n	8008b40 <_printf_float+0x1ec>
 8008d86:	f04f 0800 	mov.w	r8, #0
 8008d8a:	f104 0a1a 	add.w	sl, r4, #26
 8008d8e:	e7f2      	b.n	8008d76 <_printf_float+0x422>
 8008d90:	2301      	movs	r3, #1
 8008d92:	4642      	mov	r2, r8
 8008d94:	e7df      	b.n	8008d56 <_printf_float+0x402>
 8008d96:	2301      	movs	r3, #1
 8008d98:	464a      	mov	r2, r9
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	f43f ae38 	beq.w	8008a16 <_printf_float+0xc2>
 8008da6:	f108 0801 	add.w	r8, r8, #1
 8008daa:	68e3      	ldr	r3, [r4, #12]
 8008dac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dae:	1a5b      	subs	r3, r3, r1
 8008db0:	4543      	cmp	r3, r8
 8008db2:	dcf0      	bgt.n	8008d96 <_printf_float+0x442>
 8008db4:	e6fa      	b.n	8008bac <_printf_float+0x258>
 8008db6:	f04f 0800 	mov.w	r8, #0
 8008dba:	f104 0919 	add.w	r9, r4, #25
 8008dbe:	e7f4      	b.n	8008daa <_printf_float+0x456>

08008dc0 <_printf_common>:
 8008dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	4699      	mov	r9, r3
 8008dc8:	688a      	ldr	r2, [r1, #8]
 8008dca:	690b      	ldr	r3, [r1, #16]
 8008dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	bfb8      	it	lt
 8008dd4:	4613      	movlt	r3, r2
 8008dd6:	6033      	str	r3, [r6, #0]
 8008dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ddc:	4607      	mov	r7, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	b10a      	cbz	r2, 8008de6 <_printf_common+0x26>
 8008de2:	3301      	adds	r3, #1
 8008de4:	6033      	str	r3, [r6, #0]
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	0699      	lsls	r1, r3, #26
 8008dea:	bf42      	ittt	mi
 8008dec:	6833      	ldrmi	r3, [r6, #0]
 8008dee:	3302      	addmi	r3, #2
 8008df0:	6033      	strmi	r3, [r6, #0]
 8008df2:	6825      	ldr	r5, [r4, #0]
 8008df4:	f015 0506 	ands.w	r5, r5, #6
 8008df8:	d106      	bne.n	8008e08 <_printf_common+0x48>
 8008dfa:	f104 0a19 	add.w	sl, r4, #25
 8008dfe:	68e3      	ldr	r3, [r4, #12]
 8008e00:	6832      	ldr	r2, [r6, #0]
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	42ab      	cmp	r3, r5
 8008e06:	dc26      	bgt.n	8008e56 <_printf_common+0x96>
 8008e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e0c:	1e13      	subs	r3, r2, #0
 8008e0e:	6822      	ldr	r2, [r4, #0]
 8008e10:	bf18      	it	ne
 8008e12:	2301      	movne	r3, #1
 8008e14:	0692      	lsls	r2, r2, #26
 8008e16:	d42b      	bmi.n	8008e70 <_printf_common+0xb0>
 8008e18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	4638      	mov	r0, r7
 8008e20:	47c0      	blx	r8
 8008e22:	3001      	adds	r0, #1
 8008e24:	d01e      	beq.n	8008e64 <_printf_common+0xa4>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	68e5      	ldr	r5, [r4, #12]
 8008e2a:	6832      	ldr	r2, [r6, #0]
 8008e2c:	f003 0306 	and.w	r3, r3, #6
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	bf08      	it	eq
 8008e34:	1aad      	subeq	r5, r5, r2
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	6922      	ldr	r2, [r4, #16]
 8008e3a:	bf0c      	ite	eq
 8008e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e40:	2500      	movne	r5, #0
 8008e42:	4293      	cmp	r3, r2
 8008e44:	bfc4      	itt	gt
 8008e46:	1a9b      	subgt	r3, r3, r2
 8008e48:	18ed      	addgt	r5, r5, r3
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	341a      	adds	r4, #26
 8008e4e:	42b5      	cmp	r5, r6
 8008e50:	d11a      	bne.n	8008e88 <_printf_common+0xc8>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e008      	b.n	8008e68 <_printf_common+0xa8>
 8008e56:	2301      	movs	r3, #1
 8008e58:	4652      	mov	r2, sl
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	47c0      	blx	r8
 8008e60:	3001      	adds	r0, #1
 8008e62:	d103      	bne.n	8008e6c <_printf_common+0xac>
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	e7c6      	b.n	8008dfe <_printf_common+0x3e>
 8008e70:	18e1      	adds	r1, r4, r3
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	2030      	movs	r0, #48	; 0x30
 8008e76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e7a:	4422      	add	r2, r4
 8008e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e84:	3302      	adds	r3, #2
 8008e86:	e7c7      	b.n	8008e18 <_printf_common+0x58>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	4638      	mov	r0, r7
 8008e90:	47c0      	blx	r8
 8008e92:	3001      	adds	r0, #1
 8008e94:	d0e6      	beq.n	8008e64 <_printf_common+0xa4>
 8008e96:	3601      	adds	r6, #1
 8008e98:	e7d9      	b.n	8008e4e <_printf_common+0x8e>
	...

08008e9c <_printf_i>:
 8008e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	4691      	mov	r9, r2
 8008ea4:	7e27      	ldrb	r7, [r4, #24]
 8008ea6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ea8:	2f78      	cmp	r7, #120	; 0x78
 8008eaa:	4680      	mov	r8, r0
 8008eac:	469a      	mov	sl, r3
 8008eae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eb2:	d807      	bhi.n	8008ec4 <_printf_i+0x28>
 8008eb4:	2f62      	cmp	r7, #98	; 0x62
 8008eb6:	d80a      	bhi.n	8008ece <_printf_i+0x32>
 8008eb8:	2f00      	cmp	r7, #0
 8008eba:	f000 80d8 	beq.w	800906e <_printf_i+0x1d2>
 8008ebe:	2f58      	cmp	r7, #88	; 0x58
 8008ec0:	f000 80a3 	beq.w	800900a <_printf_i+0x16e>
 8008ec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ecc:	e03a      	b.n	8008f44 <_printf_i+0xa8>
 8008ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ed2:	2b15      	cmp	r3, #21
 8008ed4:	d8f6      	bhi.n	8008ec4 <_printf_i+0x28>
 8008ed6:	a001      	add	r0, pc, #4	; (adr r0, 8008edc <_printf_i+0x40>)
 8008ed8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008edc:	08008f35 	.word	0x08008f35
 8008ee0:	08008f49 	.word	0x08008f49
 8008ee4:	08008ec5 	.word	0x08008ec5
 8008ee8:	08008ec5 	.word	0x08008ec5
 8008eec:	08008ec5 	.word	0x08008ec5
 8008ef0:	08008ec5 	.word	0x08008ec5
 8008ef4:	08008f49 	.word	0x08008f49
 8008ef8:	08008ec5 	.word	0x08008ec5
 8008efc:	08008ec5 	.word	0x08008ec5
 8008f00:	08008ec5 	.word	0x08008ec5
 8008f04:	08008ec5 	.word	0x08008ec5
 8008f08:	08009055 	.word	0x08009055
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08009037 	.word	0x08009037
 8008f14:	08008ec5 	.word	0x08008ec5
 8008f18:	08008ec5 	.word	0x08008ec5
 8008f1c:	08009077 	.word	0x08009077
 8008f20:	08008ec5 	.word	0x08008ec5
 8008f24:	08008f79 	.word	0x08008f79
 8008f28:	08008ec5 	.word	0x08008ec5
 8008f2c:	08008ec5 	.word	0x08008ec5
 8008f30:	0800903f 	.word	0x0800903f
 8008f34:	680b      	ldr	r3, [r1, #0]
 8008f36:	1d1a      	adds	r2, r3, #4
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	600a      	str	r2, [r1, #0]
 8008f3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f44:	2301      	movs	r3, #1
 8008f46:	e0a3      	b.n	8009090 <_printf_i+0x1f4>
 8008f48:	6825      	ldr	r5, [r4, #0]
 8008f4a:	6808      	ldr	r0, [r1, #0]
 8008f4c:	062e      	lsls	r6, r5, #24
 8008f4e:	f100 0304 	add.w	r3, r0, #4
 8008f52:	d50a      	bpl.n	8008f6a <_printf_i+0xce>
 8008f54:	6805      	ldr	r5, [r0, #0]
 8008f56:	600b      	str	r3, [r1, #0]
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	da03      	bge.n	8008f64 <_printf_i+0xc8>
 8008f5c:	232d      	movs	r3, #45	; 0x2d
 8008f5e:	426d      	negs	r5, r5
 8008f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f64:	485e      	ldr	r0, [pc, #376]	; (80090e0 <_printf_i+0x244>)
 8008f66:	230a      	movs	r3, #10
 8008f68:	e019      	b.n	8008f9e <_printf_i+0x102>
 8008f6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f6e:	6805      	ldr	r5, [r0, #0]
 8008f70:	600b      	str	r3, [r1, #0]
 8008f72:	bf18      	it	ne
 8008f74:	b22d      	sxthne	r5, r5
 8008f76:	e7ef      	b.n	8008f58 <_printf_i+0xbc>
 8008f78:	680b      	ldr	r3, [r1, #0]
 8008f7a:	6825      	ldr	r5, [r4, #0]
 8008f7c:	1d18      	adds	r0, r3, #4
 8008f7e:	6008      	str	r0, [r1, #0]
 8008f80:	0628      	lsls	r0, r5, #24
 8008f82:	d501      	bpl.n	8008f88 <_printf_i+0xec>
 8008f84:	681d      	ldr	r5, [r3, #0]
 8008f86:	e002      	b.n	8008f8e <_printf_i+0xf2>
 8008f88:	0669      	lsls	r1, r5, #25
 8008f8a:	d5fb      	bpl.n	8008f84 <_printf_i+0xe8>
 8008f8c:	881d      	ldrh	r5, [r3, #0]
 8008f8e:	4854      	ldr	r0, [pc, #336]	; (80090e0 <_printf_i+0x244>)
 8008f90:	2f6f      	cmp	r7, #111	; 0x6f
 8008f92:	bf0c      	ite	eq
 8008f94:	2308      	moveq	r3, #8
 8008f96:	230a      	movne	r3, #10
 8008f98:	2100      	movs	r1, #0
 8008f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f9e:	6866      	ldr	r6, [r4, #4]
 8008fa0:	60a6      	str	r6, [r4, #8]
 8008fa2:	2e00      	cmp	r6, #0
 8008fa4:	bfa2      	ittt	ge
 8008fa6:	6821      	ldrge	r1, [r4, #0]
 8008fa8:	f021 0104 	bicge.w	r1, r1, #4
 8008fac:	6021      	strge	r1, [r4, #0]
 8008fae:	b90d      	cbnz	r5, 8008fb4 <_printf_i+0x118>
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	d04d      	beq.n	8009050 <_printf_i+0x1b4>
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fba:	fb03 5711 	mls	r7, r3, r1, r5
 8008fbe:	5dc7      	ldrb	r7, [r0, r7]
 8008fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fc4:	462f      	mov	r7, r5
 8008fc6:	42bb      	cmp	r3, r7
 8008fc8:	460d      	mov	r5, r1
 8008fca:	d9f4      	bls.n	8008fb6 <_printf_i+0x11a>
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d10b      	bne.n	8008fe8 <_printf_i+0x14c>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	07df      	lsls	r7, r3, #31
 8008fd4:	d508      	bpl.n	8008fe8 <_printf_i+0x14c>
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	6861      	ldr	r1, [r4, #4]
 8008fda:	4299      	cmp	r1, r3
 8008fdc:	bfde      	ittt	le
 8008fde:	2330      	movle	r3, #48	; 0x30
 8008fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fe4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008fe8:	1b92      	subs	r2, r2, r6
 8008fea:	6122      	str	r2, [r4, #16]
 8008fec:	f8cd a000 	str.w	sl, [sp]
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	aa03      	add	r2, sp, #12
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	f7ff fee2 	bl	8008dc0 <_printf_common>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d14c      	bne.n	800909a <_printf_i+0x1fe>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009004:	b004      	add	sp, #16
 8009006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900a:	4835      	ldr	r0, [pc, #212]	; (80090e0 <_printf_i+0x244>)
 800900c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	680e      	ldr	r6, [r1, #0]
 8009014:	061f      	lsls	r7, r3, #24
 8009016:	f856 5b04 	ldr.w	r5, [r6], #4
 800901a:	600e      	str	r6, [r1, #0]
 800901c:	d514      	bpl.n	8009048 <_printf_i+0x1ac>
 800901e:	07d9      	lsls	r1, r3, #31
 8009020:	bf44      	itt	mi
 8009022:	f043 0320 	orrmi.w	r3, r3, #32
 8009026:	6023      	strmi	r3, [r4, #0]
 8009028:	b91d      	cbnz	r5, 8009032 <_printf_i+0x196>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	f023 0320 	bic.w	r3, r3, #32
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	2310      	movs	r3, #16
 8009034:	e7b0      	b.n	8008f98 <_printf_i+0xfc>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	f043 0320 	orr.w	r3, r3, #32
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	2378      	movs	r3, #120	; 0x78
 8009040:	4828      	ldr	r0, [pc, #160]	; (80090e4 <_printf_i+0x248>)
 8009042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009046:	e7e3      	b.n	8009010 <_printf_i+0x174>
 8009048:	065e      	lsls	r6, r3, #25
 800904a:	bf48      	it	mi
 800904c:	b2ad      	uxthmi	r5, r5
 800904e:	e7e6      	b.n	800901e <_printf_i+0x182>
 8009050:	4616      	mov	r6, r2
 8009052:	e7bb      	b.n	8008fcc <_printf_i+0x130>
 8009054:	680b      	ldr	r3, [r1, #0]
 8009056:	6826      	ldr	r6, [r4, #0]
 8009058:	6960      	ldr	r0, [r4, #20]
 800905a:	1d1d      	adds	r5, r3, #4
 800905c:	600d      	str	r5, [r1, #0]
 800905e:	0635      	lsls	r5, r6, #24
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	d501      	bpl.n	8009068 <_printf_i+0x1cc>
 8009064:	6018      	str	r0, [r3, #0]
 8009066:	e002      	b.n	800906e <_printf_i+0x1d2>
 8009068:	0671      	lsls	r1, r6, #25
 800906a:	d5fb      	bpl.n	8009064 <_printf_i+0x1c8>
 800906c:	8018      	strh	r0, [r3, #0]
 800906e:	2300      	movs	r3, #0
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	4616      	mov	r6, r2
 8009074:	e7ba      	b.n	8008fec <_printf_i+0x150>
 8009076:	680b      	ldr	r3, [r1, #0]
 8009078:	1d1a      	adds	r2, r3, #4
 800907a:	600a      	str	r2, [r1, #0]
 800907c:	681e      	ldr	r6, [r3, #0]
 800907e:	6862      	ldr	r2, [r4, #4]
 8009080:	2100      	movs	r1, #0
 8009082:	4630      	mov	r0, r6
 8009084:	f7f7 f8b4 	bl	80001f0 <memchr>
 8009088:	b108      	cbz	r0, 800908e <_printf_i+0x1f2>
 800908a:	1b80      	subs	r0, r0, r6
 800908c:	6060      	str	r0, [r4, #4]
 800908e:	6863      	ldr	r3, [r4, #4]
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	2300      	movs	r3, #0
 8009094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009098:	e7a8      	b.n	8008fec <_printf_i+0x150>
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	4632      	mov	r2, r6
 800909e:	4649      	mov	r1, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	47d0      	blx	sl
 80090a4:	3001      	adds	r0, #1
 80090a6:	d0ab      	beq.n	8009000 <_printf_i+0x164>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	079b      	lsls	r3, r3, #30
 80090ac:	d413      	bmi.n	80090d6 <_printf_i+0x23a>
 80090ae:	68e0      	ldr	r0, [r4, #12]
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	4298      	cmp	r0, r3
 80090b4:	bfb8      	it	lt
 80090b6:	4618      	movlt	r0, r3
 80090b8:	e7a4      	b.n	8009004 <_printf_i+0x168>
 80090ba:	2301      	movs	r3, #1
 80090bc:	4632      	mov	r2, r6
 80090be:	4649      	mov	r1, r9
 80090c0:	4640      	mov	r0, r8
 80090c2:	47d0      	blx	sl
 80090c4:	3001      	adds	r0, #1
 80090c6:	d09b      	beq.n	8009000 <_printf_i+0x164>
 80090c8:	3501      	adds	r5, #1
 80090ca:	68e3      	ldr	r3, [r4, #12]
 80090cc:	9903      	ldr	r1, [sp, #12]
 80090ce:	1a5b      	subs	r3, r3, r1
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	dcf2      	bgt.n	80090ba <_printf_i+0x21e>
 80090d4:	e7eb      	b.n	80090ae <_printf_i+0x212>
 80090d6:	2500      	movs	r5, #0
 80090d8:	f104 0619 	add.w	r6, r4, #25
 80090dc:	e7f5      	b.n	80090ca <_printf_i+0x22e>
 80090de:	bf00      	nop
 80090e0:	0800b926 	.word	0x0800b926
 80090e4:	0800b937 	.word	0x0800b937

080090e8 <iprintf>:
 80090e8:	b40f      	push	{r0, r1, r2, r3}
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <iprintf+0x2c>)
 80090ec:	b513      	push	{r0, r1, r4, lr}
 80090ee:	681c      	ldr	r4, [r3, #0]
 80090f0:	b124      	cbz	r4, 80090fc <iprintf+0x14>
 80090f2:	69a3      	ldr	r3, [r4, #24]
 80090f4:	b913      	cbnz	r3, 80090fc <iprintf+0x14>
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7ff fa06 	bl	8008508 <__sinit>
 80090fc:	ab05      	add	r3, sp, #20
 80090fe:	9a04      	ldr	r2, [sp, #16]
 8009100:	68a1      	ldr	r1, [r4, #8]
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	4620      	mov	r0, r4
 8009106:	f001 fd31 	bl	800ab6c <_vfiprintf_r>
 800910a:	b002      	add	sp, #8
 800910c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009110:	b004      	add	sp, #16
 8009112:	4770      	bx	lr
 8009114:	20000010 	.word	0x20000010

08009118 <_sbrk_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d06      	ldr	r5, [pc, #24]	; (8009134 <_sbrk_r+0x1c>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7f8 ffde 	bl	80020e4 <_sbrk>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_sbrk_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_sbrk_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	2000be1c 	.word	0x2000be1c

08009138 <siprintf>:
 8009138:	b40e      	push	{r1, r2, r3}
 800913a:	b500      	push	{lr}
 800913c:	b09c      	sub	sp, #112	; 0x70
 800913e:	ab1d      	add	r3, sp, #116	; 0x74
 8009140:	9002      	str	r0, [sp, #8]
 8009142:	9006      	str	r0, [sp, #24]
 8009144:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009148:	4809      	ldr	r0, [pc, #36]	; (8009170 <siprintf+0x38>)
 800914a:	9107      	str	r1, [sp, #28]
 800914c:	9104      	str	r1, [sp, #16]
 800914e:	4909      	ldr	r1, [pc, #36]	; (8009174 <siprintf+0x3c>)
 8009150:	f853 2b04 	ldr.w	r2, [r3], #4
 8009154:	9105      	str	r1, [sp, #20]
 8009156:	6800      	ldr	r0, [r0, #0]
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	a902      	add	r1, sp, #8
 800915c:	f001 fbdc 	bl	800a918 <_svfiprintf_r>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]
 8009166:	b01c      	add	sp, #112	; 0x70
 8009168:	f85d eb04 	ldr.w	lr, [sp], #4
 800916c:	b003      	add	sp, #12
 800916e:	4770      	bx	lr
 8009170:	20000010 	.word	0x20000010
 8009174:	ffff0208 	.word	0xffff0208

08009178 <__sread>:
 8009178:	b510      	push	{r4, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	f001 fe24 	bl	800adcc <_read_r>
 8009184:	2800      	cmp	r0, #0
 8009186:	bfab      	itete	ge
 8009188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800918a:	89a3      	ldrhlt	r3, [r4, #12]
 800918c:	181b      	addge	r3, r3, r0
 800918e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009192:	bfac      	ite	ge
 8009194:	6563      	strge	r3, [r4, #84]	; 0x54
 8009196:	81a3      	strhlt	r3, [r4, #12]
 8009198:	bd10      	pop	{r4, pc}

0800919a <__swrite>:
 800919a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	461f      	mov	r7, r3
 80091a0:	898b      	ldrh	r3, [r1, #12]
 80091a2:	05db      	lsls	r3, r3, #23
 80091a4:	4605      	mov	r5, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	4616      	mov	r6, r2
 80091aa:	d505      	bpl.n	80091b8 <__swrite+0x1e>
 80091ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b0:	2302      	movs	r3, #2
 80091b2:	2200      	movs	r2, #0
 80091b4:	f000 ff88 	bl	800a0c8 <_lseek_r>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	4632      	mov	r2, r6
 80091c6:	463b      	mov	r3, r7
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ce:	f000 b8dd 	b.w	800938c <_write_r>

080091d2 <__sseek>:
 80091d2:	b510      	push	{r4, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091da:	f000 ff75 	bl	800a0c8 <_lseek_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	bf15      	itete	ne
 80091e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ee:	81a3      	strheq	r3, [r4, #12]
 80091f0:	bf18      	it	ne
 80091f2:	81a3      	strhne	r3, [r4, #12]
 80091f4:	bd10      	pop	{r4, pc}

080091f6 <__sclose>:
 80091f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fa:	f000 b8d9 	b.w	80093b0 <_close_r>

080091fe <strnstr>:
 80091fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	4605      	mov	r5, r0
 8009204:	4611      	mov	r1, r2
 8009206:	4620      	mov	r0, r4
 8009208:	9201      	str	r2, [sp, #4]
 800920a:	f001 fdf1 	bl	800adf0 <strnlen>
 800920e:	9901      	ldr	r1, [sp, #4]
 8009210:	4281      	cmp	r1, r0
 8009212:	d805      	bhi.n	8009220 <strnstr+0x22>
 8009214:	5c23      	ldrb	r3, [r4, r0]
 8009216:	b11b      	cbz	r3, 8009220 <strnstr+0x22>
 8009218:	2400      	movs	r4, #0
 800921a:	4620      	mov	r0, r4
 800921c:	b003      	add	sp, #12
 800921e:	bd30      	pop	{r4, r5, pc}
 8009220:	4603      	mov	r3, r0
 8009222:	4622      	mov	r2, r4
 8009224:	4628      	mov	r0, r5
 8009226:	f000 ff69 	bl	800a0fc <memmem>
 800922a:	4604      	mov	r4, r0
 800922c:	2800      	cmp	r0, #0
 800922e:	d0f3      	beq.n	8009218 <strnstr+0x1a>
 8009230:	1b42      	subs	r2, r0, r5
 8009232:	2100      	movs	r1, #0
 8009234:	4628      	mov	r0, r5
 8009236:	f7f6 ffdb 	bl	80001f0 <memchr>
 800923a:	2800      	cmp	r0, #0
 800923c:	d1ec      	bne.n	8009218 <strnstr+0x1a>
 800923e:	e7ec      	b.n	800921a <strnstr+0x1c>

08009240 <strstr>:
 8009240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009242:	780c      	ldrb	r4, [r1, #0]
 8009244:	b164      	cbz	r4, 8009260 <strstr+0x20>
 8009246:	4603      	mov	r3, r0
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	4618      	mov	r0, r3
 800924c:	1c5e      	adds	r6, r3, #1
 800924e:	b90a      	cbnz	r2, 8009254 <strstr+0x14>
 8009250:	4610      	mov	r0, r2
 8009252:	e005      	b.n	8009260 <strstr+0x20>
 8009254:	4294      	cmp	r4, r2
 8009256:	d108      	bne.n	800926a <strstr+0x2a>
 8009258:	460d      	mov	r5, r1
 800925a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800925e:	b902      	cbnz	r2, 8009262 <strstr+0x22>
 8009260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009262:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009266:	4297      	cmp	r7, r2
 8009268:	d0f7      	beq.n	800925a <strstr+0x1a>
 800926a:	4633      	mov	r3, r6
 800926c:	e7ec      	b.n	8009248 <strstr+0x8>
	...

08009270 <_strtol_l.isra.0>:
 8009270:	2b01      	cmp	r3, #1
 8009272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009276:	d001      	beq.n	800927c <_strtol_l.isra.0+0xc>
 8009278:	2b24      	cmp	r3, #36	; 0x24
 800927a:	d906      	bls.n	800928a <_strtol_l.isra.0+0x1a>
 800927c:	f7ff f812 	bl	80082a4 <__errno>
 8009280:	2316      	movs	r3, #22
 8009282:	6003      	str	r3, [r0, #0]
 8009284:	2000      	movs	r0, #0
 8009286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928a:	4f3a      	ldr	r7, [pc, #232]	; (8009374 <_strtol_l.isra.0+0x104>)
 800928c:	468e      	mov	lr, r1
 800928e:	4676      	mov	r6, lr
 8009290:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009294:	5de5      	ldrb	r5, [r4, r7]
 8009296:	f015 0508 	ands.w	r5, r5, #8
 800929a:	d1f8      	bne.n	800928e <_strtol_l.isra.0+0x1e>
 800929c:	2c2d      	cmp	r4, #45	; 0x2d
 800929e:	d134      	bne.n	800930a <_strtol_l.isra.0+0x9a>
 80092a0:	f89e 4000 	ldrb.w	r4, [lr]
 80092a4:	f04f 0801 	mov.w	r8, #1
 80092a8:	f106 0e02 	add.w	lr, r6, #2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d05c      	beq.n	800936a <_strtol_l.isra.0+0xfa>
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	d10c      	bne.n	80092ce <_strtol_l.isra.0+0x5e>
 80092b4:	2c30      	cmp	r4, #48	; 0x30
 80092b6:	d10a      	bne.n	80092ce <_strtol_l.isra.0+0x5e>
 80092b8:	f89e 4000 	ldrb.w	r4, [lr]
 80092bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80092c0:	2c58      	cmp	r4, #88	; 0x58
 80092c2:	d14d      	bne.n	8009360 <_strtol_l.isra.0+0xf0>
 80092c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80092c8:	2310      	movs	r3, #16
 80092ca:	f10e 0e02 	add.w	lr, lr, #2
 80092ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80092d2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80092d6:	2600      	movs	r6, #0
 80092d8:	fbbc f9f3 	udiv	r9, ip, r3
 80092dc:	4635      	mov	r5, r6
 80092de:	fb03 ca19 	mls	sl, r3, r9, ip
 80092e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80092e6:	2f09      	cmp	r7, #9
 80092e8:	d818      	bhi.n	800931c <_strtol_l.isra.0+0xac>
 80092ea:	463c      	mov	r4, r7
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	dd24      	ble.n	800933a <_strtol_l.isra.0+0xca>
 80092f0:	2e00      	cmp	r6, #0
 80092f2:	db1f      	blt.n	8009334 <_strtol_l.isra.0+0xc4>
 80092f4:	45a9      	cmp	r9, r5
 80092f6:	d31d      	bcc.n	8009334 <_strtol_l.isra.0+0xc4>
 80092f8:	d101      	bne.n	80092fe <_strtol_l.isra.0+0x8e>
 80092fa:	45a2      	cmp	sl, r4
 80092fc:	db1a      	blt.n	8009334 <_strtol_l.isra.0+0xc4>
 80092fe:	fb05 4503 	mla	r5, r5, r3, r4
 8009302:	2601      	movs	r6, #1
 8009304:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009308:	e7eb      	b.n	80092e2 <_strtol_l.isra.0+0x72>
 800930a:	2c2b      	cmp	r4, #43	; 0x2b
 800930c:	bf08      	it	eq
 800930e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009312:	46a8      	mov	r8, r5
 8009314:	bf08      	it	eq
 8009316:	f106 0e02 	addeq.w	lr, r6, #2
 800931a:	e7c7      	b.n	80092ac <_strtol_l.isra.0+0x3c>
 800931c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009320:	2f19      	cmp	r7, #25
 8009322:	d801      	bhi.n	8009328 <_strtol_l.isra.0+0xb8>
 8009324:	3c37      	subs	r4, #55	; 0x37
 8009326:	e7e1      	b.n	80092ec <_strtol_l.isra.0+0x7c>
 8009328:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800932c:	2f19      	cmp	r7, #25
 800932e:	d804      	bhi.n	800933a <_strtol_l.isra.0+0xca>
 8009330:	3c57      	subs	r4, #87	; 0x57
 8009332:	e7db      	b.n	80092ec <_strtol_l.isra.0+0x7c>
 8009334:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009338:	e7e4      	b.n	8009304 <_strtol_l.isra.0+0x94>
 800933a:	2e00      	cmp	r6, #0
 800933c:	da05      	bge.n	800934a <_strtol_l.isra.0+0xda>
 800933e:	2322      	movs	r3, #34	; 0x22
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	4665      	mov	r5, ip
 8009344:	b942      	cbnz	r2, 8009358 <_strtol_l.isra.0+0xe8>
 8009346:	4628      	mov	r0, r5
 8009348:	e79d      	b.n	8009286 <_strtol_l.isra.0+0x16>
 800934a:	f1b8 0f00 	cmp.w	r8, #0
 800934e:	d000      	beq.n	8009352 <_strtol_l.isra.0+0xe2>
 8009350:	426d      	negs	r5, r5
 8009352:	2a00      	cmp	r2, #0
 8009354:	d0f7      	beq.n	8009346 <_strtol_l.isra.0+0xd6>
 8009356:	b10e      	cbz	r6, 800935c <_strtol_l.isra.0+0xec>
 8009358:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800935c:	6011      	str	r1, [r2, #0]
 800935e:	e7f2      	b.n	8009346 <_strtol_l.isra.0+0xd6>
 8009360:	2430      	movs	r4, #48	; 0x30
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1b3      	bne.n	80092ce <_strtol_l.isra.0+0x5e>
 8009366:	2308      	movs	r3, #8
 8009368:	e7b1      	b.n	80092ce <_strtol_l.isra.0+0x5e>
 800936a:	2c30      	cmp	r4, #48	; 0x30
 800936c:	d0a4      	beq.n	80092b8 <_strtol_l.isra.0+0x48>
 800936e:	230a      	movs	r3, #10
 8009370:	e7ad      	b.n	80092ce <_strtol_l.isra.0+0x5e>
 8009372:	bf00      	nop
 8009374:	0800b949 	.word	0x0800b949

08009378 <strtol>:
 8009378:	4613      	mov	r3, r2
 800937a:	460a      	mov	r2, r1
 800937c:	4601      	mov	r1, r0
 800937e:	4802      	ldr	r0, [pc, #8]	; (8009388 <strtol+0x10>)
 8009380:	6800      	ldr	r0, [r0, #0]
 8009382:	f7ff bf75 	b.w	8009270 <_strtol_l.isra.0>
 8009386:	bf00      	nop
 8009388:	20000010 	.word	0x20000010

0800938c <_write_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d07      	ldr	r5, [pc, #28]	; (80093ac <_write_r+0x20>)
 8009390:	4604      	mov	r4, r0
 8009392:	4608      	mov	r0, r1
 8009394:	4611      	mov	r1, r2
 8009396:	2200      	movs	r2, #0
 8009398:	602a      	str	r2, [r5, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	f7f8 feea 	bl	8002174 <_write>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_write_r+0x1e>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_write_r+0x1e>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	2000be1c 	.word	0x2000be1c

080093b0 <_close_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d06      	ldr	r5, [pc, #24]	; (80093cc <_close_r+0x1c>)
 80093b4:	2300      	movs	r3, #0
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	f7f8 fe5d 	bl	800207a <_close>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_close_r+0x1a>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_close_r+0x1a>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	2000be1c 	.word	0x2000be1c

080093d0 <quorem>:
 80093d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	6903      	ldr	r3, [r0, #16]
 80093d6:	690c      	ldr	r4, [r1, #16]
 80093d8:	42a3      	cmp	r3, r4
 80093da:	4607      	mov	r7, r0
 80093dc:	f2c0 8081 	blt.w	80094e2 <quorem+0x112>
 80093e0:	3c01      	subs	r4, #1
 80093e2:	f101 0814 	add.w	r8, r1, #20
 80093e6:	f100 0514 	add.w	r5, r0, #20
 80093ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f8:	3301      	adds	r3, #1
 80093fa:	429a      	cmp	r2, r3
 80093fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009400:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009404:	fbb2 f6f3 	udiv	r6, r2, r3
 8009408:	d331      	bcc.n	800946e <quorem+0x9e>
 800940a:	f04f 0e00 	mov.w	lr, #0
 800940e:	4640      	mov	r0, r8
 8009410:	46ac      	mov	ip, r5
 8009412:	46f2      	mov	sl, lr
 8009414:	f850 2b04 	ldr.w	r2, [r0], #4
 8009418:	b293      	uxth	r3, r2
 800941a:	fb06 e303 	mla	r3, r6, r3, lr
 800941e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009422:	b29b      	uxth	r3, r3
 8009424:	ebaa 0303 	sub.w	r3, sl, r3
 8009428:	0c12      	lsrs	r2, r2, #16
 800942a:	f8dc a000 	ldr.w	sl, [ip]
 800942e:	fb06 e202 	mla	r2, r6, r2, lr
 8009432:	fa13 f38a 	uxtah	r3, r3, sl
 8009436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800943a:	fa1f fa82 	uxth.w	sl, r2
 800943e:	f8dc 2000 	ldr.w	r2, [ip]
 8009442:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009446:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800944a:	b29b      	uxth	r3, r3
 800944c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009450:	4581      	cmp	r9, r0
 8009452:	f84c 3b04 	str.w	r3, [ip], #4
 8009456:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800945a:	d2db      	bcs.n	8009414 <quorem+0x44>
 800945c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009460:	b92b      	cbnz	r3, 800946e <quorem+0x9e>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	3b04      	subs	r3, #4
 8009466:	429d      	cmp	r5, r3
 8009468:	461a      	mov	r2, r3
 800946a:	d32e      	bcc.n	80094ca <quorem+0xfa>
 800946c:	613c      	str	r4, [r7, #16]
 800946e:	4638      	mov	r0, r7
 8009470:	f001 f8e8 	bl	800a644 <__mcmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	db24      	blt.n	80094c2 <quorem+0xf2>
 8009478:	3601      	adds	r6, #1
 800947a:	4628      	mov	r0, r5
 800947c:	f04f 0c00 	mov.w	ip, #0
 8009480:	f858 2b04 	ldr.w	r2, [r8], #4
 8009484:	f8d0 e000 	ldr.w	lr, [r0]
 8009488:	b293      	uxth	r3, r2
 800948a:	ebac 0303 	sub.w	r3, ip, r3
 800948e:	0c12      	lsrs	r2, r2, #16
 8009490:	fa13 f38e 	uxtah	r3, r3, lr
 8009494:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800949c:	b29b      	uxth	r3, r3
 800949e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a2:	45c1      	cmp	r9, r8
 80094a4:	f840 3b04 	str.w	r3, [r0], #4
 80094a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80094ac:	d2e8      	bcs.n	8009480 <quorem+0xb0>
 80094ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094b6:	b922      	cbnz	r2, 80094c2 <quorem+0xf2>
 80094b8:	3b04      	subs	r3, #4
 80094ba:	429d      	cmp	r5, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	d30a      	bcc.n	80094d6 <quorem+0x106>
 80094c0:	613c      	str	r4, [r7, #16]
 80094c2:	4630      	mov	r0, r6
 80094c4:	b003      	add	sp, #12
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	6812      	ldr	r2, [r2, #0]
 80094cc:	3b04      	subs	r3, #4
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	d1cc      	bne.n	800946c <quorem+0x9c>
 80094d2:	3c01      	subs	r4, #1
 80094d4:	e7c7      	b.n	8009466 <quorem+0x96>
 80094d6:	6812      	ldr	r2, [r2, #0]
 80094d8:	3b04      	subs	r3, #4
 80094da:	2a00      	cmp	r2, #0
 80094dc:	d1f0      	bne.n	80094c0 <quorem+0xf0>
 80094de:	3c01      	subs	r4, #1
 80094e0:	e7eb      	b.n	80094ba <quorem+0xea>
 80094e2:	2000      	movs	r0, #0
 80094e4:	e7ee      	b.n	80094c4 <quorem+0xf4>
	...

080094e8 <_dtoa_r>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	ed2d 8b02 	vpush	{d8}
 80094f0:	ec57 6b10 	vmov	r6, r7, d0
 80094f4:	b095      	sub	sp, #84	; 0x54
 80094f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094fc:	9105      	str	r1, [sp, #20]
 80094fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009502:	4604      	mov	r4, r0
 8009504:	9209      	str	r2, [sp, #36]	; 0x24
 8009506:	930f      	str	r3, [sp, #60]	; 0x3c
 8009508:	b975      	cbnz	r5, 8009528 <_dtoa_r+0x40>
 800950a:	2010      	movs	r0, #16
 800950c:	f000 fdee 	bl	800a0ec <malloc>
 8009510:	4602      	mov	r2, r0
 8009512:	6260      	str	r0, [r4, #36]	; 0x24
 8009514:	b920      	cbnz	r0, 8009520 <_dtoa_r+0x38>
 8009516:	4bb2      	ldr	r3, [pc, #712]	; (80097e0 <_dtoa_r+0x2f8>)
 8009518:	21ea      	movs	r1, #234	; 0xea
 800951a:	48b2      	ldr	r0, [pc, #712]	; (80097e4 <_dtoa_r+0x2fc>)
 800951c:	f001 fd36 	bl	800af8c <__assert_func>
 8009520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009524:	6005      	str	r5, [r0, #0]
 8009526:	60c5      	str	r5, [r0, #12]
 8009528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800952a:	6819      	ldr	r1, [r3, #0]
 800952c:	b151      	cbz	r1, 8009544 <_dtoa_r+0x5c>
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	604a      	str	r2, [r1, #4]
 8009532:	2301      	movs	r3, #1
 8009534:	4093      	lsls	r3, r2
 8009536:	608b      	str	r3, [r1, #8]
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fe45 	bl	800a1c8 <_Bfree>
 800953e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	1e3b      	subs	r3, r7, #0
 8009546:	bfb9      	ittee	lt
 8009548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800954c:	9303      	strlt	r3, [sp, #12]
 800954e:	2300      	movge	r3, #0
 8009550:	f8c8 3000 	strge.w	r3, [r8]
 8009554:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009558:	4ba3      	ldr	r3, [pc, #652]	; (80097e8 <_dtoa_r+0x300>)
 800955a:	bfbc      	itt	lt
 800955c:	2201      	movlt	r2, #1
 800955e:	f8c8 2000 	strlt.w	r2, [r8]
 8009562:	ea33 0309 	bics.w	r3, r3, r9
 8009566:	d11b      	bne.n	80095a0 <_dtoa_r+0xb8>
 8009568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800956a:	f242 730f 	movw	r3, #9999	; 0x270f
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009574:	4333      	orrs	r3, r6
 8009576:	f000 857a 	beq.w	800a06e <_dtoa_r+0xb86>
 800957a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957c:	b963      	cbnz	r3, 8009598 <_dtoa_r+0xb0>
 800957e:	4b9b      	ldr	r3, [pc, #620]	; (80097ec <_dtoa_r+0x304>)
 8009580:	e024      	b.n	80095cc <_dtoa_r+0xe4>
 8009582:	4b9b      	ldr	r3, [pc, #620]	; (80097f0 <_dtoa_r+0x308>)
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	9800      	ldr	r0, [sp, #0]
 800958e:	b015      	add	sp, #84	; 0x54
 8009590:	ecbd 8b02 	vpop	{d8}
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	4b94      	ldr	r3, [pc, #592]	; (80097ec <_dtoa_r+0x304>)
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	3303      	adds	r3, #3
 800959e:	e7f3      	b.n	8009588 <_dtoa_r+0xa0>
 80095a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095a4:	2200      	movs	r2, #0
 80095a6:	ec51 0b17 	vmov	r0, r1, d7
 80095aa:	2300      	movs	r3, #0
 80095ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80095b0:	f7f7 fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80095b4:	4680      	mov	r8, r0
 80095b6:	b158      	cbz	r0, 80095d0 <_dtoa_r+0xe8>
 80095b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095ba:	2301      	movs	r3, #1
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 8551 	beq.w	800a068 <_dtoa_r+0xb80>
 80095c6:	488b      	ldr	r0, [pc, #556]	; (80097f4 <_dtoa_r+0x30c>)
 80095c8:	6018      	str	r0, [r3, #0]
 80095ca:	1e43      	subs	r3, r0, #1
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	e7dd      	b.n	800958c <_dtoa_r+0xa4>
 80095d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80095d4:	aa12      	add	r2, sp, #72	; 0x48
 80095d6:	a913      	add	r1, sp, #76	; 0x4c
 80095d8:	4620      	mov	r0, r4
 80095da:	f001 f8d7 	bl	800a78c <__d2b>
 80095de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095e2:	4683      	mov	fp, r0
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	d07c      	beq.n	80096e2 <_dtoa_r+0x1fa>
 80095e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80095ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80095f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80095fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80095fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009602:	4b7d      	ldr	r3, [pc, #500]	; (80097f8 <_dtoa_r+0x310>)
 8009604:	2200      	movs	r2, #0
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	f7f6 fe45 	bl	8000298 <__aeabi_dsub>
 800960e:	a36e      	add	r3, pc, #440	; (adr r3, 80097c8 <_dtoa_r+0x2e0>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 fff8 	bl	8000608 <__aeabi_dmul>
 8009618:	a36d      	add	r3, pc, #436	; (adr r3, 80097d0 <_dtoa_r+0x2e8>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f6 fe3d 	bl	800029c <__adddf3>
 8009622:	4606      	mov	r6, r0
 8009624:	4628      	mov	r0, r5
 8009626:	460f      	mov	r7, r1
 8009628:	f7f6 ff84 	bl	8000534 <__aeabi_i2d>
 800962c:	a36a      	add	r3, pc, #424	; (adr r3, 80097d8 <_dtoa_r+0x2f0>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 ffe9 	bl	8000608 <__aeabi_dmul>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4630      	mov	r0, r6
 800963c:	4639      	mov	r1, r7
 800963e:	f7f6 fe2d 	bl	800029c <__adddf3>
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	f7f7 fa8f 	bl	8000b68 <__aeabi_d2iz>
 800964a:	2200      	movs	r2, #0
 800964c:	4682      	mov	sl, r0
 800964e:	2300      	movs	r3, #0
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f7 fa4a 	bl	8000aec <__aeabi_dcmplt>
 8009658:	b148      	cbz	r0, 800966e <_dtoa_r+0x186>
 800965a:	4650      	mov	r0, sl
 800965c:	f7f6 ff6a 	bl	8000534 <__aeabi_i2d>
 8009660:	4632      	mov	r2, r6
 8009662:	463b      	mov	r3, r7
 8009664:	f7f7 fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 8009668:	b908      	cbnz	r0, 800966e <_dtoa_r+0x186>
 800966a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800966e:	f1ba 0f16 	cmp.w	sl, #22
 8009672:	d854      	bhi.n	800971e <_dtoa_r+0x236>
 8009674:	4b61      	ldr	r3, [pc, #388]	; (80097fc <_dtoa_r+0x314>)
 8009676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009682:	f7f7 fa33 	bl	8000aec <__aeabi_dcmplt>
 8009686:	2800      	cmp	r0, #0
 8009688:	d04b      	beq.n	8009722 <_dtoa_r+0x23a>
 800968a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800968e:	2300      	movs	r3, #0
 8009690:	930e      	str	r3, [sp, #56]	; 0x38
 8009692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009694:	1b5d      	subs	r5, r3, r5
 8009696:	1e6b      	subs	r3, r5, #1
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	bf43      	ittte	mi
 800969c:	2300      	movmi	r3, #0
 800969e:	f1c5 0801 	rsbmi	r8, r5, #1
 80096a2:	9304      	strmi	r3, [sp, #16]
 80096a4:	f04f 0800 	movpl.w	r8, #0
 80096a8:	f1ba 0f00 	cmp.w	sl, #0
 80096ac:	db3b      	blt.n	8009726 <_dtoa_r+0x23e>
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80096b4:	4453      	add	r3, sl
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	2300      	movs	r3, #0
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	9b05      	ldr	r3, [sp, #20]
 80096be:	2b09      	cmp	r3, #9
 80096c0:	d869      	bhi.n	8009796 <_dtoa_r+0x2ae>
 80096c2:	2b05      	cmp	r3, #5
 80096c4:	bfc4      	itt	gt
 80096c6:	3b04      	subgt	r3, #4
 80096c8:	9305      	strgt	r3, [sp, #20]
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	f1a3 0302 	sub.w	r3, r3, #2
 80096d0:	bfcc      	ite	gt
 80096d2:	2500      	movgt	r5, #0
 80096d4:	2501      	movle	r5, #1
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d869      	bhi.n	80097ae <_dtoa_r+0x2c6>
 80096da:	e8df f003 	tbb	[pc, r3]
 80096de:	4e2c      	.short	0x4e2c
 80096e0:	5a4c      	.short	0x5a4c
 80096e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80096e6:	441d      	add	r5, r3
 80096e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	bfc1      	itttt	gt
 80096f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80096f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80096fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009700:	bfda      	itte	le
 8009702:	f1c3 0320 	rsble	r3, r3, #32
 8009706:	fa06 f003 	lslle.w	r0, r6, r3
 800970a:	4318      	orrgt	r0, r3
 800970c:	f7f6 ff02 	bl	8000514 <__aeabi_ui2d>
 8009710:	2301      	movs	r3, #1
 8009712:	4606      	mov	r6, r0
 8009714:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009718:	3d01      	subs	r5, #1
 800971a:	9310      	str	r3, [sp, #64]	; 0x40
 800971c:	e771      	b.n	8009602 <_dtoa_r+0x11a>
 800971e:	2301      	movs	r3, #1
 8009720:	e7b6      	b.n	8009690 <_dtoa_r+0x1a8>
 8009722:	900e      	str	r0, [sp, #56]	; 0x38
 8009724:	e7b5      	b.n	8009692 <_dtoa_r+0x1aa>
 8009726:	f1ca 0300 	rsb	r3, sl, #0
 800972a:	9306      	str	r3, [sp, #24]
 800972c:	2300      	movs	r3, #0
 800972e:	eba8 080a 	sub.w	r8, r8, sl
 8009732:	930d      	str	r3, [sp, #52]	; 0x34
 8009734:	e7c2      	b.n	80096bc <_dtoa_r+0x1d4>
 8009736:	2300      	movs	r3, #0
 8009738:	9308      	str	r3, [sp, #32]
 800973a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	dc39      	bgt.n	80097b4 <_dtoa_r+0x2cc>
 8009740:	f04f 0901 	mov.w	r9, #1
 8009744:	f8cd 9004 	str.w	r9, [sp, #4]
 8009748:	464b      	mov	r3, r9
 800974a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800974e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009750:	2200      	movs	r2, #0
 8009752:	6042      	str	r2, [r0, #4]
 8009754:	2204      	movs	r2, #4
 8009756:	f102 0614 	add.w	r6, r2, #20
 800975a:	429e      	cmp	r6, r3
 800975c:	6841      	ldr	r1, [r0, #4]
 800975e:	d92f      	bls.n	80097c0 <_dtoa_r+0x2d8>
 8009760:	4620      	mov	r0, r4
 8009762:	f000 fcf1 	bl	800a148 <_Balloc>
 8009766:	9000      	str	r0, [sp, #0]
 8009768:	2800      	cmp	r0, #0
 800976a:	d14b      	bne.n	8009804 <_dtoa_r+0x31c>
 800976c:	4b24      	ldr	r3, [pc, #144]	; (8009800 <_dtoa_r+0x318>)
 800976e:	4602      	mov	r2, r0
 8009770:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009774:	e6d1      	b.n	800951a <_dtoa_r+0x32>
 8009776:	2301      	movs	r3, #1
 8009778:	e7de      	b.n	8009738 <_dtoa_r+0x250>
 800977a:	2300      	movs	r3, #0
 800977c:	9308      	str	r3, [sp, #32]
 800977e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009780:	eb0a 0903 	add.w	r9, sl, r3
 8009784:	f109 0301 	add.w	r3, r9, #1
 8009788:	2b01      	cmp	r3, #1
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	bfb8      	it	lt
 800978e:	2301      	movlt	r3, #1
 8009790:	e7dd      	b.n	800974e <_dtoa_r+0x266>
 8009792:	2301      	movs	r3, #1
 8009794:	e7f2      	b.n	800977c <_dtoa_r+0x294>
 8009796:	2501      	movs	r5, #1
 8009798:	2300      	movs	r3, #0
 800979a:	9305      	str	r3, [sp, #20]
 800979c:	9508      	str	r5, [sp, #32]
 800979e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80097a8:	2312      	movs	r3, #18
 80097aa:	9209      	str	r2, [sp, #36]	; 0x24
 80097ac:	e7cf      	b.n	800974e <_dtoa_r+0x266>
 80097ae:	2301      	movs	r3, #1
 80097b0:	9308      	str	r3, [sp, #32]
 80097b2:	e7f4      	b.n	800979e <_dtoa_r+0x2b6>
 80097b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80097b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80097bc:	464b      	mov	r3, r9
 80097be:	e7c6      	b.n	800974e <_dtoa_r+0x266>
 80097c0:	3101      	adds	r1, #1
 80097c2:	6041      	str	r1, [r0, #4]
 80097c4:	0052      	lsls	r2, r2, #1
 80097c6:	e7c6      	b.n	8009756 <_dtoa_r+0x26e>
 80097c8:	636f4361 	.word	0x636f4361
 80097cc:	3fd287a7 	.word	0x3fd287a7
 80097d0:	8b60c8b3 	.word	0x8b60c8b3
 80097d4:	3fc68a28 	.word	0x3fc68a28
 80097d8:	509f79fb 	.word	0x509f79fb
 80097dc:	3fd34413 	.word	0x3fd34413
 80097e0:	0800ba56 	.word	0x0800ba56
 80097e4:	0800ba6d 	.word	0x0800ba6d
 80097e8:	7ff00000 	.word	0x7ff00000
 80097ec:	0800ba52 	.word	0x0800ba52
 80097f0:	0800ba49 	.word	0x0800ba49
 80097f4:	0800b925 	.word	0x0800b925
 80097f8:	3ff80000 	.word	0x3ff80000
 80097fc:	0800bb68 	.word	0x0800bb68
 8009800:	0800bacc 	.word	0x0800bacc
 8009804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009806:	9a00      	ldr	r2, [sp, #0]
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	2b0e      	cmp	r3, #14
 800980e:	f200 80ad 	bhi.w	800996c <_dtoa_r+0x484>
 8009812:	2d00      	cmp	r5, #0
 8009814:	f000 80aa 	beq.w	800996c <_dtoa_r+0x484>
 8009818:	f1ba 0f00 	cmp.w	sl, #0
 800981c:	dd36      	ble.n	800988c <_dtoa_r+0x3a4>
 800981e:	4ac3      	ldr	r2, [pc, #780]	; (8009b2c <_dtoa_r+0x644>)
 8009820:	f00a 030f 	and.w	r3, sl, #15
 8009824:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009828:	ed93 7b00 	vldr	d7, [r3]
 800982c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009830:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009834:	eeb0 8a47 	vmov.f32	s16, s14
 8009838:	eef0 8a67 	vmov.f32	s17, s15
 800983c:	d016      	beq.n	800986c <_dtoa_r+0x384>
 800983e:	4bbc      	ldr	r3, [pc, #752]	; (8009b30 <_dtoa_r+0x648>)
 8009840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009848:	f7f7 f808 	bl	800085c <__aeabi_ddiv>
 800984c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009850:	f007 070f 	and.w	r7, r7, #15
 8009854:	2503      	movs	r5, #3
 8009856:	4eb6      	ldr	r6, [pc, #728]	; (8009b30 <_dtoa_r+0x648>)
 8009858:	b957      	cbnz	r7, 8009870 <_dtoa_r+0x388>
 800985a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800985e:	ec53 2b18 	vmov	r2, r3, d8
 8009862:	f7f6 fffb 	bl	800085c <__aeabi_ddiv>
 8009866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800986a:	e029      	b.n	80098c0 <_dtoa_r+0x3d8>
 800986c:	2502      	movs	r5, #2
 800986e:	e7f2      	b.n	8009856 <_dtoa_r+0x36e>
 8009870:	07f9      	lsls	r1, r7, #31
 8009872:	d508      	bpl.n	8009886 <_dtoa_r+0x39e>
 8009874:	ec51 0b18 	vmov	r0, r1, d8
 8009878:	e9d6 2300 	ldrd	r2, r3, [r6]
 800987c:	f7f6 fec4 	bl	8000608 <__aeabi_dmul>
 8009880:	ec41 0b18 	vmov	d8, r0, r1
 8009884:	3501      	adds	r5, #1
 8009886:	107f      	asrs	r7, r7, #1
 8009888:	3608      	adds	r6, #8
 800988a:	e7e5      	b.n	8009858 <_dtoa_r+0x370>
 800988c:	f000 80a6 	beq.w	80099dc <_dtoa_r+0x4f4>
 8009890:	f1ca 0600 	rsb	r6, sl, #0
 8009894:	4ba5      	ldr	r3, [pc, #660]	; (8009b2c <_dtoa_r+0x644>)
 8009896:	4fa6      	ldr	r7, [pc, #664]	; (8009b30 <_dtoa_r+0x648>)
 8009898:	f006 020f 	and.w	r2, r6, #15
 800989c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098a8:	f7f6 feae 	bl	8000608 <__aeabi_dmul>
 80098ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098b0:	1136      	asrs	r6, r6, #4
 80098b2:	2300      	movs	r3, #0
 80098b4:	2502      	movs	r5, #2
 80098b6:	2e00      	cmp	r6, #0
 80098b8:	f040 8085 	bne.w	80099c6 <_dtoa_r+0x4de>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1d2      	bne.n	8009866 <_dtoa_r+0x37e>
 80098c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 808c 	beq.w	80099e0 <_dtoa_r+0x4f8>
 80098c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098cc:	4b99      	ldr	r3, [pc, #612]	; (8009b34 <_dtoa_r+0x64c>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f7 f90a 	bl	8000aec <__aeabi_dcmplt>
 80098d8:	2800      	cmp	r0, #0
 80098da:	f000 8081 	beq.w	80099e0 <_dtoa_r+0x4f8>
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d07d      	beq.n	80099e0 <_dtoa_r+0x4f8>
 80098e4:	f1b9 0f00 	cmp.w	r9, #0
 80098e8:	dd3c      	ble.n	8009964 <_dtoa_r+0x47c>
 80098ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80098ee:	9307      	str	r3, [sp, #28]
 80098f0:	2200      	movs	r2, #0
 80098f2:	4b91      	ldr	r3, [pc, #580]	; (8009b38 <_dtoa_r+0x650>)
 80098f4:	4630      	mov	r0, r6
 80098f6:	4639      	mov	r1, r7
 80098f8:	f7f6 fe86 	bl	8000608 <__aeabi_dmul>
 80098fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009900:	3501      	adds	r5, #1
 8009902:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009906:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800990a:	4628      	mov	r0, r5
 800990c:	f7f6 fe12 	bl	8000534 <__aeabi_i2d>
 8009910:	4632      	mov	r2, r6
 8009912:	463b      	mov	r3, r7
 8009914:	f7f6 fe78 	bl	8000608 <__aeabi_dmul>
 8009918:	4b88      	ldr	r3, [pc, #544]	; (8009b3c <_dtoa_r+0x654>)
 800991a:	2200      	movs	r2, #0
 800991c:	f7f6 fcbe 	bl	800029c <__adddf3>
 8009920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800992c:	2b00      	cmp	r3, #0
 800992e:	d15c      	bne.n	80099ea <_dtoa_r+0x502>
 8009930:	4b83      	ldr	r3, [pc, #524]	; (8009b40 <_dtoa_r+0x658>)
 8009932:	2200      	movs	r2, #0
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f6 fcae 	bl	8000298 <__aeabi_dsub>
 800993c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009940:	4606      	mov	r6, r0
 8009942:	460f      	mov	r7, r1
 8009944:	f7f7 f8f0 	bl	8000b28 <__aeabi_dcmpgt>
 8009948:	2800      	cmp	r0, #0
 800994a:	f040 8296 	bne.w	8009e7a <_dtoa_r+0x992>
 800994e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009952:	4630      	mov	r0, r6
 8009954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009958:	4639      	mov	r1, r7
 800995a:	f7f7 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800995e:	2800      	cmp	r0, #0
 8009960:	f040 8288 	bne.w	8009e74 <_dtoa_r+0x98c>
 8009964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009968:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800996c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800996e:	2b00      	cmp	r3, #0
 8009970:	f2c0 8158 	blt.w	8009c24 <_dtoa_r+0x73c>
 8009974:	f1ba 0f0e 	cmp.w	sl, #14
 8009978:	f300 8154 	bgt.w	8009c24 <_dtoa_r+0x73c>
 800997c:	4b6b      	ldr	r3, [pc, #428]	; (8009b2c <_dtoa_r+0x644>)
 800997e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009982:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009988:	2b00      	cmp	r3, #0
 800998a:	f280 80e3 	bge.w	8009b54 <_dtoa_r+0x66c>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	f300 80df 	bgt.w	8009b54 <_dtoa_r+0x66c>
 8009996:	f040 826d 	bne.w	8009e74 <_dtoa_r+0x98c>
 800999a:	4b69      	ldr	r3, [pc, #420]	; (8009b40 <_dtoa_r+0x658>)
 800999c:	2200      	movs	r2, #0
 800999e:	4640      	mov	r0, r8
 80099a0:	4649      	mov	r1, r9
 80099a2:	f7f6 fe31 	bl	8000608 <__aeabi_dmul>
 80099a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099aa:	f7f7 f8b3 	bl	8000b14 <__aeabi_dcmpge>
 80099ae:	9e01      	ldr	r6, [sp, #4]
 80099b0:	4637      	mov	r7, r6
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f040 8243 	bne.w	8009e3e <_dtoa_r+0x956>
 80099b8:	9d00      	ldr	r5, [sp, #0]
 80099ba:	2331      	movs	r3, #49	; 0x31
 80099bc:	f805 3b01 	strb.w	r3, [r5], #1
 80099c0:	f10a 0a01 	add.w	sl, sl, #1
 80099c4:	e23f      	b.n	8009e46 <_dtoa_r+0x95e>
 80099c6:	07f2      	lsls	r2, r6, #31
 80099c8:	d505      	bpl.n	80099d6 <_dtoa_r+0x4ee>
 80099ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ce:	f7f6 fe1b 	bl	8000608 <__aeabi_dmul>
 80099d2:	3501      	adds	r5, #1
 80099d4:	2301      	movs	r3, #1
 80099d6:	1076      	asrs	r6, r6, #1
 80099d8:	3708      	adds	r7, #8
 80099da:	e76c      	b.n	80098b6 <_dtoa_r+0x3ce>
 80099dc:	2502      	movs	r5, #2
 80099de:	e76f      	b.n	80098c0 <_dtoa_r+0x3d8>
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80099e6:	930c      	str	r3, [sp, #48]	; 0x30
 80099e8:	e78d      	b.n	8009906 <_dtoa_r+0x41e>
 80099ea:	9900      	ldr	r1, [sp, #0]
 80099ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80099ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099f0:	4b4e      	ldr	r3, [pc, #312]	; (8009b2c <_dtoa_r+0x644>)
 80099f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099f6:	4401      	add	r1, r0
 80099f8:	9102      	str	r1, [sp, #8]
 80099fa:	9908      	ldr	r1, [sp, #32]
 80099fc:	eeb0 8a47 	vmov.f32	s16, s14
 8009a00:	eef0 8a67 	vmov.f32	s17, s15
 8009a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	d045      	beq.n	8009a9c <_dtoa_r+0x5b4>
 8009a10:	494c      	ldr	r1, [pc, #304]	; (8009b44 <_dtoa_r+0x65c>)
 8009a12:	2000      	movs	r0, #0
 8009a14:	f7f6 ff22 	bl	800085c <__aeabi_ddiv>
 8009a18:	ec53 2b18 	vmov	r2, r3, d8
 8009a1c:	f7f6 fc3c 	bl	8000298 <__aeabi_dsub>
 8009a20:	9d00      	ldr	r5, [sp, #0]
 8009a22:	ec41 0b18 	vmov	d8, r0, r1
 8009a26:	4639      	mov	r1, r7
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7f7 f89d 	bl	8000b68 <__aeabi_d2iz>
 8009a2e:	900c      	str	r0, [sp, #48]	; 0x30
 8009a30:	f7f6 fd80 	bl	8000534 <__aeabi_i2d>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4630      	mov	r0, r6
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	f7f6 fc2c 	bl	8000298 <__aeabi_dsub>
 8009a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a42:	3330      	adds	r3, #48	; 0x30
 8009a44:	f805 3b01 	strb.w	r3, [r5], #1
 8009a48:	ec53 2b18 	vmov	r2, r3, d8
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	460f      	mov	r7, r1
 8009a50:	f7f7 f84c 	bl	8000aec <__aeabi_dcmplt>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d165      	bne.n	8009b24 <_dtoa_r+0x63c>
 8009a58:	4632      	mov	r2, r6
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	4935      	ldr	r1, [pc, #212]	; (8009b34 <_dtoa_r+0x64c>)
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f7f6 fc1a 	bl	8000298 <__aeabi_dsub>
 8009a64:	ec53 2b18 	vmov	r2, r3, d8
 8009a68:	f7f7 f840 	bl	8000aec <__aeabi_dcmplt>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f040 80b9 	bne.w	8009be4 <_dtoa_r+0x6fc>
 8009a72:	9b02      	ldr	r3, [sp, #8]
 8009a74:	429d      	cmp	r5, r3
 8009a76:	f43f af75 	beq.w	8009964 <_dtoa_r+0x47c>
 8009a7a:	4b2f      	ldr	r3, [pc, #188]	; (8009b38 <_dtoa_r+0x650>)
 8009a7c:	ec51 0b18 	vmov	r0, r1, d8
 8009a80:	2200      	movs	r2, #0
 8009a82:	f7f6 fdc1 	bl	8000608 <__aeabi_dmul>
 8009a86:	4b2c      	ldr	r3, [pc, #176]	; (8009b38 <_dtoa_r+0x650>)
 8009a88:	ec41 0b18 	vmov	d8, r0, r1
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4630      	mov	r0, r6
 8009a90:	4639      	mov	r1, r7
 8009a92:	f7f6 fdb9 	bl	8000608 <__aeabi_dmul>
 8009a96:	4606      	mov	r6, r0
 8009a98:	460f      	mov	r7, r1
 8009a9a:	e7c4      	b.n	8009a26 <_dtoa_r+0x53e>
 8009a9c:	ec51 0b17 	vmov	r0, r1, d7
 8009aa0:	f7f6 fdb2 	bl	8000608 <__aeabi_dmul>
 8009aa4:	9b02      	ldr	r3, [sp, #8]
 8009aa6:	9d00      	ldr	r5, [sp, #0]
 8009aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8009aaa:	ec41 0b18 	vmov	d8, r0, r1
 8009aae:	4639      	mov	r1, r7
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f7f7 f859 	bl	8000b68 <__aeabi_d2iz>
 8009ab6:	9011      	str	r0, [sp, #68]	; 0x44
 8009ab8:	f7f6 fd3c 	bl	8000534 <__aeabi_i2d>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	f7f6 fbe8 	bl	8000298 <__aeabi_dsub>
 8009ac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aca:	3330      	adds	r3, #48	; 0x30
 8009acc:	f805 3b01 	strb.w	r3, [r5], #1
 8009ad0:	9b02      	ldr	r3, [sp, #8]
 8009ad2:	429d      	cmp	r5, r3
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	460f      	mov	r7, r1
 8009ad8:	f04f 0200 	mov.w	r2, #0
 8009adc:	d134      	bne.n	8009b48 <_dtoa_r+0x660>
 8009ade:	4b19      	ldr	r3, [pc, #100]	; (8009b44 <_dtoa_r+0x65c>)
 8009ae0:	ec51 0b18 	vmov	r0, r1, d8
 8009ae4:	f7f6 fbda 	bl	800029c <__adddf3>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4630      	mov	r0, r6
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7f7 f81a 	bl	8000b28 <__aeabi_dcmpgt>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d175      	bne.n	8009be4 <_dtoa_r+0x6fc>
 8009af8:	ec53 2b18 	vmov	r2, r3, d8
 8009afc:	4911      	ldr	r1, [pc, #68]	; (8009b44 <_dtoa_r+0x65c>)
 8009afe:	2000      	movs	r0, #0
 8009b00:	f7f6 fbca 	bl	8000298 <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4630      	mov	r0, r6
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	f7f6 ffee 	bl	8000aec <__aeabi_dcmplt>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	f43f af27 	beq.w	8009964 <_dtoa_r+0x47c>
 8009b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b18:	1e6b      	subs	r3, r5, #1
 8009b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b20:	2b30      	cmp	r3, #48	; 0x30
 8009b22:	d0f8      	beq.n	8009b16 <_dtoa_r+0x62e>
 8009b24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b28:	e04a      	b.n	8009bc0 <_dtoa_r+0x6d8>
 8009b2a:	bf00      	nop
 8009b2c:	0800bb68 	.word	0x0800bb68
 8009b30:	0800bb40 	.word	0x0800bb40
 8009b34:	3ff00000 	.word	0x3ff00000
 8009b38:	40240000 	.word	0x40240000
 8009b3c:	401c0000 	.word	0x401c0000
 8009b40:	40140000 	.word	0x40140000
 8009b44:	3fe00000 	.word	0x3fe00000
 8009b48:	4baf      	ldr	r3, [pc, #700]	; (8009e08 <_dtoa_r+0x920>)
 8009b4a:	f7f6 fd5d 	bl	8000608 <__aeabi_dmul>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460f      	mov	r7, r1
 8009b52:	e7ac      	b.n	8009aae <_dtoa_r+0x5c6>
 8009b54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b58:	9d00      	ldr	r5, [sp, #0]
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	f7f6 fe7b 	bl	800085c <__aeabi_ddiv>
 8009b66:	f7f6 ffff 	bl	8000b68 <__aeabi_d2iz>
 8009b6a:	9002      	str	r0, [sp, #8]
 8009b6c:	f7f6 fce2 	bl	8000534 <__aeabi_i2d>
 8009b70:	4642      	mov	r2, r8
 8009b72:	464b      	mov	r3, r9
 8009b74:	f7f6 fd48 	bl	8000608 <__aeabi_dmul>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	4639      	mov	r1, r7
 8009b80:	f7f6 fb8a 	bl	8000298 <__aeabi_dsub>
 8009b84:	9e02      	ldr	r6, [sp, #8]
 8009b86:	9f01      	ldr	r7, [sp, #4]
 8009b88:	3630      	adds	r6, #48	; 0x30
 8009b8a:	f805 6b01 	strb.w	r6, [r5], #1
 8009b8e:	9e00      	ldr	r6, [sp, #0]
 8009b90:	1bae      	subs	r6, r5, r6
 8009b92:	42b7      	cmp	r7, r6
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	d137      	bne.n	8009c0a <_dtoa_r+0x722>
 8009b9a:	f7f6 fb7f 	bl	800029c <__adddf3>
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	464b      	mov	r3, r9
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	f7f6 ffbf 	bl	8000b28 <__aeabi_dcmpgt>
 8009baa:	b9c8      	cbnz	r0, 8009be0 <_dtoa_r+0x6f8>
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bb8:	b110      	cbz	r0, 8009bc0 <_dtoa_r+0x6d8>
 8009bba:	9b02      	ldr	r3, [sp, #8]
 8009bbc:	07d9      	lsls	r1, r3, #31
 8009bbe:	d40f      	bmi.n	8009be0 <_dtoa_r+0x6f8>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	f000 fb00 	bl	800a1c8 <_Bfree>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	702b      	strb	r3, [r5, #0]
 8009bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bce:	f10a 0001 	add.w	r0, sl, #1
 8009bd2:	6018      	str	r0, [r3, #0]
 8009bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f43f acd8 	beq.w	800958c <_dtoa_r+0xa4>
 8009bdc:	601d      	str	r5, [r3, #0]
 8009bde:	e4d5      	b.n	800958c <_dtoa_r+0xa4>
 8009be0:	f8cd a01c 	str.w	sl, [sp, #28]
 8009be4:	462b      	mov	r3, r5
 8009be6:	461d      	mov	r5, r3
 8009be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bec:	2a39      	cmp	r2, #57	; 0x39
 8009bee:	d108      	bne.n	8009c02 <_dtoa_r+0x71a>
 8009bf0:	9a00      	ldr	r2, [sp, #0]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d1f7      	bne.n	8009be6 <_dtoa_r+0x6fe>
 8009bf6:	9a07      	ldr	r2, [sp, #28]
 8009bf8:	9900      	ldr	r1, [sp, #0]
 8009bfa:	3201      	adds	r2, #1
 8009bfc:	9207      	str	r2, [sp, #28]
 8009bfe:	2230      	movs	r2, #48	; 0x30
 8009c00:	700a      	strb	r2, [r1, #0]
 8009c02:	781a      	ldrb	r2, [r3, #0]
 8009c04:	3201      	adds	r2, #1
 8009c06:	701a      	strb	r2, [r3, #0]
 8009c08:	e78c      	b.n	8009b24 <_dtoa_r+0x63c>
 8009c0a:	4b7f      	ldr	r3, [pc, #508]	; (8009e08 <_dtoa_r+0x920>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f7f6 fcfb 	bl	8000608 <__aeabi_dmul>
 8009c12:	2200      	movs	r2, #0
 8009c14:	2300      	movs	r3, #0
 8009c16:	4606      	mov	r6, r0
 8009c18:	460f      	mov	r7, r1
 8009c1a:	f7f6 ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d09b      	beq.n	8009b5a <_dtoa_r+0x672>
 8009c22:	e7cd      	b.n	8009bc0 <_dtoa_r+0x6d8>
 8009c24:	9a08      	ldr	r2, [sp, #32]
 8009c26:	2a00      	cmp	r2, #0
 8009c28:	f000 80c4 	beq.w	8009db4 <_dtoa_r+0x8cc>
 8009c2c:	9a05      	ldr	r2, [sp, #20]
 8009c2e:	2a01      	cmp	r2, #1
 8009c30:	f300 80a8 	bgt.w	8009d84 <_dtoa_r+0x89c>
 8009c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c36:	2a00      	cmp	r2, #0
 8009c38:	f000 80a0 	beq.w	8009d7c <_dtoa_r+0x894>
 8009c3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c40:	9e06      	ldr	r6, [sp, #24]
 8009c42:	4645      	mov	r5, r8
 8009c44:	9a04      	ldr	r2, [sp, #16]
 8009c46:	2101      	movs	r1, #1
 8009c48:	441a      	add	r2, r3
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4498      	add	r8, r3
 8009c4e:	9204      	str	r2, [sp, #16]
 8009c50:	f000 fb76 	bl	800a340 <__i2b>
 8009c54:	4607      	mov	r7, r0
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	dd0b      	ble.n	8009c72 <_dtoa_r+0x78a>
 8009c5a:	9b04      	ldr	r3, [sp, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dd08      	ble.n	8009c72 <_dtoa_r+0x78a>
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	9a04      	ldr	r2, [sp, #16]
 8009c64:	bfa8      	it	ge
 8009c66:	462b      	movge	r3, r5
 8009c68:	eba8 0803 	sub.w	r8, r8, r3
 8009c6c:	1aed      	subs	r5, r5, r3
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	9304      	str	r3, [sp, #16]
 8009c72:	9b06      	ldr	r3, [sp, #24]
 8009c74:	b1fb      	cbz	r3, 8009cb6 <_dtoa_r+0x7ce>
 8009c76:	9b08      	ldr	r3, [sp, #32]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 809f 	beq.w	8009dbc <_dtoa_r+0x8d4>
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	dd11      	ble.n	8009ca6 <_dtoa_r+0x7be>
 8009c82:	4639      	mov	r1, r7
 8009c84:	4632      	mov	r2, r6
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fc16 	bl	800a4b8 <__pow5mult>
 8009c8c:	465a      	mov	r2, fp
 8009c8e:	4601      	mov	r1, r0
 8009c90:	4607      	mov	r7, r0
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fb6a 	bl	800a36c <__multiply>
 8009c98:	4659      	mov	r1, fp
 8009c9a:	9007      	str	r0, [sp, #28]
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 fa93 	bl	800a1c8 <_Bfree>
 8009ca2:	9b07      	ldr	r3, [sp, #28]
 8009ca4:	469b      	mov	fp, r3
 8009ca6:	9b06      	ldr	r3, [sp, #24]
 8009ca8:	1b9a      	subs	r2, r3, r6
 8009caa:	d004      	beq.n	8009cb6 <_dtoa_r+0x7ce>
 8009cac:	4659      	mov	r1, fp
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fc02 	bl	800a4b8 <__pow5mult>
 8009cb4:	4683      	mov	fp, r0
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fb41 	bl	800a340 <__i2b>
 8009cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	dd7c      	ble.n	8009dc0 <_dtoa_r+0x8d8>
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4601      	mov	r1, r0
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 fbf4 	bl	800a4b8 <__pow5mult>
 8009cd0:	9b05      	ldr	r3, [sp, #20]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	dd76      	ble.n	8009dc6 <_dtoa_r+0x8de>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9306      	str	r3, [sp, #24]
 8009cdc:	6933      	ldr	r3, [r6, #16]
 8009cde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ce2:	6918      	ldr	r0, [r3, #16]
 8009ce4:	f000 fadc 	bl	800a2a0 <__hi0bits>
 8009ce8:	f1c0 0020 	rsb	r0, r0, #32
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	4418      	add	r0, r3
 8009cf0:	f010 001f 	ands.w	r0, r0, #31
 8009cf4:	f000 8086 	beq.w	8009e04 <_dtoa_r+0x91c>
 8009cf8:	f1c0 0320 	rsb	r3, r0, #32
 8009cfc:	2b04      	cmp	r3, #4
 8009cfe:	dd7f      	ble.n	8009e00 <_dtoa_r+0x918>
 8009d00:	f1c0 001c 	rsb	r0, r0, #28
 8009d04:	9b04      	ldr	r3, [sp, #16]
 8009d06:	4403      	add	r3, r0
 8009d08:	4480      	add	r8, r0
 8009d0a:	4405      	add	r5, r0
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	f1b8 0f00 	cmp.w	r8, #0
 8009d12:	dd05      	ble.n	8009d20 <_dtoa_r+0x838>
 8009d14:	4659      	mov	r1, fp
 8009d16:	4642      	mov	r2, r8
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fc27 	bl	800a56c <__lshift>
 8009d1e:	4683      	mov	fp, r0
 8009d20:	9b04      	ldr	r3, [sp, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dd05      	ble.n	8009d32 <_dtoa_r+0x84a>
 8009d26:	4631      	mov	r1, r6
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fc1e 	bl	800a56c <__lshift>
 8009d30:	4606      	mov	r6, r0
 8009d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d069      	beq.n	8009e0c <_dtoa_r+0x924>
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4658      	mov	r0, fp
 8009d3c:	f000 fc82 	bl	800a644 <__mcmp>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	da63      	bge.n	8009e0c <_dtoa_r+0x924>
 8009d44:	2300      	movs	r3, #0
 8009d46:	4659      	mov	r1, fp
 8009d48:	220a      	movs	r2, #10
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f000 fa5e 	bl	800a20c <__multadd>
 8009d50:	9b08      	ldr	r3, [sp, #32]
 8009d52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009d56:	4683      	mov	fp, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 818f 	beq.w	800a07c <_dtoa_r+0xb94>
 8009d5e:	4639      	mov	r1, r7
 8009d60:	2300      	movs	r3, #0
 8009d62:	220a      	movs	r2, #10
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 fa51 	bl	800a20c <__multadd>
 8009d6a:	f1b9 0f00 	cmp.w	r9, #0
 8009d6e:	4607      	mov	r7, r0
 8009d70:	f300 808e 	bgt.w	8009e90 <_dtoa_r+0x9a8>
 8009d74:	9b05      	ldr	r3, [sp, #20]
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	dc50      	bgt.n	8009e1c <_dtoa_r+0x934>
 8009d7a:	e089      	b.n	8009e90 <_dtoa_r+0x9a8>
 8009d7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d82:	e75d      	b.n	8009c40 <_dtoa_r+0x758>
 8009d84:	9b01      	ldr	r3, [sp, #4]
 8009d86:	1e5e      	subs	r6, r3, #1
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	42b3      	cmp	r3, r6
 8009d8c:	bfbf      	itttt	lt
 8009d8e:	9b06      	ldrlt	r3, [sp, #24]
 8009d90:	9606      	strlt	r6, [sp, #24]
 8009d92:	1af2      	sublt	r2, r6, r3
 8009d94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009d96:	bfb6      	itet	lt
 8009d98:	189b      	addlt	r3, r3, r2
 8009d9a:	1b9e      	subge	r6, r3, r6
 8009d9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	bfb8      	it	lt
 8009da2:	2600      	movlt	r6, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	bfb5      	itete	lt
 8009da8:	eba8 0503 	sublt.w	r5, r8, r3
 8009dac:	9b01      	ldrge	r3, [sp, #4]
 8009dae:	2300      	movlt	r3, #0
 8009db0:	4645      	movge	r5, r8
 8009db2:	e747      	b.n	8009c44 <_dtoa_r+0x75c>
 8009db4:	9e06      	ldr	r6, [sp, #24]
 8009db6:	9f08      	ldr	r7, [sp, #32]
 8009db8:	4645      	mov	r5, r8
 8009dba:	e74c      	b.n	8009c56 <_dtoa_r+0x76e>
 8009dbc:	9a06      	ldr	r2, [sp, #24]
 8009dbe:	e775      	b.n	8009cac <_dtoa_r+0x7c4>
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	dc18      	bgt.n	8009df8 <_dtoa_r+0x910>
 8009dc6:	9b02      	ldr	r3, [sp, #8]
 8009dc8:	b9b3      	cbnz	r3, 8009df8 <_dtoa_r+0x910>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dd0:	b9a3      	cbnz	r3, 8009dfc <_dtoa_r+0x914>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dd8:	0d1b      	lsrs	r3, r3, #20
 8009dda:	051b      	lsls	r3, r3, #20
 8009ddc:	b12b      	cbz	r3, 8009dea <_dtoa_r+0x902>
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	3301      	adds	r3, #1
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	f108 0801 	add.w	r8, r8, #1
 8009de8:	2301      	movs	r3, #1
 8009dea:	9306      	str	r3, [sp, #24]
 8009dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f47f af74 	bne.w	8009cdc <_dtoa_r+0x7f4>
 8009df4:	2001      	movs	r0, #1
 8009df6:	e779      	b.n	8009cec <_dtoa_r+0x804>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e7f6      	b.n	8009dea <_dtoa_r+0x902>
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	e7f4      	b.n	8009dea <_dtoa_r+0x902>
 8009e00:	d085      	beq.n	8009d0e <_dtoa_r+0x826>
 8009e02:	4618      	mov	r0, r3
 8009e04:	301c      	adds	r0, #28
 8009e06:	e77d      	b.n	8009d04 <_dtoa_r+0x81c>
 8009e08:	40240000 	.word	0x40240000
 8009e0c:	9b01      	ldr	r3, [sp, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	dc38      	bgt.n	8009e84 <_dtoa_r+0x99c>
 8009e12:	9b05      	ldr	r3, [sp, #20]
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	dd35      	ble.n	8009e84 <_dtoa_r+0x99c>
 8009e18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e1c:	f1b9 0f00 	cmp.w	r9, #0
 8009e20:	d10d      	bne.n	8009e3e <_dtoa_r+0x956>
 8009e22:	4631      	mov	r1, r6
 8009e24:	464b      	mov	r3, r9
 8009e26:	2205      	movs	r2, #5
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 f9ef 	bl	800a20c <__multadd>
 8009e2e:	4601      	mov	r1, r0
 8009e30:	4606      	mov	r6, r0
 8009e32:	4658      	mov	r0, fp
 8009e34:	f000 fc06 	bl	800a644 <__mcmp>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f73f adbd 	bgt.w	80099b8 <_dtoa_r+0x4d0>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e40:	9d00      	ldr	r5, [sp, #0]
 8009e42:	ea6f 0a03 	mvn.w	sl, r3
 8009e46:	f04f 0800 	mov.w	r8, #0
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 f9bb 	bl	800a1c8 <_Bfree>
 8009e52:	2f00      	cmp	r7, #0
 8009e54:	f43f aeb4 	beq.w	8009bc0 <_dtoa_r+0x6d8>
 8009e58:	f1b8 0f00 	cmp.w	r8, #0
 8009e5c:	d005      	beq.n	8009e6a <_dtoa_r+0x982>
 8009e5e:	45b8      	cmp	r8, r7
 8009e60:	d003      	beq.n	8009e6a <_dtoa_r+0x982>
 8009e62:	4641      	mov	r1, r8
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 f9af 	bl	800a1c8 <_Bfree>
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 f9ab 	bl	800a1c8 <_Bfree>
 8009e72:	e6a5      	b.n	8009bc0 <_dtoa_r+0x6d8>
 8009e74:	2600      	movs	r6, #0
 8009e76:	4637      	mov	r7, r6
 8009e78:	e7e1      	b.n	8009e3e <_dtoa_r+0x956>
 8009e7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009e7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e80:	4637      	mov	r7, r6
 8009e82:	e599      	b.n	80099b8 <_dtoa_r+0x4d0>
 8009e84:	9b08      	ldr	r3, [sp, #32]
 8009e86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 80fd 	beq.w	800a08a <_dtoa_r+0xba2>
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	dd05      	ble.n	8009ea0 <_dtoa_r+0x9b8>
 8009e94:	4639      	mov	r1, r7
 8009e96:	462a      	mov	r2, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f000 fb67 	bl	800a56c <__lshift>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	9b06      	ldr	r3, [sp, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d05c      	beq.n	8009f60 <_dtoa_r+0xa78>
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 f94d 	bl	800a148 <_Balloc>
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b928      	cbnz	r0, 8009ebe <_dtoa_r+0x9d6>
 8009eb2:	4b80      	ldr	r3, [pc, #512]	; (800a0b4 <_dtoa_r+0xbcc>)
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009eba:	f7ff bb2e 	b.w	800951a <_dtoa_r+0x32>
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	3202      	adds	r2, #2
 8009ec2:	0092      	lsls	r2, r2, #2
 8009ec4:	f107 010c 	add.w	r1, r7, #12
 8009ec8:	300c      	adds	r0, #12
 8009eca:	f7fe fbe2 	bl	8008692 <memcpy>
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f000 fb4a 	bl	800a56c <__lshift>
 8009ed8:	9b00      	ldr	r3, [sp, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	444b      	add	r3, r9
 8009ee2:	9307      	str	r3, [sp, #28]
 8009ee4:	9b02      	ldr	r3, [sp, #8]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	46b8      	mov	r8, r7
 8009eec:	9306      	str	r3, [sp, #24]
 8009eee:	4607      	mov	r7, r0
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	4658      	mov	r0, fp
 8009ef8:	9302      	str	r3, [sp, #8]
 8009efa:	f7ff fa69 	bl	80093d0 <quorem>
 8009efe:	4603      	mov	r3, r0
 8009f00:	3330      	adds	r3, #48	; 0x30
 8009f02:	9004      	str	r0, [sp, #16]
 8009f04:	4641      	mov	r1, r8
 8009f06:	4658      	mov	r0, fp
 8009f08:	9308      	str	r3, [sp, #32]
 8009f0a:	f000 fb9b 	bl	800a644 <__mcmp>
 8009f0e:	463a      	mov	r2, r7
 8009f10:	4681      	mov	r9, r0
 8009f12:	4631      	mov	r1, r6
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 fbb1 	bl	800a67c <__mdiff>
 8009f1a:	68c2      	ldr	r2, [r0, #12]
 8009f1c:	9b08      	ldr	r3, [sp, #32]
 8009f1e:	4605      	mov	r5, r0
 8009f20:	bb02      	cbnz	r2, 8009f64 <_dtoa_r+0xa7c>
 8009f22:	4601      	mov	r1, r0
 8009f24:	4658      	mov	r0, fp
 8009f26:	f000 fb8d 	bl	800a644 <__mcmp>
 8009f2a:	9b08      	ldr	r3, [sp, #32]
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4620      	mov	r0, r4
 8009f32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009f36:	f000 f947 	bl	800a1c8 <_Bfree>
 8009f3a:	9b05      	ldr	r3, [sp, #20]
 8009f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f3e:	9d01      	ldr	r5, [sp, #4]
 8009f40:	ea43 0102 	orr.w	r1, r3, r2
 8009f44:	9b06      	ldr	r3, [sp, #24]
 8009f46:	430b      	orrs	r3, r1
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	d10d      	bne.n	8009f68 <_dtoa_r+0xa80>
 8009f4c:	2b39      	cmp	r3, #57	; 0x39
 8009f4e:	d029      	beq.n	8009fa4 <_dtoa_r+0xabc>
 8009f50:	f1b9 0f00 	cmp.w	r9, #0
 8009f54:	dd01      	ble.n	8009f5a <_dtoa_r+0xa72>
 8009f56:	9b04      	ldr	r3, [sp, #16]
 8009f58:	3331      	adds	r3, #49	; 0x31
 8009f5a:	9a02      	ldr	r2, [sp, #8]
 8009f5c:	7013      	strb	r3, [r2, #0]
 8009f5e:	e774      	b.n	8009e4a <_dtoa_r+0x962>
 8009f60:	4638      	mov	r0, r7
 8009f62:	e7b9      	b.n	8009ed8 <_dtoa_r+0x9f0>
 8009f64:	2201      	movs	r2, #1
 8009f66:	e7e2      	b.n	8009f2e <_dtoa_r+0xa46>
 8009f68:	f1b9 0f00 	cmp.w	r9, #0
 8009f6c:	db06      	blt.n	8009f7c <_dtoa_r+0xa94>
 8009f6e:	9905      	ldr	r1, [sp, #20]
 8009f70:	ea41 0909 	orr.w	r9, r1, r9
 8009f74:	9906      	ldr	r1, [sp, #24]
 8009f76:	ea59 0101 	orrs.w	r1, r9, r1
 8009f7a:	d120      	bne.n	8009fbe <_dtoa_r+0xad6>
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	ddec      	ble.n	8009f5a <_dtoa_r+0xa72>
 8009f80:	4659      	mov	r1, fp
 8009f82:	2201      	movs	r2, #1
 8009f84:	4620      	mov	r0, r4
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	f000 faf0 	bl	800a56c <__lshift>
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4683      	mov	fp, r0
 8009f90:	f000 fb58 	bl	800a644 <__mcmp>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	dc02      	bgt.n	8009fa0 <_dtoa_r+0xab8>
 8009f9a:	d1de      	bne.n	8009f5a <_dtoa_r+0xa72>
 8009f9c:	07da      	lsls	r2, r3, #31
 8009f9e:	d5dc      	bpl.n	8009f5a <_dtoa_r+0xa72>
 8009fa0:	2b39      	cmp	r3, #57	; 0x39
 8009fa2:	d1d8      	bne.n	8009f56 <_dtoa_r+0xa6e>
 8009fa4:	9a02      	ldr	r2, [sp, #8]
 8009fa6:	2339      	movs	r3, #57	; 0x39
 8009fa8:	7013      	strb	r3, [r2, #0]
 8009faa:	462b      	mov	r3, r5
 8009fac:	461d      	mov	r5, r3
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fb4:	2a39      	cmp	r2, #57	; 0x39
 8009fb6:	d050      	beq.n	800a05a <_dtoa_r+0xb72>
 8009fb8:	3201      	adds	r2, #1
 8009fba:	701a      	strb	r2, [r3, #0]
 8009fbc:	e745      	b.n	8009e4a <_dtoa_r+0x962>
 8009fbe:	2a00      	cmp	r2, #0
 8009fc0:	dd03      	ble.n	8009fca <_dtoa_r+0xae2>
 8009fc2:	2b39      	cmp	r3, #57	; 0x39
 8009fc4:	d0ee      	beq.n	8009fa4 <_dtoa_r+0xabc>
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	e7c7      	b.n	8009f5a <_dtoa_r+0xa72>
 8009fca:	9a01      	ldr	r2, [sp, #4]
 8009fcc:	9907      	ldr	r1, [sp, #28]
 8009fce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009fd2:	428a      	cmp	r2, r1
 8009fd4:	d02a      	beq.n	800a02c <_dtoa_r+0xb44>
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	2300      	movs	r3, #0
 8009fda:	220a      	movs	r2, #10
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 f915 	bl	800a20c <__multadd>
 8009fe2:	45b8      	cmp	r8, r7
 8009fe4:	4683      	mov	fp, r0
 8009fe6:	f04f 0300 	mov.w	r3, #0
 8009fea:	f04f 020a 	mov.w	r2, #10
 8009fee:	4641      	mov	r1, r8
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	d107      	bne.n	800a004 <_dtoa_r+0xb1c>
 8009ff4:	f000 f90a 	bl	800a20c <__multadd>
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	3301      	adds	r3, #1
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	e775      	b.n	8009ef0 <_dtoa_r+0xa08>
 800a004:	f000 f902 	bl	800a20c <__multadd>
 800a008:	4639      	mov	r1, r7
 800a00a:	4680      	mov	r8, r0
 800a00c:	2300      	movs	r3, #0
 800a00e:	220a      	movs	r2, #10
 800a010:	4620      	mov	r0, r4
 800a012:	f000 f8fb 	bl	800a20c <__multadd>
 800a016:	4607      	mov	r7, r0
 800a018:	e7f0      	b.n	8009ffc <_dtoa_r+0xb14>
 800a01a:	f1b9 0f00 	cmp.w	r9, #0
 800a01e:	9a00      	ldr	r2, [sp, #0]
 800a020:	bfcc      	ite	gt
 800a022:	464d      	movgt	r5, r9
 800a024:	2501      	movle	r5, #1
 800a026:	4415      	add	r5, r2
 800a028:	f04f 0800 	mov.w	r8, #0
 800a02c:	4659      	mov	r1, fp
 800a02e:	2201      	movs	r2, #1
 800a030:	4620      	mov	r0, r4
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	f000 fa9a 	bl	800a56c <__lshift>
 800a038:	4631      	mov	r1, r6
 800a03a:	4683      	mov	fp, r0
 800a03c:	f000 fb02 	bl	800a644 <__mcmp>
 800a040:	2800      	cmp	r0, #0
 800a042:	dcb2      	bgt.n	8009faa <_dtoa_r+0xac2>
 800a044:	d102      	bne.n	800a04c <_dtoa_r+0xb64>
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	07db      	lsls	r3, r3, #31
 800a04a:	d4ae      	bmi.n	8009faa <_dtoa_r+0xac2>
 800a04c:	462b      	mov	r3, r5
 800a04e:	461d      	mov	r5, r3
 800a050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a054:	2a30      	cmp	r2, #48	; 0x30
 800a056:	d0fa      	beq.n	800a04e <_dtoa_r+0xb66>
 800a058:	e6f7      	b.n	8009e4a <_dtoa_r+0x962>
 800a05a:	9a00      	ldr	r2, [sp, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d1a5      	bne.n	8009fac <_dtoa_r+0xac4>
 800a060:	f10a 0a01 	add.w	sl, sl, #1
 800a064:	2331      	movs	r3, #49	; 0x31
 800a066:	e779      	b.n	8009f5c <_dtoa_r+0xa74>
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <_dtoa_r+0xbd0>)
 800a06a:	f7ff baaf 	b.w	80095cc <_dtoa_r+0xe4>
 800a06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a070:	2b00      	cmp	r3, #0
 800a072:	f47f aa86 	bne.w	8009582 <_dtoa_r+0x9a>
 800a076:	4b11      	ldr	r3, [pc, #68]	; (800a0bc <_dtoa_r+0xbd4>)
 800a078:	f7ff baa8 	b.w	80095cc <_dtoa_r+0xe4>
 800a07c:	f1b9 0f00 	cmp.w	r9, #0
 800a080:	dc03      	bgt.n	800a08a <_dtoa_r+0xba2>
 800a082:	9b05      	ldr	r3, [sp, #20]
 800a084:	2b02      	cmp	r3, #2
 800a086:	f73f aec9 	bgt.w	8009e1c <_dtoa_r+0x934>
 800a08a:	9d00      	ldr	r5, [sp, #0]
 800a08c:	4631      	mov	r1, r6
 800a08e:	4658      	mov	r0, fp
 800a090:	f7ff f99e 	bl	80093d0 <quorem>
 800a094:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a098:	f805 3b01 	strb.w	r3, [r5], #1
 800a09c:	9a00      	ldr	r2, [sp, #0]
 800a09e:	1aaa      	subs	r2, r5, r2
 800a0a0:	4591      	cmp	r9, r2
 800a0a2:	ddba      	ble.n	800a01a <_dtoa_r+0xb32>
 800a0a4:	4659      	mov	r1, fp
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	220a      	movs	r2, #10
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f8ae 	bl	800a20c <__multadd>
 800a0b0:	4683      	mov	fp, r0
 800a0b2:	e7eb      	b.n	800a08c <_dtoa_r+0xba4>
 800a0b4:	0800bacc 	.word	0x0800bacc
 800a0b8:	0800b924 	.word	0x0800b924
 800a0bc:	0800ba49 	.word	0x0800ba49

0800a0c0 <_localeconv_r>:
 800a0c0:	4800      	ldr	r0, [pc, #0]	; (800a0c4 <_localeconv_r+0x4>)
 800a0c2:	4770      	bx	lr
 800a0c4:	20000164 	.word	0x20000164

0800a0c8 <_lseek_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	; (800a0e8 <_lseek_r+0x20>)
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	602a      	str	r2, [r5, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f7f7 fff6 	bl	80020c8 <_lseek>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_lseek_r+0x1e>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_lseek_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	2000be1c 	.word	0x2000be1c

0800a0ec <malloc>:
 800a0ec:	4b02      	ldr	r3, [pc, #8]	; (800a0f8 <malloc+0xc>)
 800a0ee:	4601      	mov	r1, r0
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	f7fe bb35 	b.w	8008760 <_malloc_r>
 800a0f6:	bf00      	nop
 800a0f8:	20000010 	.word	0x20000010

0800a0fc <memmem>:
 800a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0fe:	b17b      	cbz	r3, 800a120 <memmem+0x24>
 800a100:	1ac9      	subs	r1, r1, r3
 800a102:	7816      	ldrb	r6, [r2, #0]
 800a104:	4401      	add	r1, r0
 800a106:	4605      	mov	r5, r0
 800a108:	428d      	cmp	r5, r1
 800a10a:	4628      	mov	r0, r5
 800a10c:	d901      	bls.n	800a112 <memmem+0x16>
 800a10e:	2000      	movs	r0, #0
 800a110:	e006      	b.n	800a120 <memmem+0x24>
 800a112:	7804      	ldrb	r4, [r0, #0]
 800a114:	42b4      	cmp	r4, r6
 800a116:	f105 0501 	add.w	r5, r5, #1
 800a11a:	d1f5      	bne.n	800a108 <memmem+0xc>
 800a11c:	1e5c      	subs	r4, r3, #1
 800a11e:	b904      	cbnz	r4, 800a122 <memmem+0x26>
 800a120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a122:	f810 c004 	ldrb.w	ip, [r0, r4]
 800a126:	5d17      	ldrb	r7, [r2, r4]
 800a128:	45bc      	cmp	ip, r7
 800a12a:	d1ed      	bne.n	800a108 <memmem+0xc>
 800a12c:	3c01      	subs	r4, #1
 800a12e:	e7f6      	b.n	800a11e <memmem+0x22>

0800a130 <__malloc_lock>:
 800a130:	4801      	ldr	r0, [pc, #4]	; (800a138 <__malloc_lock+0x8>)
 800a132:	f7fe baac 	b.w	800868e <__retarget_lock_acquire_recursive>
 800a136:	bf00      	nop
 800a138:	2000be14 	.word	0x2000be14

0800a13c <__malloc_unlock>:
 800a13c:	4801      	ldr	r0, [pc, #4]	; (800a144 <__malloc_unlock+0x8>)
 800a13e:	f7fe baa7 	b.w	8008690 <__retarget_lock_release_recursive>
 800a142:	bf00      	nop
 800a144:	2000be14 	.word	0x2000be14

0800a148 <_Balloc>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	b976      	cbnz	r6, 800a170 <_Balloc+0x28>
 800a152:	2010      	movs	r0, #16
 800a154:	f7ff ffca 	bl	800a0ec <malloc>
 800a158:	4602      	mov	r2, r0
 800a15a:	6260      	str	r0, [r4, #36]	; 0x24
 800a15c:	b920      	cbnz	r0, 800a168 <_Balloc+0x20>
 800a15e:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <_Balloc+0x78>)
 800a160:	4818      	ldr	r0, [pc, #96]	; (800a1c4 <_Balloc+0x7c>)
 800a162:	2166      	movs	r1, #102	; 0x66
 800a164:	f000 ff12 	bl	800af8c <__assert_func>
 800a168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a16c:	6006      	str	r6, [r0, #0]
 800a16e:	60c6      	str	r6, [r0, #12]
 800a170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a172:	68f3      	ldr	r3, [r6, #12]
 800a174:	b183      	cbz	r3, 800a198 <_Balloc+0x50>
 800a176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a17e:	b9b8      	cbnz	r0, 800a1b0 <_Balloc+0x68>
 800a180:	2101      	movs	r1, #1
 800a182:	fa01 f605 	lsl.w	r6, r1, r5
 800a186:	1d72      	adds	r2, r6, #5
 800a188:	0092      	lsls	r2, r2, #2
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 fb5a 	bl	800a844 <_calloc_r>
 800a190:	b160      	cbz	r0, 800a1ac <_Balloc+0x64>
 800a192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a196:	e00e      	b.n	800a1b6 <_Balloc+0x6e>
 800a198:	2221      	movs	r2, #33	; 0x21
 800a19a:	2104      	movs	r1, #4
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fb51 	bl	800a844 <_calloc_r>
 800a1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a4:	60f0      	str	r0, [r6, #12]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e4      	bne.n	800a176 <_Balloc+0x2e>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	6802      	ldr	r2, [r0, #0]
 800a1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1bc:	e7f7      	b.n	800a1ae <_Balloc+0x66>
 800a1be:	bf00      	nop
 800a1c0:	0800ba56 	.word	0x0800ba56
 800a1c4:	0800badd 	.word	0x0800badd

0800a1c8 <_Bfree>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	b976      	cbnz	r6, 800a1f0 <_Bfree+0x28>
 800a1d2:	2010      	movs	r0, #16
 800a1d4:	f7ff ff8a 	bl	800a0ec <malloc>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	6268      	str	r0, [r5, #36]	; 0x24
 800a1dc:	b920      	cbnz	r0, 800a1e8 <_Bfree+0x20>
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <_Bfree+0x3c>)
 800a1e0:	4809      	ldr	r0, [pc, #36]	; (800a208 <_Bfree+0x40>)
 800a1e2:	218a      	movs	r1, #138	; 0x8a
 800a1e4:	f000 fed2 	bl	800af8c <__assert_func>
 800a1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1ec:	6006      	str	r6, [r0, #0]
 800a1ee:	60c6      	str	r6, [r0, #12]
 800a1f0:	b13c      	cbz	r4, 800a202 <_Bfree+0x3a>
 800a1f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1f4:	6862      	ldr	r2, [r4, #4]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1fc:	6021      	str	r1, [r4, #0]
 800a1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	0800ba56 	.word	0x0800ba56
 800a208:	0800badd 	.word	0x0800badd

0800a20c <__multadd>:
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	690e      	ldr	r6, [r1, #16]
 800a212:	4607      	mov	r7, r0
 800a214:	4698      	mov	r8, r3
 800a216:	460c      	mov	r4, r1
 800a218:	f101 0014 	add.w	r0, r1, #20
 800a21c:	2300      	movs	r3, #0
 800a21e:	6805      	ldr	r5, [r0, #0]
 800a220:	b2a9      	uxth	r1, r5
 800a222:	fb02 8101 	mla	r1, r2, r1, r8
 800a226:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a22a:	0c2d      	lsrs	r5, r5, #16
 800a22c:	fb02 c505 	mla	r5, r2, r5, ip
 800a230:	b289      	uxth	r1, r1
 800a232:	3301      	adds	r3, #1
 800a234:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a238:	429e      	cmp	r6, r3
 800a23a:	f840 1b04 	str.w	r1, [r0], #4
 800a23e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a242:	dcec      	bgt.n	800a21e <__multadd+0x12>
 800a244:	f1b8 0f00 	cmp.w	r8, #0
 800a248:	d022      	beq.n	800a290 <__multadd+0x84>
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	42b3      	cmp	r3, r6
 800a24e:	dc19      	bgt.n	800a284 <__multadd+0x78>
 800a250:	6861      	ldr	r1, [r4, #4]
 800a252:	4638      	mov	r0, r7
 800a254:	3101      	adds	r1, #1
 800a256:	f7ff ff77 	bl	800a148 <_Balloc>
 800a25a:	4605      	mov	r5, r0
 800a25c:	b928      	cbnz	r0, 800a26a <__multadd+0x5e>
 800a25e:	4602      	mov	r2, r0
 800a260:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <__multadd+0x8c>)
 800a262:	480e      	ldr	r0, [pc, #56]	; (800a29c <__multadd+0x90>)
 800a264:	21b5      	movs	r1, #181	; 0xb5
 800a266:	f000 fe91 	bl	800af8c <__assert_func>
 800a26a:	6922      	ldr	r2, [r4, #16]
 800a26c:	3202      	adds	r2, #2
 800a26e:	f104 010c 	add.w	r1, r4, #12
 800a272:	0092      	lsls	r2, r2, #2
 800a274:	300c      	adds	r0, #12
 800a276:	f7fe fa0c 	bl	8008692 <memcpy>
 800a27a:	4621      	mov	r1, r4
 800a27c:	4638      	mov	r0, r7
 800a27e:	f7ff ffa3 	bl	800a1c8 <_Bfree>
 800a282:	462c      	mov	r4, r5
 800a284:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a288:	3601      	adds	r6, #1
 800a28a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a28e:	6126      	str	r6, [r4, #16]
 800a290:	4620      	mov	r0, r4
 800a292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a296:	bf00      	nop
 800a298:	0800bacc 	.word	0x0800bacc
 800a29c:	0800badd 	.word	0x0800badd

0800a2a0 <__hi0bits>:
 800a2a0:	0c03      	lsrs	r3, r0, #16
 800a2a2:	041b      	lsls	r3, r3, #16
 800a2a4:	b9d3      	cbnz	r3, 800a2dc <__hi0bits+0x3c>
 800a2a6:	0400      	lsls	r0, r0, #16
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2ae:	bf04      	itt	eq
 800a2b0:	0200      	lsleq	r0, r0, #8
 800a2b2:	3308      	addeq	r3, #8
 800a2b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2b8:	bf04      	itt	eq
 800a2ba:	0100      	lsleq	r0, r0, #4
 800a2bc:	3304      	addeq	r3, #4
 800a2be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2c2:	bf04      	itt	eq
 800a2c4:	0080      	lsleq	r0, r0, #2
 800a2c6:	3302      	addeq	r3, #2
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	db05      	blt.n	800a2d8 <__hi0bits+0x38>
 800a2cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2d0:	f103 0301 	add.w	r3, r3, #1
 800a2d4:	bf08      	it	eq
 800a2d6:	2320      	moveq	r3, #32
 800a2d8:	4618      	mov	r0, r3
 800a2da:	4770      	bx	lr
 800a2dc:	2300      	movs	r3, #0
 800a2de:	e7e4      	b.n	800a2aa <__hi0bits+0xa>

0800a2e0 <__lo0bits>:
 800a2e0:	6803      	ldr	r3, [r0, #0]
 800a2e2:	f013 0207 	ands.w	r2, r3, #7
 800a2e6:	4601      	mov	r1, r0
 800a2e8:	d00b      	beq.n	800a302 <__lo0bits+0x22>
 800a2ea:	07da      	lsls	r2, r3, #31
 800a2ec:	d424      	bmi.n	800a338 <__lo0bits+0x58>
 800a2ee:	0798      	lsls	r0, r3, #30
 800a2f0:	bf49      	itett	mi
 800a2f2:	085b      	lsrmi	r3, r3, #1
 800a2f4:	089b      	lsrpl	r3, r3, #2
 800a2f6:	2001      	movmi	r0, #1
 800a2f8:	600b      	strmi	r3, [r1, #0]
 800a2fa:	bf5c      	itt	pl
 800a2fc:	600b      	strpl	r3, [r1, #0]
 800a2fe:	2002      	movpl	r0, #2
 800a300:	4770      	bx	lr
 800a302:	b298      	uxth	r0, r3
 800a304:	b9b0      	cbnz	r0, 800a334 <__lo0bits+0x54>
 800a306:	0c1b      	lsrs	r3, r3, #16
 800a308:	2010      	movs	r0, #16
 800a30a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a30e:	bf04      	itt	eq
 800a310:	0a1b      	lsreq	r3, r3, #8
 800a312:	3008      	addeq	r0, #8
 800a314:	071a      	lsls	r2, r3, #28
 800a316:	bf04      	itt	eq
 800a318:	091b      	lsreq	r3, r3, #4
 800a31a:	3004      	addeq	r0, #4
 800a31c:	079a      	lsls	r2, r3, #30
 800a31e:	bf04      	itt	eq
 800a320:	089b      	lsreq	r3, r3, #2
 800a322:	3002      	addeq	r0, #2
 800a324:	07da      	lsls	r2, r3, #31
 800a326:	d403      	bmi.n	800a330 <__lo0bits+0x50>
 800a328:	085b      	lsrs	r3, r3, #1
 800a32a:	f100 0001 	add.w	r0, r0, #1
 800a32e:	d005      	beq.n	800a33c <__lo0bits+0x5c>
 800a330:	600b      	str	r3, [r1, #0]
 800a332:	4770      	bx	lr
 800a334:	4610      	mov	r0, r2
 800a336:	e7e8      	b.n	800a30a <__lo0bits+0x2a>
 800a338:	2000      	movs	r0, #0
 800a33a:	4770      	bx	lr
 800a33c:	2020      	movs	r0, #32
 800a33e:	4770      	bx	lr

0800a340 <__i2b>:
 800a340:	b510      	push	{r4, lr}
 800a342:	460c      	mov	r4, r1
 800a344:	2101      	movs	r1, #1
 800a346:	f7ff feff 	bl	800a148 <_Balloc>
 800a34a:	4602      	mov	r2, r0
 800a34c:	b928      	cbnz	r0, 800a35a <__i2b+0x1a>
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <__i2b+0x24>)
 800a350:	4805      	ldr	r0, [pc, #20]	; (800a368 <__i2b+0x28>)
 800a352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a356:	f000 fe19 	bl	800af8c <__assert_func>
 800a35a:	2301      	movs	r3, #1
 800a35c:	6144      	str	r4, [r0, #20]
 800a35e:	6103      	str	r3, [r0, #16]
 800a360:	bd10      	pop	{r4, pc}
 800a362:	bf00      	nop
 800a364:	0800bacc 	.word	0x0800bacc
 800a368:	0800badd 	.word	0x0800badd

0800a36c <__multiply>:
 800a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a370:	4614      	mov	r4, r2
 800a372:	690a      	ldr	r2, [r1, #16]
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	429a      	cmp	r2, r3
 800a378:	bfb8      	it	lt
 800a37a:	460b      	movlt	r3, r1
 800a37c:	460d      	mov	r5, r1
 800a37e:	bfbc      	itt	lt
 800a380:	4625      	movlt	r5, r4
 800a382:	461c      	movlt	r4, r3
 800a384:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a388:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a38c:	68ab      	ldr	r3, [r5, #8]
 800a38e:	6869      	ldr	r1, [r5, #4]
 800a390:	eb0a 0709 	add.w	r7, sl, r9
 800a394:	42bb      	cmp	r3, r7
 800a396:	b085      	sub	sp, #20
 800a398:	bfb8      	it	lt
 800a39a:	3101      	addlt	r1, #1
 800a39c:	f7ff fed4 	bl	800a148 <_Balloc>
 800a3a0:	b930      	cbnz	r0, 800a3b0 <__multiply+0x44>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	4b42      	ldr	r3, [pc, #264]	; (800a4b0 <__multiply+0x144>)
 800a3a6:	4843      	ldr	r0, [pc, #268]	; (800a4b4 <__multiply+0x148>)
 800a3a8:	f240 115d 	movw	r1, #349	; 0x15d
 800a3ac:	f000 fdee 	bl	800af8c <__assert_func>
 800a3b0:	f100 0614 	add.w	r6, r0, #20
 800a3b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a3b8:	4633      	mov	r3, r6
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4543      	cmp	r3, r8
 800a3be:	d31e      	bcc.n	800a3fe <__multiply+0x92>
 800a3c0:	f105 0c14 	add.w	ip, r5, #20
 800a3c4:	f104 0314 	add.w	r3, r4, #20
 800a3c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a3cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a3d0:	9202      	str	r2, [sp, #8]
 800a3d2:	ebac 0205 	sub.w	r2, ip, r5
 800a3d6:	3a15      	subs	r2, #21
 800a3d8:	f022 0203 	bic.w	r2, r2, #3
 800a3dc:	3204      	adds	r2, #4
 800a3de:	f105 0115 	add.w	r1, r5, #21
 800a3e2:	458c      	cmp	ip, r1
 800a3e4:	bf38      	it	cc
 800a3e6:	2204      	movcc	r2, #4
 800a3e8:	9201      	str	r2, [sp, #4]
 800a3ea:	9a02      	ldr	r2, [sp, #8]
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d808      	bhi.n	800a404 <__multiply+0x98>
 800a3f2:	2f00      	cmp	r7, #0
 800a3f4:	dc55      	bgt.n	800a4a2 <__multiply+0x136>
 800a3f6:	6107      	str	r7, [r0, #16]
 800a3f8:	b005      	add	sp, #20
 800a3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fe:	f843 2b04 	str.w	r2, [r3], #4
 800a402:	e7db      	b.n	800a3bc <__multiply+0x50>
 800a404:	f8b3 a000 	ldrh.w	sl, [r3]
 800a408:	f1ba 0f00 	cmp.w	sl, #0
 800a40c:	d020      	beq.n	800a450 <__multiply+0xe4>
 800a40e:	f105 0e14 	add.w	lr, r5, #20
 800a412:	46b1      	mov	r9, r6
 800a414:	2200      	movs	r2, #0
 800a416:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a41a:	f8d9 b000 	ldr.w	fp, [r9]
 800a41e:	b2a1      	uxth	r1, r4
 800a420:	fa1f fb8b 	uxth.w	fp, fp
 800a424:	fb0a b101 	mla	r1, sl, r1, fp
 800a428:	4411      	add	r1, r2
 800a42a:	f8d9 2000 	ldr.w	r2, [r9]
 800a42e:	0c24      	lsrs	r4, r4, #16
 800a430:	0c12      	lsrs	r2, r2, #16
 800a432:	fb0a 2404 	mla	r4, sl, r4, r2
 800a436:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a43a:	b289      	uxth	r1, r1
 800a43c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a440:	45f4      	cmp	ip, lr
 800a442:	f849 1b04 	str.w	r1, [r9], #4
 800a446:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a44a:	d8e4      	bhi.n	800a416 <__multiply+0xaa>
 800a44c:	9901      	ldr	r1, [sp, #4]
 800a44e:	5072      	str	r2, [r6, r1]
 800a450:	9a03      	ldr	r2, [sp, #12]
 800a452:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a456:	3304      	adds	r3, #4
 800a458:	f1b9 0f00 	cmp.w	r9, #0
 800a45c:	d01f      	beq.n	800a49e <__multiply+0x132>
 800a45e:	6834      	ldr	r4, [r6, #0]
 800a460:	f105 0114 	add.w	r1, r5, #20
 800a464:	46b6      	mov	lr, r6
 800a466:	f04f 0a00 	mov.w	sl, #0
 800a46a:	880a      	ldrh	r2, [r1, #0]
 800a46c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a470:	fb09 b202 	mla	r2, r9, r2, fp
 800a474:	4492      	add	sl, r2
 800a476:	b2a4      	uxth	r4, r4
 800a478:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a47c:	f84e 4b04 	str.w	r4, [lr], #4
 800a480:	f851 4b04 	ldr.w	r4, [r1], #4
 800a484:	f8be 2000 	ldrh.w	r2, [lr]
 800a488:	0c24      	lsrs	r4, r4, #16
 800a48a:	fb09 2404 	mla	r4, r9, r4, r2
 800a48e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a492:	458c      	cmp	ip, r1
 800a494:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a498:	d8e7      	bhi.n	800a46a <__multiply+0xfe>
 800a49a:	9a01      	ldr	r2, [sp, #4]
 800a49c:	50b4      	str	r4, [r6, r2]
 800a49e:	3604      	adds	r6, #4
 800a4a0:	e7a3      	b.n	800a3ea <__multiply+0x7e>
 800a4a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1a5      	bne.n	800a3f6 <__multiply+0x8a>
 800a4aa:	3f01      	subs	r7, #1
 800a4ac:	e7a1      	b.n	800a3f2 <__multiply+0x86>
 800a4ae:	bf00      	nop
 800a4b0:	0800bacc 	.word	0x0800bacc
 800a4b4:	0800badd 	.word	0x0800badd

0800a4b8 <__pow5mult>:
 800a4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4bc:	4615      	mov	r5, r2
 800a4be:	f012 0203 	ands.w	r2, r2, #3
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	d007      	beq.n	800a4d8 <__pow5mult+0x20>
 800a4c8:	4c25      	ldr	r4, [pc, #148]	; (800a560 <__pow5mult+0xa8>)
 800a4ca:	3a01      	subs	r2, #1
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4d2:	f7ff fe9b 	bl	800a20c <__multadd>
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	10ad      	asrs	r5, r5, #2
 800a4da:	d03d      	beq.n	800a558 <__pow5mult+0xa0>
 800a4dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4de:	b97c      	cbnz	r4, 800a500 <__pow5mult+0x48>
 800a4e0:	2010      	movs	r0, #16
 800a4e2:	f7ff fe03 	bl	800a0ec <malloc>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	6270      	str	r0, [r6, #36]	; 0x24
 800a4ea:	b928      	cbnz	r0, 800a4f8 <__pow5mult+0x40>
 800a4ec:	4b1d      	ldr	r3, [pc, #116]	; (800a564 <__pow5mult+0xac>)
 800a4ee:	481e      	ldr	r0, [pc, #120]	; (800a568 <__pow5mult+0xb0>)
 800a4f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4f4:	f000 fd4a 	bl	800af8c <__assert_func>
 800a4f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4fc:	6004      	str	r4, [r0, #0]
 800a4fe:	60c4      	str	r4, [r0, #12]
 800a500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a508:	b94c      	cbnz	r4, 800a51e <__pow5mult+0x66>
 800a50a:	f240 2171 	movw	r1, #625	; 0x271
 800a50e:	4630      	mov	r0, r6
 800a510:	f7ff ff16 	bl	800a340 <__i2b>
 800a514:	2300      	movs	r3, #0
 800a516:	f8c8 0008 	str.w	r0, [r8, #8]
 800a51a:	4604      	mov	r4, r0
 800a51c:	6003      	str	r3, [r0, #0]
 800a51e:	f04f 0900 	mov.w	r9, #0
 800a522:	07eb      	lsls	r3, r5, #31
 800a524:	d50a      	bpl.n	800a53c <__pow5mult+0x84>
 800a526:	4639      	mov	r1, r7
 800a528:	4622      	mov	r2, r4
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7ff ff1e 	bl	800a36c <__multiply>
 800a530:	4639      	mov	r1, r7
 800a532:	4680      	mov	r8, r0
 800a534:	4630      	mov	r0, r6
 800a536:	f7ff fe47 	bl	800a1c8 <_Bfree>
 800a53a:	4647      	mov	r7, r8
 800a53c:	106d      	asrs	r5, r5, #1
 800a53e:	d00b      	beq.n	800a558 <__pow5mult+0xa0>
 800a540:	6820      	ldr	r0, [r4, #0]
 800a542:	b938      	cbnz	r0, 800a554 <__pow5mult+0x9c>
 800a544:	4622      	mov	r2, r4
 800a546:	4621      	mov	r1, r4
 800a548:	4630      	mov	r0, r6
 800a54a:	f7ff ff0f 	bl	800a36c <__multiply>
 800a54e:	6020      	str	r0, [r4, #0]
 800a550:	f8c0 9000 	str.w	r9, [r0]
 800a554:	4604      	mov	r4, r0
 800a556:	e7e4      	b.n	800a522 <__pow5mult+0x6a>
 800a558:	4638      	mov	r0, r7
 800a55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a55e:	bf00      	nop
 800a560:	0800bc30 	.word	0x0800bc30
 800a564:	0800ba56 	.word	0x0800ba56
 800a568:	0800badd 	.word	0x0800badd

0800a56c <__lshift>:
 800a56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a570:	460c      	mov	r4, r1
 800a572:	6849      	ldr	r1, [r1, #4]
 800a574:	6923      	ldr	r3, [r4, #16]
 800a576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a57a:	68a3      	ldr	r3, [r4, #8]
 800a57c:	4607      	mov	r7, r0
 800a57e:	4691      	mov	r9, r2
 800a580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a584:	f108 0601 	add.w	r6, r8, #1
 800a588:	42b3      	cmp	r3, r6
 800a58a:	db0b      	blt.n	800a5a4 <__lshift+0x38>
 800a58c:	4638      	mov	r0, r7
 800a58e:	f7ff fddb 	bl	800a148 <_Balloc>
 800a592:	4605      	mov	r5, r0
 800a594:	b948      	cbnz	r0, 800a5aa <__lshift+0x3e>
 800a596:	4602      	mov	r2, r0
 800a598:	4b28      	ldr	r3, [pc, #160]	; (800a63c <__lshift+0xd0>)
 800a59a:	4829      	ldr	r0, [pc, #164]	; (800a640 <__lshift+0xd4>)
 800a59c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5a0:	f000 fcf4 	bl	800af8c <__assert_func>
 800a5a4:	3101      	adds	r1, #1
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	e7ee      	b.n	800a588 <__lshift+0x1c>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f100 0114 	add.w	r1, r0, #20
 800a5b0:	f100 0210 	add.w	r2, r0, #16
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	4553      	cmp	r3, sl
 800a5b8:	db33      	blt.n	800a622 <__lshift+0xb6>
 800a5ba:	6920      	ldr	r0, [r4, #16]
 800a5bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5c0:	f104 0314 	add.w	r3, r4, #20
 800a5c4:	f019 091f 	ands.w	r9, r9, #31
 800a5c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5d0:	d02b      	beq.n	800a62a <__lshift+0xbe>
 800a5d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a5d6:	468a      	mov	sl, r1
 800a5d8:	2200      	movs	r2, #0
 800a5da:	6818      	ldr	r0, [r3, #0]
 800a5dc:	fa00 f009 	lsl.w	r0, r0, r9
 800a5e0:	4302      	orrs	r2, r0
 800a5e2:	f84a 2b04 	str.w	r2, [sl], #4
 800a5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ea:	459c      	cmp	ip, r3
 800a5ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5f0:	d8f3      	bhi.n	800a5da <__lshift+0x6e>
 800a5f2:	ebac 0304 	sub.w	r3, ip, r4
 800a5f6:	3b15      	subs	r3, #21
 800a5f8:	f023 0303 	bic.w	r3, r3, #3
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	f104 0015 	add.w	r0, r4, #21
 800a602:	4584      	cmp	ip, r0
 800a604:	bf38      	it	cc
 800a606:	2304      	movcc	r3, #4
 800a608:	50ca      	str	r2, [r1, r3]
 800a60a:	b10a      	cbz	r2, 800a610 <__lshift+0xa4>
 800a60c:	f108 0602 	add.w	r6, r8, #2
 800a610:	3e01      	subs	r6, #1
 800a612:	4638      	mov	r0, r7
 800a614:	612e      	str	r6, [r5, #16]
 800a616:	4621      	mov	r1, r4
 800a618:	f7ff fdd6 	bl	800a1c8 <_Bfree>
 800a61c:	4628      	mov	r0, r5
 800a61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a622:	f842 0f04 	str.w	r0, [r2, #4]!
 800a626:	3301      	adds	r3, #1
 800a628:	e7c5      	b.n	800a5b6 <__lshift+0x4a>
 800a62a:	3904      	subs	r1, #4
 800a62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a630:	f841 2f04 	str.w	r2, [r1, #4]!
 800a634:	459c      	cmp	ip, r3
 800a636:	d8f9      	bhi.n	800a62c <__lshift+0xc0>
 800a638:	e7ea      	b.n	800a610 <__lshift+0xa4>
 800a63a:	bf00      	nop
 800a63c:	0800bacc 	.word	0x0800bacc
 800a640:	0800badd 	.word	0x0800badd

0800a644 <__mcmp>:
 800a644:	b530      	push	{r4, r5, lr}
 800a646:	6902      	ldr	r2, [r0, #16]
 800a648:	690c      	ldr	r4, [r1, #16]
 800a64a:	1b12      	subs	r2, r2, r4
 800a64c:	d10e      	bne.n	800a66c <__mcmp+0x28>
 800a64e:	f100 0314 	add.w	r3, r0, #20
 800a652:	3114      	adds	r1, #20
 800a654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a65c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a664:	42a5      	cmp	r5, r4
 800a666:	d003      	beq.n	800a670 <__mcmp+0x2c>
 800a668:	d305      	bcc.n	800a676 <__mcmp+0x32>
 800a66a:	2201      	movs	r2, #1
 800a66c:	4610      	mov	r0, r2
 800a66e:	bd30      	pop	{r4, r5, pc}
 800a670:	4283      	cmp	r3, r0
 800a672:	d3f3      	bcc.n	800a65c <__mcmp+0x18>
 800a674:	e7fa      	b.n	800a66c <__mcmp+0x28>
 800a676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a67a:	e7f7      	b.n	800a66c <__mcmp+0x28>

0800a67c <__mdiff>:
 800a67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	460c      	mov	r4, r1
 800a682:	4606      	mov	r6, r0
 800a684:	4611      	mov	r1, r2
 800a686:	4620      	mov	r0, r4
 800a688:	4617      	mov	r7, r2
 800a68a:	f7ff ffdb 	bl	800a644 <__mcmp>
 800a68e:	1e05      	subs	r5, r0, #0
 800a690:	d110      	bne.n	800a6b4 <__mdiff+0x38>
 800a692:	4629      	mov	r1, r5
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff fd57 	bl	800a148 <_Balloc>
 800a69a:	b930      	cbnz	r0, 800a6aa <__mdiff+0x2e>
 800a69c:	4b39      	ldr	r3, [pc, #228]	; (800a784 <__mdiff+0x108>)
 800a69e:	4602      	mov	r2, r0
 800a6a0:	f240 2132 	movw	r1, #562	; 0x232
 800a6a4:	4838      	ldr	r0, [pc, #224]	; (800a788 <__mdiff+0x10c>)
 800a6a6:	f000 fc71 	bl	800af8c <__assert_func>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b4:	bfa4      	itt	ge
 800a6b6:	463b      	movge	r3, r7
 800a6b8:	4627      	movge	r7, r4
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	6879      	ldr	r1, [r7, #4]
 800a6be:	bfa6      	itte	ge
 800a6c0:	461c      	movge	r4, r3
 800a6c2:	2500      	movge	r5, #0
 800a6c4:	2501      	movlt	r5, #1
 800a6c6:	f7ff fd3f 	bl	800a148 <_Balloc>
 800a6ca:	b920      	cbnz	r0, 800a6d6 <__mdiff+0x5a>
 800a6cc:	4b2d      	ldr	r3, [pc, #180]	; (800a784 <__mdiff+0x108>)
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6d4:	e7e6      	b.n	800a6a4 <__mdiff+0x28>
 800a6d6:	693e      	ldr	r6, [r7, #16]
 800a6d8:	60c5      	str	r5, [r0, #12]
 800a6da:	6925      	ldr	r5, [r4, #16]
 800a6dc:	f107 0114 	add.w	r1, r7, #20
 800a6e0:	f104 0914 	add.w	r9, r4, #20
 800a6e4:	f100 0e14 	add.w	lr, r0, #20
 800a6e8:	f107 0210 	add.w	r2, r7, #16
 800a6ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6f4:	46f2      	mov	sl, lr
 800a6f6:	2700      	movs	r7, #0
 800a6f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a700:	fa1f f883 	uxth.w	r8, r3
 800a704:	fa17 f78b 	uxtah	r7, r7, fp
 800a708:	0c1b      	lsrs	r3, r3, #16
 800a70a:	eba7 0808 	sub.w	r8, r7, r8
 800a70e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a712:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a716:	fa1f f888 	uxth.w	r8, r8
 800a71a:	141f      	asrs	r7, r3, #16
 800a71c:	454d      	cmp	r5, r9
 800a71e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a722:	f84a 3b04 	str.w	r3, [sl], #4
 800a726:	d8e7      	bhi.n	800a6f8 <__mdiff+0x7c>
 800a728:	1b2b      	subs	r3, r5, r4
 800a72a:	3b15      	subs	r3, #21
 800a72c:	f023 0303 	bic.w	r3, r3, #3
 800a730:	3304      	adds	r3, #4
 800a732:	3415      	adds	r4, #21
 800a734:	42a5      	cmp	r5, r4
 800a736:	bf38      	it	cc
 800a738:	2304      	movcc	r3, #4
 800a73a:	4419      	add	r1, r3
 800a73c:	4473      	add	r3, lr
 800a73e:	469e      	mov	lr, r3
 800a740:	460d      	mov	r5, r1
 800a742:	4565      	cmp	r5, ip
 800a744:	d30e      	bcc.n	800a764 <__mdiff+0xe8>
 800a746:	f10c 0203 	add.w	r2, ip, #3
 800a74a:	1a52      	subs	r2, r2, r1
 800a74c:	f022 0203 	bic.w	r2, r2, #3
 800a750:	3903      	subs	r1, #3
 800a752:	458c      	cmp	ip, r1
 800a754:	bf38      	it	cc
 800a756:	2200      	movcc	r2, #0
 800a758:	441a      	add	r2, r3
 800a75a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a75e:	b17b      	cbz	r3, 800a780 <__mdiff+0x104>
 800a760:	6106      	str	r6, [r0, #16]
 800a762:	e7a5      	b.n	800a6b0 <__mdiff+0x34>
 800a764:	f855 8b04 	ldr.w	r8, [r5], #4
 800a768:	fa17 f488 	uxtah	r4, r7, r8
 800a76c:	1422      	asrs	r2, r4, #16
 800a76e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a772:	b2a4      	uxth	r4, r4
 800a774:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a778:	f84e 4b04 	str.w	r4, [lr], #4
 800a77c:	1417      	asrs	r7, r2, #16
 800a77e:	e7e0      	b.n	800a742 <__mdiff+0xc6>
 800a780:	3e01      	subs	r6, #1
 800a782:	e7ea      	b.n	800a75a <__mdiff+0xde>
 800a784:	0800bacc 	.word	0x0800bacc
 800a788:	0800badd 	.word	0x0800badd

0800a78c <__d2b>:
 800a78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4689      	mov	r9, r1
 800a792:	2101      	movs	r1, #1
 800a794:	ec57 6b10 	vmov	r6, r7, d0
 800a798:	4690      	mov	r8, r2
 800a79a:	f7ff fcd5 	bl	800a148 <_Balloc>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	b930      	cbnz	r0, 800a7b0 <__d2b+0x24>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	4b25      	ldr	r3, [pc, #148]	; (800a83c <__d2b+0xb0>)
 800a7a6:	4826      	ldr	r0, [pc, #152]	; (800a840 <__d2b+0xb4>)
 800a7a8:	f240 310a 	movw	r1, #778	; 0x30a
 800a7ac:	f000 fbee 	bl	800af8c <__assert_func>
 800a7b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7b8:	bb35      	cbnz	r5, 800a808 <__d2b+0x7c>
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	d028      	beq.n	800a812 <__d2b+0x86>
 800a7c0:	4668      	mov	r0, sp
 800a7c2:	9600      	str	r6, [sp, #0]
 800a7c4:	f7ff fd8c 	bl	800a2e0 <__lo0bits>
 800a7c8:	9900      	ldr	r1, [sp, #0]
 800a7ca:	b300      	cbz	r0, 800a80e <__d2b+0x82>
 800a7cc:	9a01      	ldr	r2, [sp, #4]
 800a7ce:	f1c0 0320 	rsb	r3, r0, #32
 800a7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	40c2      	lsrs	r2, r0
 800a7da:	6163      	str	r3, [r4, #20]
 800a7dc:	9201      	str	r2, [sp, #4]
 800a7de:	9b01      	ldr	r3, [sp, #4]
 800a7e0:	61a3      	str	r3, [r4, #24]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf14      	ite	ne
 800a7e6:	2202      	movne	r2, #2
 800a7e8:	2201      	moveq	r2, #1
 800a7ea:	6122      	str	r2, [r4, #16]
 800a7ec:	b1d5      	cbz	r5, 800a824 <__d2b+0x98>
 800a7ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7f2:	4405      	add	r5, r0
 800a7f4:	f8c9 5000 	str.w	r5, [r9]
 800a7f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7fc:	f8c8 0000 	str.w	r0, [r8]
 800a800:	4620      	mov	r0, r4
 800a802:	b003      	add	sp, #12
 800a804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a80c:	e7d5      	b.n	800a7ba <__d2b+0x2e>
 800a80e:	6161      	str	r1, [r4, #20]
 800a810:	e7e5      	b.n	800a7de <__d2b+0x52>
 800a812:	a801      	add	r0, sp, #4
 800a814:	f7ff fd64 	bl	800a2e0 <__lo0bits>
 800a818:	9b01      	ldr	r3, [sp, #4]
 800a81a:	6163      	str	r3, [r4, #20]
 800a81c:	2201      	movs	r2, #1
 800a81e:	6122      	str	r2, [r4, #16]
 800a820:	3020      	adds	r0, #32
 800a822:	e7e3      	b.n	800a7ec <__d2b+0x60>
 800a824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a82c:	f8c9 0000 	str.w	r0, [r9]
 800a830:	6918      	ldr	r0, [r3, #16]
 800a832:	f7ff fd35 	bl	800a2a0 <__hi0bits>
 800a836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a83a:	e7df      	b.n	800a7fc <__d2b+0x70>
 800a83c:	0800bacc 	.word	0x0800bacc
 800a840:	0800badd 	.word	0x0800badd

0800a844 <_calloc_r>:
 800a844:	b513      	push	{r0, r1, r4, lr}
 800a846:	434a      	muls	r2, r1
 800a848:	4611      	mov	r1, r2
 800a84a:	9201      	str	r2, [sp, #4]
 800a84c:	f7fd ff88 	bl	8008760 <_malloc_r>
 800a850:	4604      	mov	r4, r0
 800a852:	b118      	cbz	r0, 800a85c <_calloc_r+0x18>
 800a854:	9a01      	ldr	r2, [sp, #4]
 800a856:	2100      	movs	r1, #0
 800a858:	f7fd ff29 	bl	80086ae <memset>
 800a85c:	4620      	mov	r0, r4
 800a85e:	b002      	add	sp, #8
 800a860:	bd10      	pop	{r4, pc}

0800a862 <__ssputs_r>:
 800a862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a866:	688e      	ldr	r6, [r1, #8]
 800a868:	429e      	cmp	r6, r3
 800a86a:	4682      	mov	sl, r0
 800a86c:	460c      	mov	r4, r1
 800a86e:	4690      	mov	r8, r2
 800a870:	461f      	mov	r7, r3
 800a872:	d838      	bhi.n	800a8e6 <__ssputs_r+0x84>
 800a874:	898a      	ldrh	r2, [r1, #12]
 800a876:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a87a:	d032      	beq.n	800a8e2 <__ssputs_r+0x80>
 800a87c:	6825      	ldr	r5, [r4, #0]
 800a87e:	6909      	ldr	r1, [r1, #16]
 800a880:	eba5 0901 	sub.w	r9, r5, r1
 800a884:	6965      	ldr	r5, [r4, #20]
 800a886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a88a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a88e:	3301      	adds	r3, #1
 800a890:	444b      	add	r3, r9
 800a892:	106d      	asrs	r5, r5, #1
 800a894:	429d      	cmp	r5, r3
 800a896:	bf38      	it	cc
 800a898:	461d      	movcc	r5, r3
 800a89a:	0553      	lsls	r3, r2, #21
 800a89c:	d531      	bpl.n	800a902 <__ssputs_r+0xa0>
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7fd ff5e 	bl	8008760 <_malloc_r>
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	b950      	cbnz	r0, 800a8be <__ssputs_r+0x5c>
 800a8a8:	230c      	movs	r3, #12
 800a8aa:	f8ca 3000 	str.w	r3, [sl]
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b4:	81a3      	strh	r3, [r4, #12]
 800a8b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8be:	6921      	ldr	r1, [r4, #16]
 800a8c0:	464a      	mov	r2, r9
 800a8c2:	f7fd fee6 	bl	8008692 <memcpy>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d0:	81a3      	strh	r3, [r4, #12]
 800a8d2:	6126      	str	r6, [r4, #16]
 800a8d4:	6165      	str	r5, [r4, #20]
 800a8d6:	444e      	add	r6, r9
 800a8d8:	eba5 0509 	sub.w	r5, r5, r9
 800a8dc:	6026      	str	r6, [r4, #0]
 800a8de:	60a5      	str	r5, [r4, #8]
 800a8e0:	463e      	mov	r6, r7
 800a8e2:	42be      	cmp	r6, r7
 800a8e4:	d900      	bls.n	800a8e8 <__ssputs_r+0x86>
 800a8e6:	463e      	mov	r6, r7
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	6820      	ldr	r0, [r4, #0]
 800a8ec:	4641      	mov	r1, r8
 800a8ee:	f000 fbf3 	bl	800b0d8 <memmove>
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	6822      	ldr	r2, [r4, #0]
 800a8f6:	1b9b      	subs	r3, r3, r6
 800a8f8:	4432      	add	r2, r6
 800a8fa:	60a3      	str	r3, [r4, #8]
 800a8fc:	6022      	str	r2, [r4, #0]
 800a8fe:	2000      	movs	r0, #0
 800a900:	e7db      	b.n	800a8ba <__ssputs_r+0x58>
 800a902:	462a      	mov	r2, r5
 800a904:	f000 fc02 	bl	800b10c <_realloc_r>
 800a908:	4606      	mov	r6, r0
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d1e1      	bne.n	800a8d2 <__ssputs_r+0x70>
 800a90e:	6921      	ldr	r1, [r4, #16]
 800a910:	4650      	mov	r0, sl
 800a912:	f7fd fed5 	bl	80086c0 <_free_r>
 800a916:	e7c7      	b.n	800a8a8 <__ssputs_r+0x46>

0800a918 <_svfiprintf_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	4698      	mov	r8, r3
 800a91e:	898b      	ldrh	r3, [r1, #12]
 800a920:	061b      	lsls	r3, r3, #24
 800a922:	b09d      	sub	sp, #116	; 0x74
 800a924:	4607      	mov	r7, r0
 800a926:	460d      	mov	r5, r1
 800a928:	4614      	mov	r4, r2
 800a92a:	d50e      	bpl.n	800a94a <_svfiprintf_r+0x32>
 800a92c:	690b      	ldr	r3, [r1, #16]
 800a92e:	b963      	cbnz	r3, 800a94a <_svfiprintf_r+0x32>
 800a930:	2140      	movs	r1, #64	; 0x40
 800a932:	f7fd ff15 	bl	8008760 <_malloc_r>
 800a936:	6028      	str	r0, [r5, #0]
 800a938:	6128      	str	r0, [r5, #16]
 800a93a:	b920      	cbnz	r0, 800a946 <_svfiprintf_r+0x2e>
 800a93c:	230c      	movs	r3, #12
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a944:	e0d1      	b.n	800aaea <_svfiprintf_r+0x1d2>
 800a946:	2340      	movs	r3, #64	; 0x40
 800a948:	616b      	str	r3, [r5, #20]
 800a94a:	2300      	movs	r3, #0
 800a94c:	9309      	str	r3, [sp, #36]	; 0x24
 800a94e:	2320      	movs	r3, #32
 800a950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a954:	f8cd 800c 	str.w	r8, [sp, #12]
 800a958:	2330      	movs	r3, #48	; 0x30
 800a95a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab04 <_svfiprintf_r+0x1ec>
 800a95e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a962:	f04f 0901 	mov.w	r9, #1
 800a966:	4623      	mov	r3, r4
 800a968:	469a      	mov	sl, r3
 800a96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a96e:	b10a      	cbz	r2, 800a974 <_svfiprintf_r+0x5c>
 800a970:	2a25      	cmp	r2, #37	; 0x25
 800a972:	d1f9      	bne.n	800a968 <_svfiprintf_r+0x50>
 800a974:	ebba 0b04 	subs.w	fp, sl, r4
 800a978:	d00b      	beq.n	800a992 <_svfiprintf_r+0x7a>
 800a97a:	465b      	mov	r3, fp
 800a97c:	4622      	mov	r2, r4
 800a97e:	4629      	mov	r1, r5
 800a980:	4638      	mov	r0, r7
 800a982:	f7ff ff6e 	bl	800a862 <__ssputs_r>
 800a986:	3001      	adds	r0, #1
 800a988:	f000 80aa 	beq.w	800aae0 <_svfiprintf_r+0x1c8>
 800a98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a98e:	445a      	add	r2, fp
 800a990:	9209      	str	r2, [sp, #36]	; 0x24
 800a992:	f89a 3000 	ldrb.w	r3, [sl]
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 80a2 	beq.w	800aae0 <_svfiprintf_r+0x1c8>
 800a99c:	2300      	movs	r3, #0
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9a6:	f10a 0a01 	add.w	sl, sl, #1
 800a9aa:	9304      	str	r3, [sp, #16]
 800a9ac:	9307      	str	r3, [sp, #28]
 800a9ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9b4:	4654      	mov	r4, sl
 800a9b6:	2205      	movs	r2, #5
 800a9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9bc:	4851      	ldr	r0, [pc, #324]	; (800ab04 <_svfiprintf_r+0x1ec>)
 800a9be:	f7f5 fc17 	bl	80001f0 <memchr>
 800a9c2:	9a04      	ldr	r2, [sp, #16]
 800a9c4:	b9d8      	cbnz	r0, 800a9fe <_svfiprintf_r+0xe6>
 800a9c6:	06d0      	lsls	r0, r2, #27
 800a9c8:	bf44      	itt	mi
 800a9ca:	2320      	movmi	r3, #32
 800a9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9d0:	0711      	lsls	r1, r2, #28
 800a9d2:	bf44      	itt	mi
 800a9d4:	232b      	movmi	r3, #43	; 0x2b
 800a9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9da:	f89a 3000 	ldrb.w	r3, [sl]
 800a9de:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e0:	d015      	beq.n	800aa0e <_svfiprintf_r+0xf6>
 800a9e2:	9a07      	ldr	r2, [sp, #28]
 800a9e4:	4654      	mov	r4, sl
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	f04f 0c0a 	mov.w	ip, #10
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9f2:	3b30      	subs	r3, #48	; 0x30
 800a9f4:	2b09      	cmp	r3, #9
 800a9f6:	d94e      	bls.n	800aa96 <_svfiprintf_r+0x17e>
 800a9f8:	b1b0      	cbz	r0, 800aa28 <_svfiprintf_r+0x110>
 800a9fa:	9207      	str	r2, [sp, #28]
 800a9fc:	e014      	b.n	800aa28 <_svfiprintf_r+0x110>
 800a9fe:	eba0 0308 	sub.w	r3, r0, r8
 800aa02:	fa09 f303 	lsl.w	r3, r9, r3
 800aa06:	4313      	orrs	r3, r2
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	46a2      	mov	sl, r4
 800aa0c:	e7d2      	b.n	800a9b4 <_svfiprintf_r+0x9c>
 800aa0e:	9b03      	ldr	r3, [sp, #12]
 800aa10:	1d19      	adds	r1, r3, #4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	9103      	str	r1, [sp, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfbb      	ittet	lt
 800aa1a:	425b      	neglt	r3, r3
 800aa1c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa20:	9307      	strge	r3, [sp, #28]
 800aa22:	9307      	strlt	r3, [sp, #28]
 800aa24:	bfb8      	it	lt
 800aa26:	9204      	strlt	r2, [sp, #16]
 800aa28:	7823      	ldrb	r3, [r4, #0]
 800aa2a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa2c:	d10c      	bne.n	800aa48 <_svfiprintf_r+0x130>
 800aa2e:	7863      	ldrb	r3, [r4, #1]
 800aa30:	2b2a      	cmp	r3, #42	; 0x2a
 800aa32:	d135      	bne.n	800aaa0 <_svfiprintf_r+0x188>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	1d1a      	adds	r2, r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	9203      	str	r2, [sp, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	bfb8      	it	lt
 800aa40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa44:	3402      	adds	r4, #2
 800aa46:	9305      	str	r3, [sp, #20]
 800aa48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab14 <_svfiprintf_r+0x1fc>
 800aa4c:	7821      	ldrb	r1, [r4, #0]
 800aa4e:	2203      	movs	r2, #3
 800aa50:	4650      	mov	r0, sl
 800aa52:	f7f5 fbcd 	bl	80001f0 <memchr>
 800aa56:	b140      	cbz	r0, 800aa6a <_svfiprintf_r+0x152>
 800aa58:	2340      	movs	r3, #64	; 0x40
 800aa5a:	eba0 000a 	sub.w	r0, r0, sl
 800aa5e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	4303      	orrs	r3, r0
 800aa66:	3401      	adds	r4, #1
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa6e:	4826      	ldr	r0, [pc, #152]	; (800ab08 <_svfiprintf_r+0x1f0>)
 800aa70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa74:	2206      	movs	r2, #6
 800aa76:	f7f5 fbbb 	bl	80001f0 <memchr>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d038      	beq.n	800aaf0 <_svfiprintf_r+0x1d8>
 800aa7e:	4b23      	ldr	r3, [pc, #140]	; (800ab0c <_svfiprintf_r+0x1f4>)
 800aa80:	bb1b      	cbnz	r3, 800aaca <_svfiprintf_r+0x1b2>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	3307      	adds	r3, #7
 800aa86:	f023 0307 	bic.w	r3, r3, #7
 800aa8a:	3308      	adds	r3, #8
 800aa8c:	9303      	str	r3, [sp, #12]
 800aa8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa90:	4433      	add	r3, r6
 800aa92:	9309      	str	r3, [sp, #36]	; 0x24
 800aa94:	e767      	b.n	800a966 <_svfiprintf_r+0x4e>
 800aa96:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	e7a5      	b.n	800a9ec <_svfiprintf_r+0xd4>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	3401      	adds	r4, #1
 800aaa4:	9305      	str	r3, [sp, #20]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	f04f 0c0a 	mov.w	ip, #10
 800aaac:	4620      	mov	r0, r4
 800aaae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aab2:	3a30      	subs	r2, #48	; 0x30
 800aab4:	2a09      	cmp	r2, #9
 800aab6:	d903      	bls.n	800aac0 <_svfiprintf_r+0x1a8>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d0c5      	beq.n	800aa48 <_svfiprintf_r+0x130>
 800aabc:	9105      	str	r1, [sp, #20]
 800aabe:	e7c3      	b.n	800aa48 <_svfiprintf_r+0x130>
 800aac0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aac4:	4604      	mov	r4, r0
 800aac6:	2301      	movs	r3, #1
 800aac8:	e7f0      	b.n	800aaac <_svfiprintf_r+0x194>
 800aaca:	ab03      	add	r3, sp, #12
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	462a      	mov	r2, r5
 800aad0:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <_svfiprintf_r+0x1f8>)
 800aad2:	a904      	add	r1, sp, #16
 800aad4:	4638      	mov	r0, r7
 800aad6:	f7fd ff3d 	bl	8008954 <_printf_float>
 800aada:	1c42      	adds	r2, r0, #1
 800aadc:	4606      	mov	r6, r0
 800aade:	d1d6      	bne.n	800aa8e <_svfiprintf_r+0x176>
 800aae0:	89ab      	ldrh	r3, [r5, #12]
 800aae2:	065b      	lsls	r3, r3, #25
 800aae4:	f53f af2c 	bmi.w	800a940 <_svfiprintf_r+0x28>
 800aae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaea:	b01d      	add	sp, #116	; 0x74
 800aaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf0:	ab03      	add	r3, sp, #12
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	462a      	mov	r2, r5
 800aaf6:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <_svfiprintf_r+0x1f8>)
 800aaf8:	a904      	add	r1, sp, #16
 800aafa:	4638      	mov	r0, r7
 800aafc:	f7fe f9ce 	bl	8008e9c <_printf_i>
 800ab00:	e7eb      	b.n	800aada <_svfiprintf_r+0x1c2>
 800ab02:	bf00      	nop
 800ab04:	0800bc3c 	.word	0x0800bc3c
 800ab08:	0800bc46 	.word	0x0800bc46
 800ab0c:	08008955 	.word	0x08008955
 800ab10:	0800a863 	.word	0x0800a863
 800ab14:	0800bc42 	.word	0x0800bc42

0800ab18 <__sfputc_r>:
 800ab18:	6893      	ldr	r3, [r2, #8]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	b410      	push	{r4}
 800ab20:	6093      	str	r3, [r2, #8]
 800ab22:	da08      	bge.n	800ab36 <__sfputc_r+0x1e>
 800ab24:	6994      	ldr	r4, [r2, #24]
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	db01      	blt.n	800ab2e <__sfputc_r+0x16>
 800ab2a:	290a      	cmp	r1, #10
 800ab2c:	d103      	bne.n	800ab36 <__sfputc_r+0x1e>
 800ab2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab32:	f000 b96b 	b.w	800ae0c <__swbuf_r>
 800ab36:	6813      	ldr	r3, [r2, #0]
 800ab38:	1c58      	adds	r0, r3, #1
 800ab3a:	6010      	str	r0, [r2, #0]
 800ab3c:	7019      	strb	r1, [r3, #0]
 800ab3e:	4608      	mov	r0, r1
 800ab40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <__sfputs_r>:
 800ab46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab48:	4606      	mov	r6, r0
 800ab4a:	460f      	mov	r7, r1
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	18d5      	adds	r5, r2, r3
 800ab50:	42ac      	cmp	r4, r5
 800ab52:	d101      	bne.n	800ab58 <__sfputs_r+0x12>
 800ab54:	2000      	movs	r0, #0
 800ab56:	e007      	b.n	800ab68 <__sfputs_r+0x22>
 800ab58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5c:	463a      	mov	r2, r7
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ffda 	bl	800ab18 <__sfputc_r>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d1f3      	bne.n	800ab50 <__sfputs_r+0xa>
 800ab68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab6c <_vfiprintf_r>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	460d      	mov	r5, r1
 800ab72:	b09d      	sub	sp, #116	; 0x74
 800ab74:	4614      	mov	r4, r2
 800ab76:	4698      	mov	r8, r3
 800ab78:	4606      	mov	r6, r0
 800ab7a:	b118      	cbz	r0, 800ab84 <_vfiprintf_r+0x18>
 800ab7c:	6983      	ldr	r3, [r0, #24]
 800ab7e:	b90b      	cbnz	r3, 800ab84 <_vfiprintf_r+0x18>
 800ab80:	f7fd fcc2 	bl	8008508 <__sinit>
 800ab84:	4b89      	ldr	r3, [pc, #548]	; (800adac <_vfiprintf_r+0x240>)
 800ab86:	429d      	cmp	r5, r3
 800ab88:	d11b      	bne.n	800abc2 <_vfiprintf_r+0x56>
 800ab8a:	6875      	ldr	r5, [r6, #4]
 800ab8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab8e:	07d9      	lsls	r1, r3, #31
 800ab90:	d405      	bmi.n	800ab9e <_vfiprintf_r+0x32>
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	059a      	lsls	r2, r3, #22
 800ab96:	d402      	bmi.n	800ab9e <_vfiprintf_r+0x32>
 800ab98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab9a:	f7fd fd78 	bl	800868e <__retarget_lock_acquire_recursive>
 800ab9e:	89ab      	ldrh	r3, [r5, #12]
 800aba0:	071b      	lsls	r3, r3, #28
 800aba2:	d501      	bpl.n	800aba8 <_vfiprintf_r+0x3c>
 800aba4:	692b      	ldr	r3, [r5, #16]
 800aba6:	b9eb      	cbnz	r3, 800abe4 <_vfiprintf_r+0x78>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4630      	mov	r0, r6
 800abac:	f000 f980 	bl	800aeb0 <__swsetup_r>
 800abb0:	b1c0      	cbz	r0, 800abe4 <_vfiprintf_r+0x78>
 800abb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abb4:	07dc      	lsls	r4, r3, #31
 800abb6:	d50e      	bpl.n	800abd6 <_vfiprintf_r+0x6a>
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abbc:	b01d      	add	sp, #116	; 0x74
 800abbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc2:	4b7b      	ldr	r3, [pc, #492]	; (800adb0 <_vfiprintf_r+0x244>)
 800abc4:	429d      	cmp	r5, r3
 800abc6:	d101      	bne.n	800abcc <_vfiprintf_r+0x60>
 800abc8:	68b5      	ldr	r5, [r6, #8]
 800abca:	e7df      	b.n	800ab8c <_vfiprintf_r+0x20>
 800abcc:	4b79      	ldr	r3, [pc, #484]	; (800adb4 <_vfiprintf_r+0x248>)
 800abce:	429d      	cmp	r5, r3
 800abd0:	bf08      	it	eq
 800abd2:	68f5      	ldreq	r5, [r6, #12]
 800abd4:	e7da      	b.n	800ab8c <_vfiprintf_r+0x20>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	0598      	lsls	r0, r3, #22
 800abda:	d4ed      	bmi.n	800abb8 <_vfiprintf_r+0x4c>
 800abdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abde:	f7fd fd57 	bl	8008690 <__retarget_lock_release_recursive>
 800abe2:	e7e9      	b.n	800abb8 <_vfiprintf_r+0x4c>
 800abe4:	2300      	movs	r3, #0
 800abe6:	9309      	str	r3, [sp, #36]	; 0x24
 800abe8:	2320      	movs	r3, #32
 800abea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abee:	f8cd 800c 	str.w	r8, [sp, #12]
 800abf2:	2330      	movs	r3, #48	; 0x30
 800abf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800adb8 <_vfiprintf_r+0x24c>
 800abf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abfc:	f04f 0901 	mov.w	r9, #1
 800ac00:	4623      	mov	r3, r4
 800ac02:	469a      	mov	sl, r3
 800ac04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac08:	b10a      	cbz	r2, 800ac0e <_vfiprintf_r+0xa2>
 800ac0a:	2a25      	cmp	r2, #37	; 0x25
 800ac0c:	d1f9      	bne.n	800ac02 <_vfiprintf_r+0x96>
 800ac0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac12:	d00b      	beq.n	800ac2c <_vfiprintf_r+0xc0>
 800ac14:	465b      	mov	r3, fp
 800ac16:	4622      	mov	r2, r4
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f7ff ff93 	bl	800ab46 <__sfputs_r>
 800ac20:	3001      	adds	r0, #1
 800ac22:	f000 80aa 	beq.w	800ad7a <_vfiprintf_r+0x20e>
 800ac26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac28:	445a      	add	r2, fp
 800ac2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 80a2 	beq.w	800ad7a <_vfiprintf_r+0x20e>
 800ac36:	2300      	movs	r3, #0
 800ac38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac40:	f10a 0a01 	add.w	sl, sl, #1
 800ac44:	9304      	str	r3, [sp, #16]
 800ac46:	9307      	str	r3, [sp, #28]
 800ac48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac4e:	4654      	mov	r4, sl
 800ac50:	2205      	movs	r2, #5
 800ac52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac56:	4858      	ldr	r0, [pc, #352]	; (800adb8 <_vfiprintf_r+0x24c>)
 800ac58:	f7f5 faca 	bl	80001f0 <memchr>
 800ac5c:	9a04      	ldr	r2, [sp, #16]
 800ac5e:	b9d8      	cbnz	r0, 800ac98 <_vfiprintf_r+0x12c>
 800ac60:	06d1      	lsls	r1, r2, #27
 800ac62:	bf44      	itt	mi
 800ac64:	2320      	movmi	r3, #32
 800ac66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac6a:	0713      	lsls	r3, r2, #28
 800ac6c:	bf44      	itt	mi
 800ac6e:	232b      	movmi	r3, #43	; 0x2b
 800ac70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac74:	f89a 3000 	ldrb.w	r3, [sl]
 800ac78:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7a:	d015      	beq.n	800aca8 <_vfiprintf_r+0x13c>
 800ac7c:	9a07      	ldr	r2, [sp, #28]
 800ac7e:	4654      	mov	r4, sl
 800ac80:	2000      	movs	r0, #0
 800ac82:	f04f 0c0a 	mov.w	ip, #10
 800ac86:	4621      	mov	r1, r4
 800ac88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac8c:	3b30      	subs	r3, #48	; 0x30
 800ac8e:	2b09      	cmp	r3, #9
 800ac90:	d94e      	bls.n	800ad30 <_vfiprintf_r+0x1c4>
 800ac92:	b1b0      	cbz	r0, 800acc2 <_vfiprintf_r+0x156>
 800ac94:	9207      	str	r2, [sp, #28]
 800ac96:	e014      	b.n	800acc2 <_vfiprintf_r+0x156>
 800ac98:	eba0 0308 	sub.w	r3, r0, r8
 800ac9c:	fa09 f303 	lsl.w	r3, r9, r3
 800aca0:	4313      	orrs	r3, r2
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	46a2      	mov	sl, r4
 800aca6:	e7d2      	b.n	800ac4e <_vfiprintf_r+0xe2>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	1d19      	adds	r1, r3, #4
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	9103      	str	r1, [sp, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bfbb      	ittet	lt
 800acb4:	425b      	neglt	r3, r3
 800acb6:	f042 0202 	orrlt.w	r2, r2, #2
 800acba:	9307      	strge	r3, [sp, #28]
 800acbc:	9307      	strlt	r3, [sp, #28]
 800acbe:	bfb8      	it	lt
 800acc0:	9204      	strlt	r2, [sp, #16]
 800acc2:	7823      	ldrb	r3, [r4, #0]
 800acc4:	2b2e      	cmp	r3, #46	; 0x2e
 800acc6:	d10c      	bne.n	800ace2 <_vfiprintf_r+0x176>
 800acc8:	7863      	ldrb	r3, [r4, #1]
 800acca:	2b2a      	cmp	r3, #42	; 0x2a
 800accc:	d135      	bne.n	800ad3a <_vfiprintf_r+0x1ce>
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	1d1a      	adds	r2, r3, #4
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	9203      	str	r2, [sp, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bfb8      	it	lt
 800acda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800acde:	3402      	adds	r4, #2
 800ace0:	9305      	str	r3, [sp, #20]
 800ace2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800adc8 <_vfiprintf_r+0x25c>
 800ace6:	7821      	ldrb	r1, [r4, #0]
 800ace8:	2203      	movs	r2, #3
 800acea:	4650      	mov	r0, sl
 800acec:	f7f5 fa80 	bl	80001f0 <memchr>
 800acf0:	b140      	cbz	r0, 800ad04 <_vfiprintf_r+0x198>
 800acf2:	2340      	movs	r3, #64	; 0x40
 800acf4:	eba0 000a 	sub.w	r0, r0, sl
 800acf8:	fa03 f000 	lsl.w	r0, r3, r0
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	4303      	orrs	r3, r0
 800ad00:	3401      	adds	r4, #1
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad08:	482c      	ldr	r0, [pc, #176]	; (800adbc <_vfiprintf_r+0x250>)
 800ad0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad0e:	2206      	movs	r2, #6
 800ad10:	f7f5 fa6e 	bl	80001f0 <memchr>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d03f      	beq.n	800ad98 <_vfiprintf_r+0x22c>
 800ad18:	4b29      	ldr	r3, [pc, #164]	; (800adc0 <_vfiprintf_r+0x254>)
 800ad1a:	bb1b      	cbnz	r3, 800ad64 <_vfiprintf_r+0x1f8>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	3307      	adds	r3, #7
 800ad20:	f023 0307 	bic.w	r3, r3, #7
 800ad24:	3308      	adds	r3, #8
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2a:	443b      	add	r3, r7
 800ad2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2e:	e767      	b.n	800ac00 <_vfiprintf_r+0x94>
 800ad30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad34:	460c      	mov	r4, r1
 800ad36:	2001      	movs	r0, #1
 800ad38:	e7a5      	b.n	800ac86 <_vfiprintf_r+0x11a>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	3401      	adds	r4, #1
 800ad3e:	9305      	str	r3, [sp, #20]
 800ad40:	4619      	mov	r1, r3
 800ad42:	f04f 0c0a 	mov.w	ip, #10
 800ad46:	4620      	mov	r0, r4
 800ad48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad4c:	3a30      	subs	r2, #48	; 0x30
 800ad4e:	2a09      	cmp	r2, #9
 800ad50:	d903      	bls.n	800ad5a <_vfiprintf_r+0x1ee>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0c5      	beq.n	800ace2 <_vfiprintf_r+0x176>
 800ad56:	9105      	str	r1, [sp, #20]
 800ad58:	e7c3      	b.n	800ace2 <_vfiprintf_r+0x176>
 800ad5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad5e:	4604      	mov	r4, r0
 800ad60:	2301      	movs	r3, #1
 800ad62:	e7f0      	b.n	800ad46 <_vfiprintf_r+0x1da>
 800ad64:	ab03      	add	r3, sp, #12
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	462a      	mov	r2, r5
 800ad6a:	4b16      	ldr	r3, [pc, #88]	; (800adc4 <_vfiprintf_r+0x258>)
 800ad6c:	a904      	add	r1, sp, #16
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f7fd fdf0 	bl	8008954 <_printf_float>
 800ad74:	4607      	mov	r7, r0
 800ad76:	1c78      	adds	r0, r7, #1
 800ad78:	d1d6      	bne.n	800ad28 <_vfiprintf_r+0x1bc>
 800ad7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad7c:	07d9      	lsls	r1, r3, #31
 800ad7e:	d405      	bmi.n	800ad8c <_vfiprintf_r+0x220>
 800ad80:	89ab      	ldrh	r3, [r5, #12]
 800ad82:	059a      	lsls	r2, r3, #22
 800ad84:	d402      	bmi.n	800ad8c <_vfiprintf_r+0x220>
 800ad86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad88:	f7fd fc82 	bl	8008690 <__retarget_lock_release_recursive>
 800ad8c:	89ab      	ldrh	r3, [r5, #12]
 800ad8e:	065b      	lsls	r3, r3, #25
 800ad90:	f53f af12 	bmi.w	800abb8 <_vfiprintf_r+0x4c>
 800ad94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad96:	e711      	b.n	800abbc <_vfiprintf_r+0x50>
 800ad98:	ab03      	add	r3, sp, #12
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	462a      	mov	r2, r5
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <_vfiprintf_r+0x258>)
 800ada0:	a904      	add	r1, sp, #16
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7fe f87a 	bl	8008e9c <_printf_i>
 800ada8:	e7e4      	b.n	800ad74 <_vfiprintf_r+0x208>
 800adaa:	bf00      	nop
 800adac:	0800b8d0 	.word	0x0800b8d0
 800adb0:	0800b8f0 	.word	0x0800b8f0
 800adb4:	0800b8b0 	.word	0x0800b8b0
 800adb8:	0800bc3c 	.word	0x0800bc3c
 800adbc:	0800bc46 	.word	0x0800bc46
 800adc0:	08008955 	.word	0x08008955
 800adc4:	0800ab47 	.word	0x0800ab47
 800adc8:	0800bc42 	.word	0x0800bc42

0800adcc <_read_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_read_r+0x20>)
 800add0:	4604      	mov	r4, r0
 800add2:	4608      	mov	r0, r1
 800add4:	4611      	mov	r1, r2
 800add6:	2200      	movs	r2, #0
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f7 f930 	bl	8002040 <_read>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_read_r+0x1e>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_read_r+0x1e>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	2000be1c 	.word	0x2000be1c

0800adf0 <strnlen>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4602      	mov	r2, r0
 800adf4:	4401      	add	r1, r0
 800adf6:	428a      	cmp	r2, r1
 800adf8:	4613      	mov	r3, r2
 800adfa:	d101      	bne.n	800ae00 <strnlen+0x10>
 800adfc:	1a18      	subs	r0, r3, r0
 800adfe:	bd10      	pop	{r4, pc}
 800ae00:	781c      	ldrb	r4, [r3, #0]
 800ae02:	3201      	adds	r2, #1
 800ae04:	2c00      	cmp	r4, #0
 800ae06:	d1f6      	bne.n	800adf6 <strnlen+0x6>
 800ae08:	e7f8      	b.n	800adfc <strnlen+0xc>
	...

0800ae0c <__swbuf_r>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	460e      	mov	r6, r1
 800ae10:	4614      	mov	r4, r2
 800ae12:	4605      	mov	r5, r0
 800ae14:	b118      	cbz	r0, 800ae1e <__swbuf_r+0x12>
 800ae16:	6983      	ldr	r3, [r0, #24]
 800ae18:	b90b      	cbnz	r3, 800ae1e <__swbuf_r+0x12>
 800ae1a:	f7fd fb75 	bl	8008508 <__sinit>
 800ae1e:	4b21      	ldr	r3, [pc, #132]	; (800aea4 <__swbuf_r+0x98>)
 800ae20:	429c      	cmp	r4, r3
 800ae22:	d12b      	bne.n	800ae7c <__swbuf_r+0x70>
 800ae24:	686c      	ldr	r4, [r5, #4]
 800ae26:	69a3      	ldr	r3, [r4, #24]
 800ae28:	60a3      	str	r3, [r4, #8]
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	071a      	lsls	r2, r3, #28
 800ae2e:	d52f      	bpl.n	800ae90 <__swbuf_r+0x84>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	b36b      	cbz	r3, 800ae90 <__swbuf_r+0x84>
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	6820      	ldr	r0, [r4, #0]
 800ae38:	1ac0      	subs	r0, r0, r3
 800ae3a:	6963      	ldr	r3, [r4, #20]
 800ae3c:	b2f6      	uxtb	r6, r6
 800ae3e:	4283      	cmp	r3, r0
 800ae40:	4637      	mov	r7, r6
 800ae42:	dc04      	bgt.n	800ae4e <__swbuf_r+0x42>
 800ae44:	4621      	mov	r1, r4
 800ae46:	4628      	mov	r0, r5
 800ae48:	f7fd fab8 	bl	80083bc <_fflush_r>
 800ae4c:	bb30      	cbnz	r0, 800ae9c <__swbuf_r+0x90>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	60a3      	str	r3, [r4, #8]
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	6022      	str	r2, [r4, #0]
 800ae5a:	701e      	strb	r6, [r3, #0]
 800ae5c:	6963      	ldr	r3, [r4, #20]
 800ae5e:	3001      	adds	r0, #1
 800ae60:	4283      	cmp	r3, r0
 800ae62:	d004      	beq.n	800ae6e <__swbuf_r+0x62>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	07db      	lsls	r3, r3, #31
 800ae68:	d506      	bpl.n	800ae78 <__swbuf_r+0x6c>
 800ae6a:	2e0a      	cmp	r6, #10
 800ae6c:	d104      	bne.n	800ae78 <__swbuf_r+0x6c>
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4628      	mov	r0, r5
 800ae72:	f7fd faa3 	bl	80083bc <_fflush_r>
 800ae76:	b988      	cbnz	r0, 800ae9c <__swbuf_r+0x90>
 800ae78:	4638      	mov	r0, r7
 800ae7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <__swbuf_r+0x9c>)
 800ae7e:	429c      	cmp	r4, r3
 800ae80:	d101      	bne.n	800ae86 <__swbuf_r+0x7a>
 800ae82:	68ac      	ldr	r4, [r5, #8]
 800ae84:	e7cf      	b.n	800ae26 <__swbuf_r+0x1a>
 800ae86:	4b09      	ldr	r3, [pc, #36]	; (800aeac <__swbuf_r+0xa0>)
 800ae88:	429c      	cmp	r4, r3
 800ae8a:	bf08      	it	eq
 800ae8c:	68ec      	ldreq	r4, [r5, #12]
 800ae8e:	e7ca      	b.n	800ae26 <__swbuf_r+0x1a>
 800ae90:	4621      	mov	r1, r4
 800ae92:	4628      	mov	r0, r5
 800ae94:	f000 f80c 	bl	800aeb0 <__swsetup_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d0cb      	beq.n	800ae34 <__swbuf_r+0x28>
 800ae9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aea0:	e7ea      	b.n	800ae78 <__swbuf_r+0x6c>
 800aea2:	bf00      	nop
 800aea4:	0800b8d0 	.word	0x0800b8d0
 800aea8:	0800b8f0 	.word	0x0800b8f0
 800aeac:	0800b8b0 	.word	0x0800b8b0

0800aeb0 <__swsetup_r>:
 800aeb0:	4b32      	ldr	r3, [pc, #200]	; (800af7c <__swsetup_r+0xcc>)
 800aeb2:	b570      	push	{r4, r5, r6, lr}
 800aeb4:	681d      	ldr	r5, [r3, #0]
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	460c      	mov	r4, r1
 800aeba:	b125      	cbz	r5, 800aec6 <__swsetup_r+0x16>
 800aebc:	69ab      	ldr	r3, [r5, #24]
 800aebe:	b913      	cbnz	r3, 800aec6 <__swsetup_r+0x16>
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7fd fb21 	bl	8008508 <__sinit>
 800aec6:	4b2e      	ldr	r3, [pc, #184]	; (800af80 <__swsetup_r+0xd0>)
 800aec8:	429c      	cmp	r4, r3
 800aeca:	d10f      	bne.n	800aeec <__swsetup_r+0x3c>
 800aecc:	686c      	ldr	r4, [r5, #4]
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aed4:	0719      	lsls	r1, r3, #28
 800aed6:	d42c      	bmi.n	800af32 <__swsetup_r+0x82>
 800aed8:	06dd      	lsls	r5, r3, #27
 800aeda:	d411      	bmi.n	800af00 <__swsetup_r+0x50>
 800aedc:	2309      	movs	r3, #9
 800aede:	6033      	str	r3, [r6, #0]
 800aee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeea:	e03e      	b.n	800af6a <__swsetup_r+0xba>
 800aeec:	4b25      	ldr	r3, [pc, #148]	; (800af84 <__swsetup_r+0xd4>)
 800aeee:	429c      	cmp	r4, r3
 800aef0:	d101      	bne.n	800aef6 <__swsetup_r+0x46>
 800aef2:	68ac      	ldr	r4, [r5, #8]
 800aef4:	e7eb      	b.n	800aece <__swsetup_r+0x1e>
 800aef6:	4b24      	ldr	r3, [pc, #144]	; (800af88 <__swsetup_r+0xd8>)
 800aef8:	429c      	cmp	r4, r3
 800aefa:	bf08      	it	eq
 800aefc:	68ec      	ldreq	r4, [r5, #12]
 800aefe:	e7e6      	b.n	800aece <__swsetup_r+0x1e>
 800af00:	0758      	lsls	r0, r3, #29
 800af02:	d512      	bpl.n	800af2a <__swsetup_r+0x7a>
 800af04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af06:	b141      	cbz	r1, 800af1a <__swsetup_r+0x6a>
 800af08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af0c:	4299      	cmp	r1, r3
 800af0e:	d002      	beq.n	800af16 <__swsetup_r+0x66>
 800af10:	4630      	mov	r0, r6
 800af12:	f7fd fbd5 	bl	80086c0 <_free_r>
 800af16:	2300      	movs	r3, #0
 800af18:	6363      	str	r3, [r4, #52]	; 0x34
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	2300      	movs	r3, #0
 800af24:	6063      	str	r3, [r4, #4]
 800af26:	6923      	ldr	r3, [r4, #16]
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	f043 0308 	orr.w	r3, r3, #8
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	b94b      	cbnz	r3, 800af4a <__swsetup_r+0x9a>
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af40:	d003      	beq.n	800af4a <__swsetup_r+0x9a>
 800af42:	4621      	mov	r1, r4
 800af44:	4630      	mov	r0, r6
 800af46:	f000 f875 	bl	800b034 <__smakebuf_r>
 800af4a:	89a0      	ldrh	r0, [r4, #12]
 800af4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af50:	f010 0301 	ands.w	r3, r0, #1
 800af54:	d00a      	beq.n	800af6c <__swsetup_r+0xbc>
 800af56:	2300      	movs	r3, #0
 800af58:	60a3      	str	r3, [r4, #8]
 800af5a:	6963      	ldr	r3, [r4, #20]
 800af5c:	425b      	negs	r3, r3
 800af5e:	61a3      	str	r3, [r4, #24]
 800af60:	6923      	ldr	r3, [r4, #16]
 800af62:	b943      	cbnz	r3, 800af76 <__swsetup_r+0xc6>
 800af64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af68:	d1ba      	bne.n	800aee0 <__swsetup_r+0x30>
 800af6a:	bd70      	pop	{r4, r5, r6, pc}
 800af6c:	0781      	lsls	r1, r0, #30
 800af6e:	bf58      	it	pl
 800af70:	6963      	ldrpl	r3, [r4, #20]
 800af72:	60a3      	str	r3, [r4, #8]
 800af74:	e7f4      	b.n	800af60 <__swsetup_r+0xb0>
 800af76:	2000      	movs	r0, #0
 800af78:	e7f7      	b.n	800af6a <__swsetup_r+0xba>
 800af7a:	bf00      	nop
 800af7c:	20000010 	.word	0x20000010
 800af80:	0800b8d0 	.word	0x0800b8d0
 800af84:	0800b8f0 	.word	0x0800b8f0
 800af88:	0800b8b0 	.word	0x0800b8b0

0800af8c <__assert_func>:
 800af8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af8e:	4614      	mov	r4, r2
 800af90:	461a      	mov	r2, r3
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <__assert_func+0x2c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4605      	mov	r5, r0
 800af98:	68d8      	ldr	r0, [r3, #12]
 800af9a:	b14c      	cbz	r4, 800afb0 <__assert_func+0x24>
 800af9c:	4b07      	ldr	r3, [pc, #28]	; (800afbc <__assert_func+0x30>)
 800af9e:	9100      	str	r1, [sp, #0]
 800afa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afa4:	4906      	ldr	r1, [pc, #24]	; (800afc0 <__assert_func+0x34>)
 800afa6:	462b      	mov	r3, r5
 800afa8:	f000 f80e 	bl	800afc8 <fiprintf>
 800afac:	f000 f8e1 	bl	800b172 <abort>
 800afb0:	4b04      	ldr	r3, [pc, #16]	; (800afc4 <__assert_func+0x38>)
 800afb2:	461c      	mov	r4, r3
 800afb4:	e7f3      	b.n	800af9e <__assert_func+0x12>
 800afb6:	bf00      	nop
 800afb8:	20000010 	.word	0x20000010
 800afbc:	0800bc4d 	.word	0x0800bc4d
 800afc0:	0800bc5a 	.word	0x0800bc5a
 800afc4:	0800bc88 	.word	0x0800bc88

0800afc8 <fiprintf>:
 800afc8:	b40e      	push	{r1, r2, r3}
 800afca:	b503      	push	{r0, r1, lr}
 800afcc:	4601      	mov	r1, r0
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	4805      	ldr	r0, [pc, #20]	; (800afe8 <fiprintf+0x20>)
 800afd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd6:	6800      	ldr	r0, [r0, #0]
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	f7ff fdc7 	bl	800ab6c <_vfiprintf_r>
 800afde:	b002      	add	sp, #8
 800afe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe4:	b003      	add	sp, #12
 800afe6:	4770      	bx	lr
 800afe8:	20000010 	.word	0x20000010

0800afec <__swhatbuf_r>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	460e      	mov	r6, r1
 800aff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff4:	2900      	cmp	r1, #0
 800aff6:	b096      	sub	sp, #88	; 0x58
 800aff8:	4614      	mov	r4, r2
 800affa:	461d      	mov	r5, r3
 800affc:	da07      	bge.n	800b00e <__swhatbuf_r+0x22>
 800affe:	2300      	movs	r3, #0
 800b000:	602b      	str	r3, [r5, #0]
 800b002:	89b3      	ldrh	r3, [r6, #12]
 800b004:	061a      	lsls	r2, r3, #24
 800b006:	d410      	bmi.n	800b02a <__swhatbuf_r+0x3e>
 800b008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b00c:	e00e      	b.n	800b02c <__swhatbuf_r+0x40>
 800b00e:	466a      	mov	r2, sp
 800b010:	f000 f8b6 	bl	800b180 <_fstat_r>
 800b014:	2800      	cmp	r0, #0
 800b016:	dbf2      	blt.n	800affe <__swhatbuf_r+0x12>
 800b018:	9a01      	ldr	r2, [sp, #4]
 800b01a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b01e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b022:	425a      	negs	r2, r3
 800b024:	415a      	adcs	r2, r3
 800b026:	602a      	str	r2, [r5, #0]
 800b028:	e7ee      	b.n	800b008 <__swhatbuf_r+0x1c>
 800b02a:	2340      	movs	r3, #64	; 0x40
 800b02c:	2000      	movs	r0, #0
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	b016      	add	sp, #88	; 0x58
 800b032:	bd70      	pop	{r4, r5, r6, pc}

0800b034 <__smakebuf_r>:
 800b034:	898b      	ldrh	r3, [r1, #12]
 800b036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b038:	079d      	lsls	r5, r3, #30
 800b03a:	4606      	mov	r6, r0
 800b03c:	460c      	mov	r4, r1
 800b03e:	d507      	bpl.n	800b050 <__smakebuf_r+0x1c>
 800b040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	6123      	str	r3, [r4, #16]
 800b048:	2301      	movs	r3, #1
 800b04a:	6163      	str	r3, [r4, #20]
 800b04c:	b002      	add	sp, #8
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	ab01      	add	r3, sp, #4
 800b052:	466a      	mov	r2, sp
 800b054:	f7ff ffca 	bl	800afec <__swhatbuf_r>
 800b058:	9900      	ldr	r1, [sp, #0]
 800b05a:	4605      	mov	r5, r0
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7fd fb7f 	bl	8008760 <_malloc_r>
 800b062:	b948      	cbnz	r0, 800b078 <__smakebuf_r+0x44>
 800b064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b068:	059a      	lsls	r2, r3, #22
 800b06a:	d4ef      	bmi.n	800b04c <__smakebuf_r+0x18>
 800b06c:	f023 0303 	bic.w	r3, r3, #3
 800b070:	f043 0302 	orr.w	r3, r3, #2
 800b074:	81a3      	strh	r3, [r4, #12]
 800b076:	e7e3      	b.n	800b040 <__smakebuf_r+0xc>
 800b078:	4b0d      	ldr	r3, [pc, #52]	; (800b0b0 <__smakebuf_r+0x7c>)
 800b07a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	6020      	str	r0, [r4, #0]
 800b080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	9b00      	ldr	r3, [sp, #0]
 800b088:	6163      	str	r3, [r4, #20]
 800b08a:	9b01      	ldr	r3, [sp, #4]
 800b08c:	6120      	str	r0, [r4, #16]
 800b08e:	b15b      	cbz	r3, 800b0a8 <__smakebuf_r+0x74>
 800b090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b094:	4630      	mov	r0, r6
 800b096:	f000 f885 	bl	800b1a4 <_isatty_r>
 800b09a:	b128      	cbz	r0, 800b0a8 <__smakebuf_r+0x74>
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	f023 0303 	bic.w	r3, r3, #3
 800b0a2:	f043 0301 	orr.w	r3, r3, #1
 800b0a6:	81a3      	strh	r3, [r4, #12]
 800b0a8:	89a0      	ldrh	r0, [r4, #12]
 800b0aa:	4305      	orrs	r5, r0
 800b0ac:	81a5      	strh	r5, [r4, #12]
 800b0ae:	e7cd      	b.n	800b04c <__smakebuf_r+0x18>
 800b0b0:	080084a1 	.word	0x080084a1

0800b0b4 <__ascii_mbtowc>:
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	b901      	cbnz	r1, 800b0ba <__ascii_mbtowc+0x6>
 800b0b8:	a901      	add	r1, sp, #4
 800b0ba:	b142      	cbz	r2, 800b0ce <__ascii_mbtowc+0x1a>
 800b0bc:	b14b      	cbz	r3, 800b0d2 <__ascii_mbtowc+0x1e>
 800b0be:	7813      	ldrb	r3, [r2, #0]
 800b0c0:	600b      	str	r3, [r1, #0]
 800b0c2:	7812      	ldrb	r2, [r2, #0]
 800b0c4:	1e10      	subs	r0, r2, #0
 800b0c6:	bf18      	it	ne
 800b0c8:	2001      	movne	r0, #1
 800b0ca:	b002      	add	sp, #8
 800b0cc:	4770      	bx	lr
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	e7fb      	b.n	800b0ca <__ascii_mbtowc+0x16>
 800b0d2:	f06f 0001 	mvn.w	r0, #1
 800b0d6:	e7f8      	b.n	800b0ca <__ascii_mbtowc+0x16>

0800b0d8 <memmove>:
 800b0d8:	4288      	cmp	r0, r1
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	eb01 0402 	add.w	r4, r1, r2
 800b0e0:	d902      	bls.n	800b0e8 <memmove+0x10>
 800b0e2:	4284      	cmp	r4, r0
 800b0e4:	4623      	mov	r3, r4
 800b0e6:	d807      	bhi.n	800b0f8 <memmove+0x20>
 800b0e8:	1e43      	subs	r3, r0, #1
 800b0ea:	42a1      	cmp	r1, r4
 800b0ec:	d008      	beq.n	800b100 <memmove+0x28>
 800b0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0f6:	e7f8      	b.n	800b0ea <memmove+0x12>
 800b0f8:	4402      	add	r2, r0
 800b0fa:	4601      	mov	r1, r0
 800b0fc:	428a      	cmp	r2, r1
 800b0fe:	d100      	bne.n	800b102 <memmove+0x2a>
 800b100:	bd10      	pop	{r4, pc}
 800b102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b10a:	e7f7      	b.n	800b0fc <memmove+0x24>

0800b10c <_realloc_r>:
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	4607      	mov	r7, r0
 800b110:	4614      	mov	r4, r2
 800b112:	460e      	mov	r6, r1
 800b114:	b921      	cbnz	r1, 800b120 <_realloc_r+0x14>
 800b116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b11a:	4611      	mov	r1, r2
 800b11c:	f7fd bb20 	b.w	8008760 <_malloc_r>
 800b120:	b922      	cbnz	r2, 800b12c <_realloc_r+0x20>
 800b122:	f7fd facd 	bl	80086c0 <_free_r>
 800b126:	4625      	mov	r5, r4
 800b128:	4628      	mov	r0, r5
 800b12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b12c:	f000 f84a 	bl	800b1c4 <_malloc_usable_size_r>
 800b130:	42a0      	cmp	r0, r4
 800b132:	d20f      	bcs.n	800b154 <_realloc_r+0x48>
 800b134:	4621      	mov	r1, r4
 800b136:	4638      	mov	r0, r7
 800b138:	f7fd fb12 	bl	8008760 <_malloc_r>
 800b13c:	4605      	mov	r5, r0
 800b13e:	2800      	cmp	r0, #0
 800b140:	d0f2      	beq.n	800b128 <_realloc_r+0x1c>
 800b142:	4631      	mov	r1, r6
 800b144:	4622      	mov	r2, r4
 800b146:	f7fd faa4 	bl	8008692 <memcpy>
 800b14a:	4631      	mov	r1, r6
 800b14c:	4638      	mov	r0, r7
 800b14e:	f7fd fab7 	bl	80086c0 <_free_r>
 800b152:	e7e9      	b.n	800b128 <_realloc_r+0x1c>
 800b154:	4635      	mov	r5, r6
 800b156:	e7e7      	b.n	800b128 <_realloc_r+0x1c>

0800b158 <__ascii_wctomb>:
 800b158:	b149      	cbz	r1, 800b16e <__ascii_wctomb+0x16>
 800b15a:	2aff      	cmp	r2, #255	; 0xff
 800b15c:	bf85      	ittet	hi
 800b15e:	238a      	movhi	r3, #138	; 0x8a
 800b160:	6003      	strhi	r3, [r0, #0]
 800b162:	700a      	strbls	r2, [r1, #0]
 800b164:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b168:	bf98      	it	ls
 800b16a:	2001      	movls	r0, #1
 800b16c:	4770      	bx	lr
 800b16e:	4608      	mov	r0, r1
 800b170:	4770      	bx	lr

0800b172 <abort>:
 800b172:	b508      	push	{r3, lr}
 800b174:	2006      	movs	r0, #6
 800b176:	f000 f855 	bl	800b224 <raise>
 800b17a:	2001      	movs	r0, #1
 800b17c:	f7f6 ff56 	bl	800202c <_exit>

0800b180 <_fstat_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	; (800b1a0 <_fstat_r+0x20>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	f7f6 ff80 	bl	8002092 <_fstat>
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	d102      	bne.n	800b19c <_fstat_r+0x1c>
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	b103      	cbz	r3, 800b19c <_fstat_r+0x1c>
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	bf00      	nop
 800b1a0:	2000be1c 	.word	0x2000be1c

0800b1a4 <_isatty_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d06      	ldr	r5, [pc, #24]	; (800b1c0 <_isatty_r+0x1c>)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	f7f6 ff7f 	bl	80020b2 <_isatty>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_isatty_r+0x1a>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_isatty_r+0x1a>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	2000be1c 	.word	0x2000be1c

0800b1c4 <_malloc_usable_size_r>:
 800b1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c8:	1f18      	subs	r0, r3, #4
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfbc      	itt	lt
 800b1ce:	580b      	ldrlt	r3, [r1, r0]
 800b1d0:	18c0      	addlt	r0, r0, r3
 800b1d2:	4770      	bx	lr

0800b1d4 <_raise_r>:
 800b1d4:	291f      	cmp	r1, #31
 800b1d6:	b538      	push	{r3, r4, r5, lr}
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	d904      	bls.n	800b1e8 <_raise_r+0x14>
 800b1de:	2316      	movs	r3, #22
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1ea:	b112      	cbz	r2, 800b1f2 <_raise_r+0x1e>
 800b1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1f0:	b94b      	cbnz	r3, 800b206 <_raise_r+0x32>
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 f830 	bl	800b258 <_getpid_r>
 800b1f8:	462a      	mov	r2, r5
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b202:	f000 b817 	b.w	800b234 <_kill_r>
 800b206:	2b01      	cmp	r3, #1
 800b208:	d00a      	beq.n	800b220 <_raise_r+0x4c>
 800b20a:	1c59      	adds	r1, r3, #1
 800b20c:	d103      	bne.n	800b216 <_raise_r+0x42>
 800b20e:	2316      	movs	r3, #22
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	2001      	movs	r0, #1
 800b214:	e7e7      	b.n	800b1e6 <_raise_r+0x12>
 800b216:	2400      	movs	r4, #0
 800b218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b21c:	4628      	mov	r0, r5
 800b21e:	4798      	blx	r3
 800b220:	2000      	movs	r0, #0
 800b222:	e7e0      	b.n	800b1e6 <_raise_r+0x12>

0800b224 <raise>:
 800b224:	4b02      	ldr	r3, [pc, #8]	; (800b230 <raise+0xc>)
 800b226:	4601      	mov	r1, r0
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	f7ff bfd3 	b.w	800b1d4 <_raise_r>
 800b22e:	bf00      	nop
 800b230:	20000010 	.word	0x20000010

0800b234 <_kill_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d07      	ldr	r5, [pc, #28]	; (800b254 <_kill_r+0x20>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f7f6 fee3 	bl	800200c <_kill>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d102      	bne.n	800b250 <_kill_r+0x1c>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b103      	cbz	r3, 800b250 <_kill_r+0x1c>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	2000be1c 	.word	0x2000be1c

0800b258 <_getpid_r>:
 800b258:	f7f6 bed0 	b.w	8001ffc <_getpid>
 800b25c:	0000      	movs	r0, r0
	...

0800b260 <log>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	ed2d 8b02 	vpush	{d8}
 800b266:	ec55 4b10 	vmov	r4, r5, d0
 800b26a:	f000 f841 	bl	800b2f0 <__ieee754_log>
 800b26e:	4b1e      	ldr	r3, [pc, #120]	; (800b2e8 <log+0x88>)
 800b270:	eeb0 8a40 	vmov.f32	s16, s0
 800b274:	eef0 8a60 	vmov.f32	s17, s1
 800b278:	f993 3000 	ldrsb.w	r3, [r3]
 800b27c:	3301      	adds	r3, #1
 800b27e:	d01a      	beq.n	800b2b6 <log+0x56>
 800b280:	4622      	mov	r2, r4
 800b282:	462b      	mov	r3, r5
 800b284:	4620      	mov	r0, r4
 800b286:	4629      	mov	r1, r5
 800b288:	f7f5 fc58 	bl	8000b3c <__aeabi_dcmpun>
 800b28c:	b998      	cbnz	r0, 800b2b6 <log+0x56>
 800b28e:	2200      	movs	r2, #0
 800b290:	2300      	movs	r3, #0
 800b292:	4620      	mov	r0, r4
 800b294:	4629      	mov	r1, r5
 800b296:	f7f5 fc47 	bl	8000b28 <__aeabi_dcmpgt>
 800b29a:	b960      	cbnz	r0, 800b2b6 <log+0x56>
 800b29c:	2200      	movs	r2, #0
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	f7f5 fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2a8:	b160      	cbz	r0, 800b2c4 <log+0x64>
 800b2aa:	f7fc fffb 	bl	80082a4 <__errno>
 800b2ae:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800b2e0 <log+0x80>
 800b2b2:	2322      	movs	r3, #34	; 0x22
 800b2b4:	6003      	str	r3, [r0, #0]
 800b2b6:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ba:	eef0 0a68 	vmov.f32	s1, s17
 800b2be:	ecbd 8b02 	vpop	{d8}
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	f7fc ffee 	bl	80082a4 <__errno>
 800b2c8:	ecbd 8b02 	vpop	{d8}
 800b2cc:	2321      	movs	r3, #33	; 0x21
 800b2ce:	6003      	str	r3, [r0, #0]
 800b2d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2d4:	4805      	ldr	r0, [pc, #20]	; (800b2ec <log+0x8c>)
 800b2d6:	f000 b9c7 	b.w	800b668 <nan>
 800b2da:	bf00      	nop
 800b2dc:	f3af 8000 	nop.w
 800b2e0:	00000000 	.word	0x00000000
 800b2e4:	fff00000 	.word	0xfff00000
 800b2e8:	200001e0 	.word	0x200001e0
 800b2ec:	0800bc88 	.word	0x0800bc88

0800b2f0 <__ieee754_log>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	ec51 0b10 	vmov	r0, r1, d0
 800b2f8:	ed2d 8b04 	vpush	{d8-d9}
 800b2fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b300:	b083      	sub	sp, #12
 800b302:	460d      	mov	r5, r1
 800b304:	da29      	bge.n	800b35a <__ieee754_log+0x6a>
 800b306:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b30a:	4303      	orrs	r3, r0
 800b30c:	ee10 2a10 	vmov	r2, s0
 800b310:	d10c      	bne.n	800b32c <__ieee754_log+0x3c>
 800b312:	49cf      	ldr	r1, [pc, #828]	; (800b650 <__ieee754_log+0x360>)
 800b314:	2200      	movs	r2, #0
 800b316:	2300      	movs	r3, #0
 800b318:	2000      	movs	r0, #0
 800b31a:	f7f5 fa9f 	bl	800085c <__aeabi_ddiv>
 800b31e:	ec41 0b10 	vmov	d0, r0, r1
 800b322:	b003      	add	sp, #12
 800b324:	ecbd 8b04 	vpop	{d8-d9}
 800b328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32c:	2900      	cmp	r1, #0
 800b32e:	da05      	bge.n	800b33c <__ieee754_log+0x4c>
 800b330:	460b      	mov	r3, r1
 800b332:	f7f4 ffb1 	bl	8000298 <__aeabi_dsub>
 800b336:	2200      	movs	r2, #0
 800b338:	2300      	movs	r3, #0
 800b33a:	e7ee      	b.n	800b31a <__ieee754_log+0x2a>
 800b33c:	4bc5      	ldr	r3, [pc, #788]	; (800b654 <__ieee754_log+0x364>)
 800b33e:	2200      	movs	r2, #0
 800b340:	f7f5 f962 	bl	8000608 <__aeabi_dmul>
 800b344:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b348:	460d      	mov	r5, r1
 800b34a:	4ac3      	ldr	r2, [pc, #780]	; (800b658 <__ieee754_log+0x368>)
 800b34c:	4295      	cmp	r5, r2
 800b34e:	dd06      	ble.n	800b35e <__ieee754_log+0x6e>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	f7f4 ffa2 	bl	800029c <__adddf3>
 800b358:	e7e1      	b.n	800b31e <__ieee754_log+0x2e>
 800b35a:	2300      	movs	r3, #0
 800b35c:	e7f5      	b.n	800b34a <__ieee754_log+0x5a>
 800b35e:	152c      	asrs	r4, r5, #20
 800b360:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b364:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b368:	441c      	add	r4, r3
 800b36a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b36e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b376:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b37a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b37e:	ea42 0105 	orr.w	r1, r2, r5
 800b382:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b386:	2200      	movs	r2, #0
 800b388:	4bb4      	ldr	r3, [pc, #720]	; (800b65c <__ieee754_log+0x36c>)
 800b38a:	f7f4 ff85 	bl	8000298 <__aeabi_dsub>
 800b38e:	1cab      	adds	r3, r5, #2
 800b390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b394:	2b02      	cmp	r3, #2
 800b396:	4682      	mov	sl, r0
 800b398:	468b      	mov	fp, r1
 800b39a:	f04f 0200 	mov.w	r2, #0
 800b39e:	dc53      	bgt.n	800b448 <__ieee754_log+0x158>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f7f5 fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3a6:	b1d0      	cbz	r0, 800b3de <__ieee754_log+0xee>
 800b3a8:	2c00      	cmp	r4, #0
 800b3aa:	f000 8122 	beq.w	800b5f2 <__ieee754_log+0x302>
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7f5 f8c0 	bl	8000534 <__aeabi_i2d>
 800b3b4:	a390      	add	r3, pc, #576	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	f7f5 f923 	bl	8000608 <__aeabi_dmul>
 800b3c2:	a38f      	add	r3, pc, #572	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f5 f91a 	bl	8000608 <__aeabi_dmul>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4620      	mov	r0, r4
 800b3da:	4629      	mov	r1, r5
 800b3dc:	e7ba      	b.n	800b354 <__ieee754_log+0x64>
 800b3de:	a38a      	add	r3, pc, #552	; (adr r3, 800b608 <__ieee754_log+0x318>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	4659      	mov	r1, fp
 800b3e8:	f7f5 f90e 	bl	8000608 <__aeabi_dmul>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	499b      	ldr	r1, [pc, #620]	; (800b660 <__ieee754_log+0x370>)
 800b3f4:	f7f4 ff50 	bl	8000298 <__aeabi_dsub>
 800b3f8:	4652      	mov	r2, sl
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	465b      	mov	r3, fp
 800b400:	4650      	mov	r0, sl
 800b402:	4659      	mov	r1, fp
 800b404:	f7f5 f900 	bl	8000608 <__aeabi_dmul>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f5 f8fa 	bl	8000608 <__aeabi_dmul>
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	b914      	cbnz	r4, 800b420 <__ieee754_log+0x130>
 800b41a:	4632      	mov	r2, r6
 800b41c:	463b      	mov	r3, r7
 800b41e:	e0a2      	b.n	800b566 <__ieee754_log+0x276>
 800b420:	4620      	mov	r0, r4
 800b422:	f7f5 f887 	bl	8000534 <__aeabi_i2d>
 800b426:	a374      	add	r3, pc, #464	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	4680      	mov	r8, r0
 800b42e:	4689      	mov	r9, r1
 800b430:	f7f5 f8ea 	bl	8000608 <__aeabi_dmul>
 800b434:	a372      	add	r3, pc, #456	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	4604      	mov	r4, r0
 800b43c:	460d      	mov	r5, r1
 800b43e:	4640      	mov	r0, r8
 800b440:	4649      	mov	r1, r9
 800b442:	f7f5 f8e1 	bl	8000608 <__aeabi_dmul>
 800b446:	e0a7      	b.n	800b598 <__ieee754_log+0x2a8>
 800b448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b44c:	f7f4 ff26 	bl	800029c <__adddf3>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4650      	mov	r0, sl
 800b456:	4659      	mov	r1, fp
 800b458:	f7f5 fa00 	bl	800085c <__aeabi_ddiv>
 800b45c:	ec41 0b18 	vmov	d8, r0, r1
 800b460:	4620      	mov	r0, r4
 800b462:	f7f5 f867 	bl	8000534 <__aeabi_i2d>
 800b466:	ec53 2b18 	vmov	r2, r3, d8
 800b46a:	ec41 0b19 	vmov	d9, r0, r1
 800b46e:	ec51 0b18 	vmov	r0, r1, d8
 800b472:	f7f5 f8c9 	bl	8000608 <__aeabi_dmul>
 800b476:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b47a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4680      	mov	r8, r0
 800b486:	4689      	mov	r9, r1
 800b488:	f7f5 f8be 	bl	8000608 <__aeabi_dmul>
 800b48c:	a360      	add	r3, pc, #384	; (adr r3, 800b610 <__ieee754_log+0x320>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	a35f      	add	r3, pc, #380	; (adr r3, 800b618 <__ieee754_log+0x328>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 fefc 	bl	800029c <__adddf3>
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	f7f5 f8ae 	bl	8000608 <__aeabi_dmul>
 800b4ac:	a35c      	add	r3, pc, #368	; (adr r3, 800b620 <__ieee754_log+0x330>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 fef3 	bl	800029c <__adddf3>
 800b4b6:	4632      	mov	r2, r6
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	f7f5 f8a5 	bl	8000608 <__aeabi_dmul>
 800b4be:	a35a      	add	r3, pc, #360	; (adr r3, 800b628 <__ieee754_log+0x338>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 feea 	bl	800029c <__adddf3>
 800b4c8:	4642      	mov	r2, r8
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	f7f5 f89c 	bl	8000608 <__aeabi_dmul>
 800b4d0:	a357      	add	r3, pc, #348	; (adr r3, 800b630 <__ieee754_log+0x340>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	4689      	mov	r9, r1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f5 f893 	bl	8000608 <__aeabi_dmul>
 800b4e2:	a355      	add	r3, pc, #340	; (adr r3, 800b638 <__ieee754_log+0x348>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f4 fed8 	bl	800029c <__adddf3>
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	f7f5 f88a 	bl	8000608 <__aeabi_dmul>
 800b4f4:	a352      	add	r3, pc, #328	; (adr r3, 800b640 <__ieee754_log+0x350>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f4 fecf 	bl	800029c <__adddf3>
 800b4fe:	4632      	mov	r2, r6
 800b500:	463b      	mov	r3, r7
 800b502:	f7f5 f881 	bl	8000608 <__aeabi_dmul>
 800b506:	460b      	mov	r3, r1
 800b508:	4602      	mov	r2, r0
 800b50a:	4649      	mov	r1, r9
 800b50c:	4640      	mov	r0, r8
 800b50e:	f7f4 fec5 	bl	800029c <__adddf3>
 800b512:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b516:	9b01      	ldr	r3, [sp, #4]
 800b518:	3551      	adds	r5, #81	; 0x51
 800b51a:	431d      	orrs	r5, r3
 800b51c:	2d00      	cmp	r5, #0
 800b51e:	4680      	mov	r8, r0
 800b520:	4689      	mov	r9, r1
 800b522:	dd48      	ble.n	800b5b6 <__ieee754_log+0x2c6>
 800b524:	4b4e      	ldr	r3, [pc, #312]	; (800b660 <__ieee754_log+0x370>)
 800b526:	2200      	movs	r2, #0
 800b528:	4650      	mov	r0, sl
 800b52a:	4659      	mov	r1, fp
 800b52c:	f7f5 f86c 	bl	8000608 <__aeabi_dmul>
 800b530:	4652      	mov	r2, sl
 800b532:	465b      	mov	r3, fp
 800b534:	f7f5 f868 	bl	8000608 <__aeabi_dmul>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	4640      	mov	r0, r8
 800b542:	4649      	mov	r1, r9
 800b544:	f7f4 feaa 	bl	800029c <__adddf3>
 800b548:	ec53 2b18 	vmov	r2, r3, d8
 800b54c:	f7f5 f85c 	bl	8000608 <__aeabi_dmul>
 800b550:	4680      	mov	r8, r0
 800b552:	4689      	mov	r9, r1
 800b554:	b964      	cbnz	r4, 800b570 <__ieee754_log+0x280>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4630      	mov	r0, r6
 800b55c:	4639      	mov	r1, r7
 800b55e:	f7f4 fe9b 	bl	8000298 <__aeabi_dsub>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4650      	mov	r0, sl
 800b568:	4659      	mov	r1, fp
 800b56a:	f7f4 fe95 	bl	8000298 <__aeabi_dsub>
 800b56e:	e6d6      	b.n	800b31e <__ieee754_log+0x2e>
 800b570:	a321      	add	r3, pc, #132	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	ec51 0b19 	vmov	r0, r1, d9
 800b57a:	f7f5 f845 	bl	8000608 <__aeabi_dmul>
 800b57e:	a320      	add	r3, pc, #128	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	4604      	mov	r4, r0
 800b586:	460d      	mov	r5, r1
 800b588:	ec51 0b19 	vmov	r0, r1, d9
 800b58c:	f7f5 f83c 	bl	8000608 <__aeabi_dmul>
 800b590:	4642      	mov	r2, r8
 800b592:	464b      	mov	r3, r9
 800b594:	f7f4 fe82 	bl	800029c <__adddf3>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4630      	mov	r0, r6
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f4 fe7a 	bl	8000298 <__aeabi_dsub>
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	465b      	mov	r3, fp
 800b5a8:	f7f4 fe76 	bl	8000298 <__aeabi_dsub>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	e7d9      	b.n	800b56a <__ieee754_log+0x27a>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4650      	mov	r0, sl
 800b5bc:	4659      	mov	r1, fp
 800b5be:	f7f4 fe6b 	bl	8000298 <__aeabi_dsub>
 800b5c2:	ec53 2b18 	vmov	r2, r3, d8
 800b5c6:	f7f5 f81f 	bl	8000608 <__aeabi_dmul>
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	2c00      	cmp	r4, #0
 800b5d0:	f43f af23 	beq.w	800b41a <__ieee754_log+0x12a>
 800b5d4:	a308      	add	r3, pc, #32	; (adr r3, 800b5f8 <__ieee754_log+0x308>)
 800b5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5da:	ec51 0b19 	vmov	r0, r1, d9
 800b5de:	f7f5 f813 	bl	8000608 <__aeabi_dmul>
 800b5e2:	a307      	add	r3, pc, #28	; (adr r3, 800b600 <__ieee754_log+0x310>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	ec51 0b19 	vmov	r0, r1, d9
 800b5f0:	e727      	b.n	800b442 <__ieee754_log+0x152>
 800b5f2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b648 <__ieee754_log+0x358>
 800b5f6:	e694      	b.n	800b322 <__ieee754_log+0x32>
 800b5f8:	fee00000 	.word	0xfee00000
 800b5fc:	3fe62e42 	.word	0x3fe62e42
 800b600:	35793c76 	.word	0x35793c76
 800b604:	3dea39ef 	.word	0x3dea39ef
 800b608:	55555555 	.word	0x55555555
 800b60c:	3fd55555 	.word	0x3fd55555
 800b610:	df3e5244 	.word	0xdf3e5244
 800b614:	3fc2f112 	.word	0x3fc2f112
 800b618:	96cb03de 	.word	0x96cb03de
 800b61c:	3fc74664 	.word	0x3fc74664
 800b620:	94229359 	.word	0x94229359
 800b624:	3fd24924 	.word	0x3fd24924
 800b628:	55555593 	.word	0x55555593
 800b62c:	3fe55555 	.word	0x3fe55555
 800b630:	d078c69f 	.word	0xd078c69f
 800b634:	3fc39a09 	.word	0x3fc39a09
 800b638:	1d8e78af 	.word	0x1d8e78af
 800b63c:	3fcc71c5 	.word	0x3fcc71c5
 800b640:	9997fa04 	.word	0x9997fa04
 800b644:	3fd99999 	.word	0x3fd99999
	...
 800b650:	c3500000 	.word	0xc3500000
 800b654:	43500000 	.word	0x43500000
 800b658:	7fefffff 	.word	0x7fefffff
 800b65c:	3ff00000 	.word	0x3ff00000
 800b660:	3fe00000 	.word	0x3fe00000
 800b664:	00000000 	.word	0x00000000

0800b668 <nan>:
 800b668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b670 <nan+0x8>
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	00000000 	.word	0x00000000
 800b674:	7ff80000 	.word	0x7ff80000

0800b678 <_init>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	bf00      	nop
 800b67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67e:	bc08      	pop	{r3}
 800b680:	469e      	mov	lr, r3
 800b682:	4770      	bx	lr

0800b684 <_fini>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	bf00      	nop
 800b688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68a:	bc08      	pop	{r3}
 800b68c:	469e      	mov	lr, r3
 800b68e:	4770      	bx	lr
