
seu_proj_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b870  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800ba10  0800ba10  0001ba10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2cc  0800c2cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2cc  0800c2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d4  0800c2d4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d4  0800c2d4  0001c2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d8  0800c2d8  0001c2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c140  200001e4  0800c4c0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c324  0800c4c0  0002c324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9a8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af4  00000000  00000000  0003cbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000406b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  00041d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f41  00000000  00000000  00043288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a76  00000000  00000000  000481c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a61b2  00000000  00000000  00061c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107df1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007360  00000000  00000000  00107e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9f8 	.word	0x0800b9f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b9f8 	.word	0x0800b9f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f001 fa66 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f84a 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f978 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f60:	f000 f956 	bl	8001210 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 f92a 	bl	80011bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f68:	f000 f8fe 	bl	8001168 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f8aa 	bl	80010c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f70:	f004 f95c 	bl	800522c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of timerMutex */
  timerMutexHandle = osMutexNew(&timerMutex_attributes);
 8000f74:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <main+0x70>)
 8000f76:	f004 fa50 	bl	800541a <osMutexNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <main+0x74>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of temperatureMutex */
  temperatureMutexHandle = osMutexNew(&temperatureMutex_attributes);
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <main+0x78>)
 8000f82:	f004 fa4a 	bl	800541a <osMutexNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <main+0x7c>)
 8000f8a:	6013      	str	r3, [r2, #0]

  /* creation of modeMutex */
  modeMutexHandle = osMutexNew(&modeMutex_attributes);
 8000f8c:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <main+0x80>)
 8000f8e:	f004 fa44 	bl	800541a <osMutexNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <main+0x84>)
 8000f96:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of displayTask */
 // displayTaskHandle = osThreadNew(startDisplayTask, NULL, &displayTask_attributes);

  /* creation of temperatureTask */
  temperatureTaskHandle = osThreadNew(startTemperatureTask, NULL, &temperatureTask_attributes);
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <main+0x88>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <main+0x8c>)
 8000f9e:	f004 f98f 	bl	80052c0 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <main+0x90>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of networkComTask */
  networkComTaskHandle = osThreadNew(startNetworkComTask, NULL, &networkComTask_attributes);
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <main+0x94>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <main+0x98>)
 8000fae:	f004 f987 	bl	80052c0 <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <main+0x9c>)
 8000fb6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fb8:	f004 f95c 	bl	8005274 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <main+0x6c>
 8000fbe:	bf00      	nop
 8000fc0:	0800be94 	.word	0x0800be94
 8000fc4:	2000bd88 	.word	0x2000bd88
 8000fc8:	0800bea4 	.word	0x0800bea4
 8000fcc:	2000b3dc 	.word	0x2000b3dc
 8000fd0:	0800beb4 	.word	0x0800beb4
 8000fd4:	2000b374 	.word	0x2000b374
 8000fd8:	0800be4c 	.word	0x0800be4c
 8000fdc:	08001a29 	.word	0x08001a29
 8000fe0:	2000bdd4 	.word	0x2000bdd4
 8000fe4:	0800be70 	.word	0x0800be70
 8000fe8:	08001c81 	.word	0x08001c81
 8000fec:	2000bdd0 	.word	0x2000bdd0

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 fc9d 	bl	800893e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <SystemClock_Config+0xcc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <SystemClock_Config+0xcc>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <SystemClock_Config+0xcc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <SystemClock_Config+0xd0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <SystemClock_Config+0xd0>)
 800103a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <SystemClock_Config+0xd0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001060:	2310      	movs	r3, #16
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001064:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800106a:	2304      	movs	r3, #4
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800106e:	2304      	movs	r3, #4
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fc70 	bl	800395c <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001082:	f000 fef7 	bl	8001e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	2302      	movs	r3, #2
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2102      	movs	r1, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fed2 	bl	8003e4c <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ae:	f000 fee1 	bl	8001e74 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	; 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_ADC1_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <MX_ADC1_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_ADC1_Init+0x98>)
 80010de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_ADC1_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <MX_ADC1_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_ADC1_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_ADC1_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_ADC1_Init+0x98>)
 8001126:	f001 f9bf 	bl	80024a8 <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001130:	f000 fea0 	bl	8001e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_ADC1_Init+0x98>)
 8001146:	f001 fb3f 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001150:	f000 fe90 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000bce0 	.word	0x2000bce0
 8001160:	40012000 	.word	0x40012000
 8001164:	0f000001 	.word	0x0f000001

08001168 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART1_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART1_UART_Init+0x4c>)
 80011a0:	f003 fb02 	bl	80047a8 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 fe63 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000bd8c 	.word	0x2000bd8c
 80011b8:	40011000 	.word	0x40011000

080011bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_USART2_UART_Init+0x50>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f003 fad8 	bl	80047a8 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fe:	f000 fe39 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000be44 	.word	0x2000be44
 800120c:	40004400 	.word	0x40004400

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x3c>)
 8001220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x3c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	203a      	movs	r0, #58	; 0x3a
 8001238:	f001 fdac 	bl	8002d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800123c:	203a      	movs	r0, #58	; 0x3a
 800123e:	f001 fdc5 	bl	8002dcc <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <MX_GPIO_Init+0x14c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a4b      	ldr	r2, [pc, #300]	; (800139c <MX_GPIO_Init+0x14c>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <MX_GPIO_Init+0x14c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b45      	ldr	r3, [pc, #276]	; (800139c <MX_GPIO_Init+0x14c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a44      	ldr	r2, [pc, #272]	; (800139c <MX_GPIO_Init+0x14c>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b42      	ldr	r3, [pc, #264]	; (800139c <MX_GPIO_Init+0x14c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <MX_GPIO_Init+0x14c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a3d      	ldr	r2, [pc, #244]	; (800139c <MX_GPIO_Init+0x14c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <MX_GPIO_Init+0x14c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <MX_GPIO_Init+0x14c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a36      	ldr	r2, [pc, #216]	; (800139c <MX_GPIO_Init+0x14c>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <MX_GPIO_Init+0x14c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BUZZER_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80012dc:	4830      	ldr	r0, [pc, #192]	; (80013a0 <MX_GPIO_Init+0x150>)
 80012de:	f002 faff 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_0_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 618c 	mov.w	r1, #1120	; 0x460
 80012e8:	482e      	ldr	r0, [pc, #184]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012ea:	f002 faf9 	bl	80038e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012f4:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_GPIO_Init+0x158>)
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	482a      	ldr	r0, [pc, #168]	; (80013ac <MX_GPIO_Init+0x15c>)
 8001304:	f002 f950 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BUZZER_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BUZZER_Pin|LED_3_Pin;
 8001308:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	481f      	ldr	r0, [pc, #124]	; (80013a0 <MX_GPIO_Init+0x150>)
 8001322:	f002 f941 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_0_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_0_Pin|LED_1_Pin;
 8001326:	f44f 638c 	mov.w	r3, #1120	; 0x460
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4819      	ldr	r0, [pc, #100]	; (80013a4 <MX_GPIO_Init+0x154>)
 8001340:	f002 f932 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_0_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin;
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_GPIO_Init+0x158>)
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_0_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <MX_GPIO_Init+0x15c>)
 8001358:	f002 f926 	bl	80035a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 800135c:	2310      	movs	r3, #16
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_GPIO_Init+0x158>)
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001364:	2301      	movs	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_GPIO_Init+0x154>)
 8001370:	f002 f91a 	bl	80035a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	200a      	movs	r0, #10
 800137a:	f001 fd0b 	bl	8002d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800137e:	200a      	movs	r0, #10
 8001380:	f001 fd24 	bl	8002dcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2105      	movs	r1, #5
 8001388:	2017      	movs	r0, #23
 800138a:	f001 fd03 	bl	8002d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800138e:	2017      	movs	r0, #23
 8001390:	f001 fd1c 	bl	8002dcc <HAL_NVIC_EnableIRQ>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	10210000 	.word	0x10210000
 80013ac:	40020800 	.word	0x40020800

080013b0 <set_lights_and_buzzer>:


/*
 * Function for setting the lights and activating the Buzzer
 * */
void set_lights_and_buzzer(int buzz){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, LED_0_Pin, light_list[0]);
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <set_lights_and_buzzer+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	2120      	movs	r1, #32
 80013c2:	4815      	ldr	r0, [pc, #84]	; (8001418 <set_lights_and_buzzer+0x68>)
 80013c4:	f002 fa8c 	bl	80038e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_1_Pin, light_list[1]);
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <set_lights_and_buzzer+0x64>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	2140      	movs	r1, #64	; 0x40
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <set_lights_and_buzzer+0x68>)
 80013d4:	f002 fa84 	bl	80038e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_2_Pin, light_list[2]);
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <set_lights_and_buzzer+0x64>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <set_lights_and_buzzer+0x68>)
 80013e6:	f002 fa7b 	bl	80038e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_3_Pin, light_list[3]);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <set_lights_and_buzzer+0x64>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <set_lights_and_buzzer+0x6c>)
 80013f8:	f002 fa72 	bl	80038e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, buzz);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <set_lights_and_buzzer+0x6c>)
 8001406:	f002 fa6b 	bl	80038e0 <HAL_GPIO_WritePin>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000204 	.word	0x20000204
 8001418:	40020400 	.word	0x40020400
 800141c:	40020000 	.word	0x40020000

08001420 <time_buffer_write>:


/*
 * time_buffer_write() and time_buffer_read() makes sure the reading and writing to the global buffer happens with mutual exclution
 * */
void time_buffer_write(char* time, int size){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	while( osMutexAcquire(timerMutexHandle, 10000/portTICK_RATE_MS) != osOK);	// Aquire mutex
 800142a:	bf00      	nop
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <time_buffer_write+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f242 7110 	movw	r1, #10000	; 0x2710
 8001434:	4618      	mov	r0, r3
 8001436:	f004 f876 	bl	8005526 <osMutexAcquire>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f5      	bne.n	800142c <time_buffer_write+0xc>
	for(int i=0; i < size;i++){
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e00b      	b.n	800145e <time_buffer_write+0x3e>
		global_time_buffer[i] = time[i];
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	7819      	ldrb	r1, [r3, #0]
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <time_buffer_write+0x68>)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	460a      	mov	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < size;i++){
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	dbef      	blt.n	8001446 <time_buffer_write+0x26>
	}
	while(osMutexRelease(timerMutexHandle) != osOK);	//Release mutex
 8001466:	bf00      	nop
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <time_buffer_write+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f004 f8a5 	bl	80055bc <osMutexRelease>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f7      	bne.n	8001468 <time_buffer_write+0x48>
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000bd88 	.word	0x2000bd88
 8001488:	2000be3c 	.word	0x2000be3c

0800148c <temperature_buffer_write>:
}

/*
 * temperature_buffer_write() and temperature_buffer_read() makes sure the reading and writing to the global buffer happens with mutual exclution
 * */
void temperature_buffer_write(float temperature){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	ed87 0a01 	vstr	s0, [r7, #4]
	while( osMutexAcquire(temperatureMutexHandle, 10000/portTICK_RATE_MS) != osOK);	// Aquire mutex
 8001496:	bf00      	nop
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <temperature_buffer_write+0x44>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f242 7110 	movw	r1, #10000	; 0x2710
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 f840 	bl	8005526 <osMutexAcquire>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f5      	bne.n	8001498 <temperature_buffer_write+0xc>
	global_temperature_buffer = temperature;
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <temperature_buffer_write+0x48>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
	while(osMutexRelease(temperatureMutexHandle) != osOK);	//Release mutex
 80014b2:	bf00      	nop
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <temperature_buffer_write+0x44>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 f87f 	bl	80055bc <osMutexRelease>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f7      	bne.n	80014b4 <temperature_buffer_write+0x28>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000b3dc 	.word	0x2000b3dc
 80014d4:	20000200 	.word	0x20000200

080014d8 <clean_time_response>:
}

/*
 *	 This function takes in the response from a HTTP request and cleans away so were left with only the JSON.
 */
void clean_time_response(char * data, int maxlen){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]

	int t,h,l,o,i = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
	char * res;
	int indexbk;
	char bytes[4];

	res = data;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	617b      	str	r3, [r7, #20]

	for(t=0; t < maxlen; t++) buff_response1[t] = '*';
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	e007      	b.n	8001500 <clean_time_response+0x28>
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <clean_time_response+0x150>)
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	4413      	add	r3, r2
 80014f6:	222a      	movs	r2, #42	; 0x2a
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf3      	blt.n	80014f0 <clean_time_response+0x18>

	for(t = 0; t< maxlen;){
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
 800150c:	e062      	b.n	80015d4 <clean_time_response+0xfc>
		res = strnstr(res, "+IPD", maxlen-t);
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4945      	ldr	r1, [pc, #276]	; (800162c <clean_time_response+0x154>)
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f008 f82e 	bl	800957a <strnstr>
 800151e:	4603      	mov	r3, r0
 8001520:	617b      	str	r3, [r7, #20]
		if(res!=NULL){
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d04f      	beq.n	80015c8 <clean_time_response+0xf0>
			bytes[0]=*(res+5);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	795b      	ldrb	r3, [r3, #5]
 800152c:	723b      	strb	r3, [r7, #8]
			bytes[1]=*(res+6);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	799b      	ldrb	r3, [r3, #6]
 8001532:	727b      	strb	r3, [r7, #9]
			bytes[2]=*(res+7);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	79db      	ldrb	r3, [r3, #7]
 8001538:	72bb      	strb	r3, [r7, #10]
			bytes[3]=*(res+8);
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	7a1b      	ldrb	r3, [r3, #8]
 800153e:	72fb      	strb	r3, [r7, #11]

			for(h=0;h<4;h++) if(bytes[h]==':'){o=h;bytes[h]=0;}
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
 8001544:	e011      	b.n	800156a <clean_time_response+0x92>
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b3a      	cmp	r3, #58	; 0x3a
 8001552:	d107      	bne.n	8001564 <clean_time_response+0x8c>
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	f107 0208 	add.w	r2, r7, #8
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	4413      	add	r3, r2
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	3301      	adds	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	2b03      	cmp	r3, #3
 800156e:	ddea      	ble.n	8001546 <clean_time_response+0x6e>
			l=atoi(bytes);
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f006 ffd9 	bl	800852c <atoi>
 800157a:	60f8      	str	r0, [r7, #12]

			for(h=0;h<l;h++)buff_response1[t+h]=*(res+h+o+6);
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	e00e      	b.n	80015a0 <clean_time_response+0xc8>
 8001582:	6a3a      	ldr	r2, [r7, #32]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	3306      	adds	r3, #6
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	441a      	add	r2, r3
 800158e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	440b      	add	r3, r1
 8001594:	7811      	ldrb	r1, [r2, #0]
 8001596:	4a24      	ldr	r2, [pc, #144]	; (8001628 <clean_time_response+0x150>)
 8001598:	54d1      	strb	r1, [r2, r3]
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3301      	adds	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	6a3a      	ldr	r2, [r7, #32]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbec      	blt.n	8001582 <clean_time_response+0xaa>
			indexbk = t+h;
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	4413      	add	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
			t=t+l;
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
			res = res+t+o+6; // To avoid +IPD
 80015b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	3306      	adds	r3, #6
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	4413      	add	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e005      	b.n	80015d4 <clean_time_response+0xfc>
		}else{
			buff_response1[indexbk] = 0;
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <clean_time_response+0x150>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4413      	add	r3, r2
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
			break;
 80015d2:	e003      	b.n	80015dc <clean_time_response+0x104>
	for(t = 0; t< maxlen;){
 80015d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	db98      	blt.n	800150e <clean_time_response+0x36>
		}
	}
	i=0;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
	do{
	}while(buff_response1[i++]!='{');
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	61ba      	str	r2, [r7, #24]
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <clean_time_response+0x150>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	2b7b      	cmp	r3, #123	; 0x7b
 80015ec:	d1f8      	bne.n	80015e0 <clean_time_response+0x108>
	i--;
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]

	for(t = 0; t < (2048-i); t++){
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	e00b      	b.n	8001612 <clean_time_response+0x13a>
		buff_response1[t] = buff_response1[t+1];
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <clean_time_response+0x150>)
 8001600:	5cd1      	ldrb	r1, [r2, r3]
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <clean_time_response+0x150>)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	4413      	add	r3, r2
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
	for(t = 0; t < (2048-i); t++){
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	3301      	adds	r3, #1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	429a      	cmp	r2, r3
 800161c:	dbed      	blt.n	80015fa <clean_time_response+0x122>
	}

}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000b4e0 	.word	0x2000b4e0
 800162c:	0800ba68 	.word	0x0800ba68

08001630 <ESP8266_get_time>:
}

/*
 * This functions send a HTTP request to worldclockapi.com to get the current time
 * */
void ESP8266_get_time(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	int ct;
	sprintf(buff_sprintf100,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n","worldclockapi.com","80");
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <ESP8266_get_time+0xc0>)
 8001638:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <ESP8266_get_time+0xc4>)
 800163a:	492f      	ldr	r1, [pc, #188]	; (80016f8 <ESP8266_get_time+0xc8>)
 800163c:	482f      	ldr	r0, [pc, #188]	; (80016fc <ESP8266_get_time+0xcc>)
 800163e:	f007 ff39 	bl	80094b4 <siprintf>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100, strlen( buff_sprintf100),100000); // cabecera
 8001642:	482e      	ldr	r0, [pc, #184]	; (80016fc <ESP8266_get_time+0xcc>)
 8001644:	f7fe fdcc 	bl	80001e0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <ESP8266_get_time+0xd0>)
 800164e:	492b      	ldr	r1, [pc, #172]	; (80016fc <ESP8266_get_time+0xcc>)
 8001650:	482c      	ldr	r0, [pc, #176]	; (8001704 <ESP8266_get_time+0xd4>)
 8001652:	f003 f8f6 	bl	8004842 <HAL_UART_Transmit>
	osDelay(100);
 8001656:	2064      	movs	r0, #100	; 0x64
 8001658:	f003 fec4 	bl	80053e4 <osDelay>
	sprintf(buff_sprintf100,"GET /api/json/cet/now HTTP/1.1\r\nAccept: text/html\r\nHost: worldclockapi.com\r\n\r\n");
 800165c:	492a      	ldr	r1, [pc, #168]	; (8001708 <ESP8266_get_time+0xd8>)
 800165e:	4827      	ldr	r0, [pc, #156]	; (80016fc <ESP8266_get_time+0xcc>)
 8001660:	f007 ff28 	bl	80094b4 <siprintf>
	sprintf(buff_sprintf100_1,( unsigned char *)"AT+CIPSEND=%d\r\n",strlen(buff_sprintf100));
 8001664:	4825      	ldr	r0, [pc, #148]	; (80016fc <ESP8266_get_time+0xcc>)
 8001666:	f7fe fdbb 	bl	80001e0 <strlen>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4927      	ldr	r1, [pc, #156]	; (800170c <ESP8266_get_time+0xdc>)
 8001670:	4827      	ldr	r0, [pc, #156]	; (8001710 <ESP8266_get_time+0xe0>)
 8001672:	f007 ff1f 	bl	80094b4 <siprintf>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100_1, strlen( buff_sprintf100_1),100000); // cabecera
 8001676:	4826      	ldr	r0, [pc, #152]	; (8001710 <ESP8266_get_time+0xe0>)
 8001678:	f7fe fdb2 	bl	80001e0 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <ESP8266_get_time+0xd0>)
 8001682:	4923      	ldr	r1, [pc, #140]	; (8001710 <ESP8266_get_time+0xe0>)
 8001684:	481f      	ldr	r0, [pc, #124]	; (8001704 <ESP8266_get_time+0xd4>)
 8001686:	f003 f8dc 	bl	8004842 <HAL_UART_Transmit>
	osDelay(100);
 800168a:	2064      	movs	r0, #100	; 0x64
 800168c:	f003 feaa 	bl	80053e4 <osDelay>

	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	e007      	b.n	80016a6 <ESP8266_get_time+0x76>
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <ESP8266_get_time+0xe4>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3301      	adds	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ac:	dbf3      	blt.n	8001696 <ESP8266_get_time+0x66>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80016ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b2:	4918      	ldr	r1, [pc, #96]	; (8001714 <ESP8266_get_time+0xe4>)
 80016b4:	4813      	ldr	r0, [pc, #76]	; (8001704 <ESP8266_get_time+0xd4>)
 80016b6:	f003 f956 	bl	8004966 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100, strlen( buff_sprintf100),100000); // cabecera
 80016ba:	4810      	ldr	r0, [pc, #64]	; (80016fc <ESP8266_get_time+0xcc>)
 80016bc:	f7fe fd90 	bl	80001e0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <ESP8266_get_time+0xd0>)
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <ESP8266_get_time+0xcc>)
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <ESP8266_get_time+0xd4>)
 80016ca:	f003 f8ba 	bl	8004842 <HAL_UART_Transmit>
	osDelay(500);
 80016ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d2:	f003 fe87 	bl	80053e4 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <ESP8266_get_time+0xd4>)
 80016d8:	f003 f975 	bl	80049c6 <HAL_UART_DMAStop>

	clean_time_response(( unsigned char *)buff_recv,2048);
 80016dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <ESP8266_get_time+0xe4>)
 80016e2:	f7ff fef9 	bl	80014d8 <clean_time_response>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0800ba70 	.word	0x0800ba70
 80016f4:	0800ba74 	.word	0x0800ba74
 80016f8:	0800ba88 	.word	0x0800ba88
 80016fc:	2000b378 	.word	0x2000b378
 8001700:	000186a0 	.word	0x000186a0
 8001704:	2000bd8c 	.word	0x2000bd8c
 8001708:	0800baa4 	.word	0x0800baa4
 800170c:	0800baf4 	.word	0x0800baf4
 8001710:	2000bdd8 	.word	0x2000bdd8
 8001714:	2000ab70 	.word	0x2000ab70

08001718 <ESP8266_Boot>:

/*
 * This function is to set up the ESP8266 to connect to wifi. It is only runned once.
 * */
void ESP8266_Boot(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	int ct;
	// Reset ESP
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	e007      	b.n	8001734 <ESP8266_Boot+0x1c>
 8001724:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800173a:	dbf3      	blt.n	8001724 <ESP8266_Boot+0xc>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 800173c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001740:	496b      	ldr	r1, [pc, #428]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001742:	486c      	ldr	r0, [pc, #432]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001744:	f003 f90f 	bl	8004966 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+RST\r\n",strlen("AT+RST\r\n"),10000);
 8001748:	f242 7310 	movw	r3, #10000	; 0x2710
 800174c:	2208      	movs	r2, #8
 800174e:	496a      	ldr	r1, [pc, #424]	; (80018f8 <ESP8266_Boot+0x1e0>)
 8001750:	4868      	ldr	r0, [pc, #416]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001752:	f003 f876 	bl	8004842 <HAL_UART_Transmit>
	osDelay(2000);
 8001756:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800175a:	f003 fe43 	bl	80053e4 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 800175e:	4865      	ldr	r0, [pc, #404]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001760:	f003 f931 	bl	80049c6 <HAL_UART_DMAStop>
	HAL_UART_Transmit(&huart2, buff_recv,strlen((char*)buff_recv),10000);
 8001764:	4862      	ldr	r0, [pc, #392]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001766:	f7fe fd3b 	bl	80001e0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001772:	495f      	ldr	r1, [pc, #380]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001774:	4861      	ldr	r0, [pc, #388]	; (80018fc <ESP8266_Boot+0x1e4>)
 8001776:	f003 f864 	bl	8004842 <HAL_UART_Transmit>


	// Tiene IP?
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	e007      	b.n	8001790 <ESP8266_Boot+0x78>
 8001780:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3301      	adds	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001796:	dbf3      	blt.n	8001780 <ESP8266_Boot+0x68>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 8001798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800179c:	4954      	ldr	r1, [pc, #336]	; (80018f0 <ESP8266_Boot+0x1d8>)
 800179e:	4855      	ldr	r0, [pc, #340]	; (80018f4 <ESP8266_Boot+0x1dc>)
 80017a0:	f003 f8e1 	bl	8004966 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 80017a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80017a8:	220a      	movs	r2, #10
 80017aa:	4955      	ldr	r1, [pc, #340]	; (8001900 <ESP8266_Boot+0x1e8>)
 80017ac:	4851      	ldr	r0, [pc, #324]	; (80018f4 <ESP8266_Boot+0x1dc>)
 80017ae:	f003 f848 	bl	8004842 <HAL_UART_Transmit>
	osDelay(2000);
 80017b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017b6:	f003 fe15 	bl	80053e4 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 80017ba:	484e      	ldr	r0, [pc, #312]	; (80018f4 <ESP8266_Boot+0x1dc>)
 80017bc:	f003 f903 	bl	80049c6 <HAL_UART_DMAStop>
	HAL_UART_Transmit(&huart2, buff_recv,strlen((char*)buff_recv),10000);
 80017c0:	484b      	ldr	r0, [pc, #300]	; (80018f0 <ESP8266_Boot+0x1d8>)
 80017c2:	f7fe fd0d 	bl	80001e0 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80017ce:	4948      	ldr	r1, [pc, #288]	; (80018f0 <ESP8266_Boot+0x1d8>)
 80017d0:	484a      	ldr	r0, [pc, #296]	; (80018fc <ESP8266_Boot+0x1e4>)
 80017d2:	f003 f836 	bl	8004842 <HAL_UART_Transmit>


	// Pon en modo station=1,  station+access_point=3
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	e007      	b.n	80017ec <ESP8266_Boot+0xd4>
 80017dc:	4a44      	ldr	r2, [pc, #272]	; (80018f0 <ESP8266_Boot+0x1d8>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3301      	adds	r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017f2:	dbf3      	blt.n	80017dc <ESP8266_Boot+0xc4>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80017f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f8:	493d      	ldr	r1, [pc, #244]	; (80018f0 <ESP8266_Boot+0x1d8>)
 80017fa:	483e      	ldr	r0, [pc, #248]	; (80018f4 <ESP8266_Boot+0x1dc>)
 80017fc:	f003 f8b3 	bl	8004966 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
 8001800:	4b40      	ldr	r3, [pc, #256]	; (8001904 <ESP8266_Boot+0x1ec>)
 8001802:	220d      	movs	r2, #13
 8001804:	4940      	ldr	r1, [pc, #256]	; (8001908 <ESP8266_Boot+0x1f0>)
 8001806:	483b      	ldr	r0, [pc, #236]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001808:	f003 f81b 	bl	8004842 <HAL_UART_Transmit>
	osDelay(2000);
 800180c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001810:	f003 fde8 	bl	80053e4 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 8001814:	4837      	ldr	r0, [pc, #220]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001816:	f003 f8d6 	bl	80049c6 <HAL_UART_DMAStop>
	HAL_UART_Transmit(&huart2, buff_recv,strlen((char *)buff_recv),10000);
 800181a:	4835      	ldr	r0, [pc, #212]	; (80018f0 <ESP8266_Boot+0x1d8>)
 800181c:	f7fe fce0 	bl	80001e0 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	f242 7310 	movw	r3, #10000	; 0x2710
 8001828:	4931      	ldr	r1, [pc, #196]	; (80018f0 <ESP8266_Boot+0x1d8>)
 800182a:	4834      	ldr	r0, [pc, #208]	; (80018fc <ESP8266_Boot+0x1e4>)
 800182c:	f003 f809 	bl	8004842 <HAL_UART_Transmit>

	// Programa la contraseña del access-point
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	e007      	b.n	8001846 <ESP8266_Boot+0x12e>
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800184c:	dbf3      	blt.n	8001836 <ESP8266_Boot+0x11e>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 800184e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001854:	4827      	ldr	r0, [pc, #156]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001856:	f003 f886 	bl	8004966 <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(UART_ESP8266,( unsigned char *) "AT+CWJAP=\"routerSEU\",\"00000000\"\r\n",strlen("AT+CWJAP=\"routerSeu\",\"00000000\"\r\n"),10000);
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) "AT+CWJAP=\"Lowi338D\",\"VVGH3T7SR28SQ9\"\r\n",strlen("AT+CWJAP=\"Lowi338D\",\"VVGH3T7SR28SQ9\"\r\n"),10000);
 800185a:	f242 7310 	movw	r3, #10000	; 0x2710
 800185e:	2226      	movs	r2, #38	; 0x26
 8001860:	492a      	ldr	r1, [pc, #168]	; (800190c <ESP8266_Boot+0x1f4>)
 8001862:	4824      	ldr	r0, [pc, #144]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001864:	f002 ffed 	bl	8004842 <HAL_UART_Transmit>
	//HAL_UART_Transmit(UART_ESP8266,( unsigned char *) "AT+CWJAP=\"Lars iPhone\",\"noerart1234\"\r\n",strlen("AT+CWJAP=\"Lars iPhone\",\"noerart1234\"\r\n"),10000);
	osDelay(10000);
 8001868:	f242 7010 	movw	r0, #10000	; 0x2710
 800186c:	f003 fdba 	bl	80053e4 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 8001870:	4820      	ldr	r0, [pc, #128]	; (80018f4 <ESP8266_Boot+0x1dc>)
 8001872:	f003 f8a8 	bl	80049c6 <HAL_UART_DMAStop>
	HAL_UART_Transmit(&huart2, buff_recv,strlen((char *)buff_recv),10000);
 8001876:	481e      	ldr	r0, [pc, #120]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001878:	f7fe fcb2 	bl	80001e0 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f242 7310 	movw	r3, #10000	; 0x2710
 8001884:	491a      	ldr	r1, [pc, #104]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001886:	481d      	ldr	r0, [pc, #116]	; (80018fc <ESP8266_Boot+0x1e4>)
 8001888:	f002 ffdb 	bl	8004842 <HAL_UART_Transmit>


	// verifica si hay IP
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	e007      	b.n	80018a2 <ESP8266_Boot+0x18a>
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <ESP8266_Boot+0x1d8>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3301      	adds	r3, #1
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018a8:	dbf3      	blt.n	8001892 <ESP8266_Boot+0x17a>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048);
 80018aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ae:	4910      	ldr	r1, [pc, #64]	; (80018f0 <ESP8266_Boot+0x1d8>)
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <ESP8266_Boot+0x1dc>)
 80018b2:	f003 f858 	bl	8004966 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 80018b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80018ba:	220a      	movs	r2, #10
 80018bc:	4910      	ldr	r1, [pc, #64]	; (8001900 <ESP8266_Boot+0x1e8>)
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <ESP8266_Boot+0x1dc>)
 80018c0:	f002 ffbf 	bl	8004842 <HAL_UART_Transmit>
	osDelay(4000);
 80018c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80018c8:	f003 fd8c 	bl	80053e4 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <ESP8266_Boot+0x1dc>)
 80018ce:	f003 f87a 	bl	80049c6 <HAL_UART_DMAStop>
	HAL_UART_Transmit(&huart2, buff_recv,strlen((char *)buff_recv),10000);
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <ESP8266_Boot+0x1d8>)
 80018d4:	f7fe fc84 	bl	80001e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80018e0:	4903      	ldr	r1, [pc, #12]	; (80018f0 <ESP8266_Boot+0x1d8>)
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <ESP8266_Boot+0x1e4>)
 80018e4:	f002 ffad 	bl	8004842 <HAL_UART_Transmit>

}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000ab70 	.word	0x2000ab70
 80018f4:	2000bd8c 	.word	0x2000bd8c
 80018f8:	0800bb04 	.word	0x0800bb04
 80018fc:	2000be44 	.word	0x2000be44
 8001900:	0800bb10 	.word	0x0800bb10
 8001904:	000186a0 	.word	0x000186a0
 8001908:	0800bb1c 	.word	0x0800bb1c
 800190c:	0800bb2c 	.word	0x0800bb2c

08001910 <OrionContextBroker_query>:
   	 printf("%s",buff_recv); //Print response

}


void OrionContextBroker_query(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af02      	add	r7, sp, #8

	int ct;



	sprintf(buff_sprintf100,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",ORION_ADDRESS,ORION_PORT); //Start tcp with context broker
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <OrionContextBroker_query+0xd8>)
 8001918:	4a34      	ldr	r2, [pc, #208]	; (80019ec <OrionContextBroker_query+0xdc>)
 800191a:	4935      	ldr	r1, [pc, #212]	; (80019f0 <OrionContextBroker_query+0xe0>)
 800191c:	4835      	ldr	r0, [pc, #212]	; (80019f4 <OrionContextBroker_query+0xe4>)
 800191e:	f007 fdc9 	bl	80094b4 <siprintf>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100, strlen( buff_sprintf100),100000); // Send it to the ESP
 8001922:	4834      	ldr	r0, [pc, #208]	; (80019f4 <OrionContextBroker_query+0xe4>)
 8001924:	f7fe fc5c 	bl	80001e0 <strlen>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <OrionContextBroker_query+0xe8>)
 800192e:	4931      	ldr	r1, [pc, #196]	; (80019f4 <OrionContextBroker_query+0xe4>)
 8001930:	4832      	ldr	r0, [pc, #200]	; (80019fc <OrionContextBroker_query+0xec>)
 8001932:	f002 ff86 	bl	8004842 <HAL_UART_Transmit>
	osDelay(100);
 8001936:	2064      	movs	r0, #100	; 0x64
 8001938:	f003 fd54 	bl	80053e4 <osDelay>

	sprintf(buff_sprintf_body,ORION_QUERY_BODY_TEMP,IoT_NAME); // Fill the context body buffer with the context
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <OrionContextBroker_query+0xf0>)
 800193e:	4931      	ldr	r1, [pc, #196]	; (8001a04 <OrionContextBroker_query+0xf4>)
 8001940:	4831      	ldr	r0, [pc, #196]	; (8001a08 <OrionContextBroker_query+0xf8>)
 8001942:	f007 fdb7 	bl	80094b4 <siprintf>
	sprintf(buff_sprintf1024,"%s %d\r\n\r\n%s",ORION_QUERY,strlen(buff_sprintf_body),buff_sprintf_body); //Fill the full request buffer with request, size and body
 8001946:	4830      	ldr	r0, [pc, #192]	; (8001a08 <OrionContextBroker_query+0xf8>)
 8001948:	f7fe fc4a 	bl	80001e0 <strlen>
 800194c:	4603      	mov	r3, r0
 800194e:	4a2e      	ldr	r2, [pc, #184]	; (8001a08 <OrionContextBroker_query+0xf8>)
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	4a2e      	ldr	r2, [pc, #184]	; (8001a0c <OrionContextBroker_query+0xfc>)
 8001954:	492e      	ldr	r1, [pc, #184]	; (8001a10 <OrionContextBroker_query+0x100>)
 8001956:	482f      	ldr	r0, [pc, #188]	; (8001a14 <OrionContextBroker_query+0x104>)
 8001958:	f007 fdac 	bl	80094b4 <siprintf>

	sprintf(buff_sprintf100_1,( unsigned char *)"AT+CIPSEND=%d\r\n",strlen(buff_sprintf1024));
 800195c:	482d      	ldr	r0, [pc, #180]	; (8001a14 <OrionContextBroker_query+0x104>)
 800195e:	f7fe fc3f 	bl	80001e0 <strlen>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	492c      	ldr	r1, [pc, #176]	; (8001a18 <OrionContextBroker_query+0x108>)
 8001968:	482c      	ldr	r0, [pc, #176]	; (8001a1c <OrionContextBroker_query+0x10c>)
 800196a:	f007 fda3 	bl	80094b4 <siprintf>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf100_1, strlen( buff_sprintf100_1),100000); // Prepare ESP with size of request
 800196e:	482b      	ldr	r0, [pc, #172]	; (8001a1c <OrionContextBroker_query+0x10c>)
 8001970:	f7fe fc36 	bl	80001e0 <strlen>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <OrionContextBroker_query+0xe8>)
 800197a:	4928      	ldr	r1, [pc, #160]	; (8001a1c <OrionContextBroker_query+0x10c>)
 800197c:	481f      	ldr	r0, [pc, #124]	; (80019fc <OrionContextBroker_query+0xec>)
 800197e:	f002 ff60 	bl	8004842 <HAL_UART_Transmit>
	osDelay(100);
 8001982:	2064      	movs	r0, #100	; 0x64
 8001984:	f003 fd2e 	bl	80053e4 <osDelay>

	for (ct=0;ct<2048;ct++) buff_recv[ct]=0; //Empty recieve buffer
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	e007      	b.n	800199e <OrionContextBroker_query+0x8e>
 800198e:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <OrionContextBroker_query+0x110>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3301      	adds	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a4:	dbf3      	blt.n	800198e <OrionContextBroker_query+0x7e>
	HAL_UART_Receive_DMA(UART_ESP8266, buff_recv,2048); // Set esp response to save in receive buffer
 80019a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019aa:	491d      	ldr	r1, [pc, #116]	; (8001a20 <OrionContextBroker_query+0x110>)
 80019ac:	4813      	ldr	r0, [pc, #76]	; (80019fc <OrionContextBroker_query+0xec>)
 80019ae:	f002 ffda 	bl	8004966 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(UART_ESP8266,( unsigned char *) buff_sprintf1024, strlen( buff_sprintf1024),100000); // Transimt the request
 80019b2:	4818      	ldr	r0, [pc, #96]	; (8001a14 <OrionContextBroker_query+0x104>)
 80019b4:	f7fe fc14 	bl	80001e0 <strlen>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <OrionContextBroker_query+0xe8>)
 80019be:	4915      	ldr	r1, [pc, #84]	; (8001a14 <OrionContextBroker_query+0x104>)
 80019c0:	480e      	ldr	r0, [pc, #56]	; (80019fc <OrionContextBroker_query+0xec>)
 80019c2:	f002 ff3e 	bl	8004842 <HAL_UART_Transmit>
	osDelay(2000);
 80019c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019ca:	f003 fd0b 	bl	80053e4 <osDelay>
	HAL_UART_DMAStop(UART_ESP8266);
 80019ce:	480b      	ldr	r0, [pc, #44]	; (80019fc <OrionContextBroker_query+0xec>)
 80019d0:	f002 fff9 	bl	80049c6 <HAL_UART_DMAStop>
	//printf("%s",buff_recv); //Print response
	clean_time_response(( unsigned char *)buff_recv,2048);
 80019d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d8:	4811      	ldr	r0, [pc, #68]	; (8001a20 <OrionContextBroker_query+0x110>)
 80019da:	f7ff fd7d 	bl	80014d8 <clean_time_response>

}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0800bb54 	.word	0x0800bb54
 80019ec:	0800bb5c 	.word	0x0800bb5c
 80019f0:	0800ba88 	.word	0x0800ba88
 80019f4:	2000b378 	.word	0x2000b378
 80019f8:	000186a0 	.word	0x000186a0
 80019fc:	2000bd8c 	.word	0x2000bd8c
 8001a00:	0800bb74 	.word	0x0800bb74
 8001a04:	0800bca8 	.word	0x0800bca8
 8001a08:	2000b3e0 	.word	0x2000b3e0
 8001a0c:	0800bcec 	.word	0x0800bcec
 8001a10:	0800bc98 	.word	0x0800bc98
 8001a14:	2000be88 	.word	0x2000be88
 8001a18:	0800baf4 	.word	0x0800baf4
 8001a1c:	2000bdd8 	.word	0x2000bdd8
 8001a20:	2000ab70 	.word	0x2000ab70
 8001a24:	00000000 	.word	0x00000000

08001a28 <startTemperatureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTemperatureTask */
void startTemperatureTask(void *argument)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	; 0x30
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTemperatureTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8001a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a34:	f003 fcd6 	bl	80053e4 <osDelay>
	  		  uint32_t valueAD;
	  		  float VRNTC,RNTC,TNTC;
	  		  int buzzer = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24

	  		  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
	  			// configuracion del canal de entrada A/D
	  		  sConfig.Channel = ADC_CHANNEL_1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
	  		  sConfig.Rank = 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	613b      	str	r3, [r7, #16]
	  		  //sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
	  		  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	4885      	ldr	r0, [pc, #532]	; (8001c70 <startTemperatureTask+0x248>)
 8001a5a:	f000 feb5 	bl	80027c8 <HAL_ADC_ConfigChannel>
	  		  // Disparo la conversion
	  		  HAL_ADC_Start(&hadc1);
 8001a5e:	4884      	ldr	r0, [pc, #528]	; (8001c70 <startTemperatureTask+0x248>)
 8001a60:	f000 fd66 	bl	8002530 <HAL_ADC_Start>
	  		  // Espero la finalización
	  		  HAL_ADC_PollForConversion(&hadc1, 10000);
 8001a64:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a68:	4881      	ldr	r0, [pc, #516]	; (8001c70 <startTemperatureTask+0x248>)
 8001a6a:	f000 fe15 	bl	8002698 <HAL_ADC_PollForConversion>
	  		  // Leo el valor de la conversión 4095 y 0
	  		  valueAD=HAL_ADC_GetValue(&hadc1);
 8001a6e:	4880      	ldr	r0, [pc, #512]	; (8001c70 <startTemperatureTask+0x248>)
 8001a70:	f000 fe9d 	bl	80027ae <HAL_ADC_GetValue>
 8001a74:	6238      	str	r0, [r7, #32]
	  		  //printf("valor %d \r\n",valueAD);

	  		  TNTC=BETA/(log((-10000.0*3.3/(valueAD*3.3/4095.9-3.3)-10000.0)/R25)+BETA/T25)-273.18;
 8001a76:	6a38      	ldr	r0, [r7, #32]
 8001a78:	f7fe fd4c 	bl	8000514 <__aeabi_ui2d>
 8001a7c:	a36e      	add	r3, pc, #440	; (adr r3, 8001c38 <startTemperatureTask+0x210>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fdc1 	bl	8000608 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	a36c      	add	r3, pc, #432	; (adr r3, 8001c40 <startTemperatureTask+0x218>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fee2 	bl	800085c <__aeabi_ddiv>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	a365      	add	r3, pc, #404	; (adr r3, 8001c38 <startTemperatureTask+0x210>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fbf7 	bl	8000298 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	a166      	add	r1, pc, #408	; (adr r1, 8001c48 <startTemperatureTask+0x220>)
 8001ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ab4:	f7fe fed2 	bl	800085c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	a363      	add	r3, pc, #396	; (adr r3, 8001c50 <startTemperatureTask+0x228>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fbe7 	bl	8000298 <__aeabi_dsub>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	a35f      	add	r3, pc, #380	; (adr r3, 8001c50 <startTemperatureTask+0x228>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fec0 	bl	800085c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	ec43 2b17 	vmov	d7, r2, r3
 8001ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae8:	eef0 0a67 	vmov.f32	s1, s15
 8001aec:	f009 fd78 	bl	800b5e0 <log>
 8001af0:	ec51 0b10 	vmov	r0, r1, d0
 8001af4:	a358      	add	r3, pc, #352	; (adr r3, 8001c58 <startTemperatureTask+0x230>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fbcf 	bl	800029c <__adddf3>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	a157      	add	r1, pc, #348	; (adr r1, 8001c60 <startTemperatureTask+0x238>)
 8001b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b08:	f7fe fea8 	bl	800085c <__aeabi_ddiv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	a354      	add	r3, pc, #336	; (adr r3, 8001c68 <startTemperatureTask+0x240>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f7fe fbbd 	bl	8000298 <__aeabi_dsub>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7ff f847 	bl	8000bb8 <__aeabi_d2f>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	61fb      	str	r3, [r7, #28]

	  		  temperature_buffer_write(TNTC);
 8001b2e:	ed97 0a07 	vldr	s0, [r7, #28]
 8001b32:	f7ff fcab 	bl	800148c <temperature_buffer_write>

	  		  if(TNTC>32){
 8001b36:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b3a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001c74 <startTemperatureTask+0x24c>
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dd19      	ble.n	8001b7c <startTemperatureTask+0x154>
	  			  for(int i = 0; i<4; i++){
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4c:	e007      	b.n	8001b5e <startTemperatureTask+0x136>
	  				  light_list[i] = 1;
 8001b4e:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <startTemperatureTask+0x250>)
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	2101      	movs	r1, #1
 8001b54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			  for(int i = 0; i<4; i++){
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	ddf4      	ble.n	8001b4e <startTemperatureTask+0x126>
	  			  }
	  			  if(TNTC>34){
 8001b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b68:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001c7c <startTemperatureTask+0x254>
 8001b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	dd5a      	ble.n	8001c2c <startTemperatureTask+0x204>
	  				  buzzer = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e057      	b.n	8001c2c <startTemperatureTask+0x204>
	  			  }
	  		  } else if(TNTC > 29){
 8001b7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b80:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8001b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	dd0e      	ble.n	8001bac <startTemperatureTask+0x184>
	  				light_list[0]=0;
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <startTemperatureTask+0x250>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
	  				light_list[1]=1;
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <startTemperatureTask+0x250>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	605a      	str	r2, [r3, #4]
	  				light_list[2]=1;
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <startTemperatureTask+0x250>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	609a      	str	r2, [r3, #8]
	  				light_list[3]=1;
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <startTemperatureTask+0x250>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	60da      	str	r2, [r3, #12]
	  				buzzer = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8001baa:	e03f      	b.n	8001c2c <startTemperatureTask+0x204>
	  		  } else if(TNTC > 26){
 8001bac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bb0:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dd0e      	ble.n	8001bdc <startTemperatureTask+0x1b4>
	  				light_list[0]=0;
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <startTemperatureTask+0x250>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
	  				light_list[1]=0;
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <startTemperatureTask+0x250>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
	  				light_list[2]=1;
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <startTemperatureTask+0x250>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	609a      	str	r2, [r3, #8]
	  				light_list[3]=1;
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <startTemperatureTask+0x250>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	60da      	str	r2, [r3, #12]
	  				buzzer=0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e027      	b.n	8001c2c <startTemperatureTask+0x204>
	  		  }else if(TNTC > 23){
 8001bdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001be0:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	dd0e      	ble.n	8001c0c <startTemperatureTask+0x1e4>
	  				light_list[0]=0;
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <startTemperatureTask+0x250>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
	  				light_list[1]=0;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <startTemperatureTask+0x250>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
	  				light_list[2]=0;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <startTemperatureTask+0x250>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
	  				light_list[3]=1;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <startTemperatureTask+0x250>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	60da      	str	r2, [r3, #12]
	  				buzzer = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e00f      	b.n	8001c2c <startTemperatureTask+0x204>
	  		  }else{
	  			  for(int i = 0; i<4; i++){
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c10:	e007      	b.n	8001c22 <startTemperatureTask+0x1fa>
	  				  light_list[i]=0;
 8001c12:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <startTemperatureTask+0x250>)
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	2100      	movs	r1, #0
 8001c18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			  for(int i = 0; i<4; i++){
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	3301      	adds	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	ddf4      	ble.n	8001c12 <startTemperatureTask+0x1ea>
	  			  }
	  			  buzzer = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
	  		  }
	  		  buzzer=0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24

	  		  set_lights_and_buzzer(buzzer);
 8001c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c32:	f7ff fbbd 	bl	80013b0 <set_lights_and_buzzer>
  {
 8001c36:	e6fb      	b.n	8001a30 <startTemperatureTask+0x8>
 8001c38:	66666666 	.word	0x66666666
 8001c3c:	400a6666 	.word	0x400a6666
 8001c40:	cccccccd 	.word	0xcccccccd
 8001c44:	40afffcc 	.word	0x40afffcc
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	c0e01d00 	.word	0xc0e01d00
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40c38800 	.word	0x40c38800
 8001c58:	cde627c2 	.word	0xcde627c2
 8001c5c:	402a294c 	.word	0x402a294c
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40ae7800 	.word	0x40ae7800
 8001c68:	47ae147b 	.word	0x47ae147b
 8001c6c:	407112e1 	.word	0x407112e1
 8001c70:	2000bce0 	.word	0x2000bce0
 8001c74:	42000000 	.word	0x42000000
 8001c78:	20000204 	.word	0x20000204
 8001c7c:	42080000 	.word	0x42080000

08001c80 <startNetworkComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNetworkComTask */
void startNetworkComTask(void *argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b092      	sub	sp, #72	; 0x48
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNetworkComTask */
	char * temp_time;
	char * temp_string;
	char   temp_source_alarm[strlen("SensorSEU21_XXX")];
 8001c88:	230e      	movs	r3, #14
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	3307      	adds	r3, #7
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	ebad 0d03 	sub.w	sp, sp, r3
 8001c98:	ab02      	add	r3, sp, #8
 8001c9a:	3300      	adds	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int    temp_light_list[4];
	int    temp_alarm;
	printf("BOOTING ESP8266_Boot\r\n");
 8001c9e:	4861      	ldr	r0, [pc, #388]	; (8001e24 <startNetworkComTask+0x1a4>)
 8001ca0:	f007 fbf0 	bl	8009484 <puts>
	ESP8266_Boot();
 8001ca4:	f7ff fd38 	bl	8001718 <ESP8266_Boot>
	printf("DONE BOOTING\r\n");
 8001ca8:	485f      	ldr	r0, [pc, #380]	; (8001e28 <startNetworkComTask+0x1a8>)
 8001caa:	f007 fbeb 	bl	8009484 <puts>

  /* Infinite loop */
  for(;;)
  {
	  mode mode = ONLINE; //TODO create mutex getMode method
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  if(mode == LOCAL) {
 8001cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d13d      	bne.n	8001d38 <startNetworkComTask+0xb8>
		  * 1. Get time from worldclockapi.com
		  * 2. Write to global buffer
		  * 3. Goto sleep for x seconds
		  * */

		  ESP8266_get_time();
 8001cbc:	f7ff fcb8 	bl	8001630 <ESP8266_get_time>

		  temp_time = strstr(buff_response1,"currentDateTime");
 8001cc0:	495a      	ldr	r1, [pc, #360]	; (8001e2c <startNetworkComTask+0x1ac>)
 8001cc2:	485b      	ldr	r0, [pc, #364]	; (8001e30 <startNetworkComTask+0x1b0>)
 8001cc4:	f007 fc7a 	bl	80095bc <strstr>
 8001cc8:	6278      	str	r0, [r7, #36]	; 0x24
		  temp_time = temp_time+strlen("currentDateTime:yyyy-mm-dd:")+2; // +2 to skip ""
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	331d      	adds	r3, #29
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
			int q = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
			do{
			}while(temp_time[q++]!='+'); //iterate over the timestamp, already know it ends with +
 8001cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cda:	461a      	mov	r2, r3
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b2b      	cmp	r3, #43	; 0x2b
 8001ce4:	d1f6      	bne.n	8001cd4 <startNetworkComTask+0x54>
			q--;
 8001ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(q; q < strlen(temp_time);q++)temp_time[q]=NULL; //Remove the rest of the response
 8001cec:	e007      	b.n	8001cfe <startNetworkComTask+0x7e>
 8001cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d00:	f7fe fa6e 	bl	80001e0 <strlen>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f0      	bhi.n	8001cee <startNetworkComTask+0x6e>

			if(temp_time[0] != 0){
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <startNetworkComTask+0xaa>
				time_buffer_write(temp_time, strlen(temp_time)); // Write current time to global time buffer
 8001d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d16:	f7fe fa63 	bl	80001e0 <strlen>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d20:	f7ff fb7e 	bl	8001420 <time_buffer_write>
				temp_time[0] = 0;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
			}
			fflush(NULL);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f006 fcca 	bl	80086c4 <fflush>
			osDelay(2000);
 8001d30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d34:	f003 fb56 	bl	80053e4 <osDelay>
	  }




	if(mode == ONLINE){
 8001d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d16c      	bne.n	8001e1a <startNetworkComTask+0x19a>
		OrionContextBroker_query(); // query LED and BUZZER values
 8001d40:	f7ff fde6 	bl	8001910 <OrionContextBroker_query>

		// LEDS
		temp_string = strstr(buff_response1,"LEDS");
 8001d44:	493b      	ldr	r1, [pc, #236]	; (8001e34 <startNetworkComTask+0x1b4>)
 8001d46:	483a      	ldr	r0, [pc, #232]	; (8001e30 <startNetworkComTask+0x1b0>)
 8001d48:	f007 fc38 	bl	80095bc <strstr>
 8001d4c:	6238      	str	r0, [r7, #32]
		temp_string = strstr(buff_response1,"value");
 8001d4e:	493a      	ldr	r1, [pc, #232]	; (8001e38 <startNetworkComTask+0x1b8>)
 8001d50:	4837      	ldr	r0, [pc, #220]	; (8001e30 <startNetworkComTask+0x1b0>)
 8001d52:	f007 fc33 	bl	80095bc <strstr>
 8001d56:	6238      	str	r0, [r7, #32]
		temp_string += strlen("value\" : \"");
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	330a      	adds	r3, #10
 8001d5c:	623b      	str	r3, [r7, #32]
		for (int i = 0; i<4; i++){
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d62:	e00f      	b.n	8001d84 <startNetworkComTask+0x104>
			temp_light_list[i] = (temp_string[i])-'0';
 8001d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	4413      	add	r3, r2
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d78:	440b      	add	r3, r1
 8001d7a:	f843 2c34 	str.w	r2, [r3, #-52]
		for (int i = 0; i<4; i++){
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d80:	3301      	adds	r3, #1
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	ddec      	ble.n	8001d64 <startNetworkComTask+0xe4>
		}
		printf("LEDS: %d%d%d%d\r\n", temp_light_list[0],temp_light_list[1],temp_light_list[2],temp_light_list[3]);
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4603      	mov	r3, r0
 8001d96:	4829      	ldr	r0, [pc, #164]	; (8001e3c <startNetworkComTask+0x1bc>)
 8001d98:	f007 faee 	bl	8009378 <iprintf>


		// Alarm/buzzer
		temp_string = strstr(buff_response1,"alarm");
 8001d9c:	4928      	ldr	r1, [pc, #160]	; (8001e40 <startNetworkComTask+0x1c0>)
 8001d9e:	4824      	ldr	r0, [pc, #144]	; (8001e30 <startNetworkComTask+0x1b0>)
 8001da0:	f007 fc0c 	bl	80095bc <strstr>
 8001da4:	6238      	str	r0, [r7, #32]
		temp_string = strstr(temp_string,"value");
 8001da6:	4924      	ldr	r1, [pc, #144]	; (8001e38 <startNetworkComTask+0x1b8>)
 8001da8:	6a38      	ldr	r0, [r7, #32]
 8001daa:	f007 fc07 	bl	80095bc <strstr>
 8001dae:	6238      	str	r0, [r7, #32]
		temp_string += strlen("value\" : \"");
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	330a      	adds	r3, #10
 8001db4:	623b      	str	r3, [r7, #32]
		temp_alarm = (temp_string[0])-'0';
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3b30      	subs	r3, #48	; 0x30
 8001dbc:	61fb      	str	r3, [r7, #28]
		printf("Alarm: %d\r\n", temp_alarm);
 8001dbe:	69f9      	ldr	r1, [r7, #28]
 8001dc0:	4820      	ldr	r0, [pc, #128]	; (8001e44 <startNetworkComTask+0x1c4>)
 8001dc2:	f007 fad9 	bl	8009378 <iprintf>


		// If alarm, check reason
		if(temp_alarm){
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d026      	beq.n	8001e1a <startNetworkComTask+0x19a>
			temp_string = strstr(buff_response1,"source_alarm");
 8001dcc:	491e      	ldr	r1, [pc, #120]	; (8001e48 <startNetworkComTask+0x1c8>)
 8001dce:	4818      	ldr	r0, [pc, #96]	; (8001e30 <startNetworkComTask+0x1b0>)
 8001dd0:	f007 fbf4 	bl	80095bc <strstr>
 8001dd4:	6238      	str	r0, [r7, #32]
			temp_string = strstr(temp_string,"value");
 8001dd6:	4918      	ldr	r1, [pc, #96]	; (8001e38 <startNetworkComTask+0x1b8>)
 8001dd8:	6a38      	ldr	r0, [r7, #32]
 8001dda:	f007 fbef 	bl	80095bc <strstr>
 8001dde:	6238      	str	r0, [r7, #32]
			temp_string += strlen("value\" : \"");
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	330a      	adds	r3, #10
 8001de4:	623b      	str	r3, [r7, #32]
			int i=0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
			while(temp_string[i]!='"'){
 8001dea:	e00b      	b.n	8001e04 <startNetworkComTask+0x184>
				temp_source_alarm[i]=temp_string[i];
 8001dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dee:	6a3a      	ldr	r2, [r7, #32]
 8001df0:	4413      	add	r3, r2
 8001df2:	7819      	ldrb	r1, [r3, #0]
 8001df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	4413      	add	r3, r2
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	701a      	strb	r2, [r3, #0]
				i++;
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e00:	3301      	adds	r3, #1
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
			while(temp_string[i]!='"'){
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	6a3a      	ldr	r2, [r7, #32]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b22      	cmp	r3, #34	; 0x22
 8001e0e:	d1ed      	bne.n	8001dec <startNetworkComTask+0x16c>
			int q=0;
			do{
				temp_source_alarm[q]=temp_string[q];

			}while(temp_string[q++]!='}');*/
			printf("Source Alarm: %s\r\n", temp_source_alarm);
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	4619      	mov	r1, r3
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <startNetworkComTask+0x1cc>)
 8001e16:	f007 faaf 	bl	8009378 <iprintf>
		//OrionContextBroker_update();	// SEND TEMPERATURE



	  }
	  osDelay(2000);
 8001e1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e1e:	f003 fae1 	bl	80053e4 <osDelay>
  {
 8001e22:	e744      	b.n	8001cae <startNetworkComTask+0x2e>
 8001e24:	0800bd78 	.word	0x0800bd78
 8001e28:	0800bd90 	.word	0x0800bd90
 8001e2c:	0800bda0 	.word	0x0800bda0
 8001e30:	2000b4e0 	.word	0x2000b4e0
 8001e34:	0800bdb0 	.word	0x0800bdb0
 8001e38:	0800bdb8 	.word	0x0800bdb8
 8001e3c:	0800bdc0 	.word	0x0800bdc0
 8001e40:	0800bdd4 	.word	0x0800bdd4
 8001e44:	0800bddc 	.word	0x0800bddc
 8001e48:	0800bde8 	.word	0x0800bde8
 8001e4c:	0800bdf8 	.word	0x0800bdf8

08001e50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e62:	f000 fb01 	bl	8002468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>
	...

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_MspInit+0x54>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_MspInit+0x54>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_MspInit+0x54>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_MspInit+0x54>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_MspInit+0x54>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_MspInit+0x54>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	f06f 0001 	mvn.w	r0, #1
 8001ec6:	f000 ff65 	bl	8002d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_ADC_MspInit+0x7c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d127      	bne.n	8001f4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_ADC_MspInit+0x80>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_ADC_MspInit+0x80>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_ADC_MspInit+0x80>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_ADC_MspInit+0x80>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <HAL_ADC_MspInit+0x80>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_ADC_MspInit+0x80>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TEMPERATURE_Pin|POT_Pin;
 8001f32:	2303      	movs	r3, #3
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <HAL_ADC_MspInit+0x84>)
 8001f46:	f001 fb2f 	bl	80035a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	; 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40012000 	.word	0x40012000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	; 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	; (80020a4 <HAL_UART_MspInit+0x144>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d15b      	bne.n	800203a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a40      	ldr	r2, [pc, #256]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4835      	ldr	r0, [pc, #212]	; (80020ac <HAL_UART_MspInit+0x14c>)
 8001fd8:	f001 fae6 	bl	80035a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8001fde:	4a35      	ldr	r2, [pc, #212]	; (80020b4 <HAL_UART_MspInit+0x154>)
 8001fe0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8001fe4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8001ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_UART_MspInit+0x150>)
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8002012:	2200      	movs	r2, #0
 8002014:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800201c:	4824      	ldr	r0, [pc, #144]	; (80020b0 <HAL_UART_MspInit+0x150>)
 800201e:	f000 fee3 	bl	8002de8 <HAL_DMA_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002028:	f7ff ff24 	bl	8001e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_UART_MspInit+0x150>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002038:	e030      	b.n	800209c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_UART_MspInit+0x158>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d12b      	bne.n	800209c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_UART_MspInit+0x148>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_UART_MspInit+0x148>)
 800204e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002052:	6413      	str	r3, [r2, #64]	; 0x40
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <HAL_UART_MspInit+0x148>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6313      	str	r3, [r2, #48]	; 0x30
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_UART_MspInit+0x148>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800207c:	230c      	movs	r3, #12
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208c:	2307      	movs	r3, #7
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_UART_MspInit+0x14c>)
 8002098:	f001 fa86 	bl	80035a8 <HAL_GPIO_Init>
}
 800209c:	bf00      	nop
 800209e:	3730      	adds	r7, #48	; 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	2000bd28 	.word	0x2000bd28
 80020b4:	40026440 	.word	0x40026440
 80020b8:	40004400 	.word	0x40004400

080020bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	2019      	movs	r0, #25
 80020d2:	f000 fe5f 	bl	8002d94 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020d6:	2019      	movs	r0, #25
 80020d8:	f000 fe78 	bl	8002dcc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_InitTick+0xa0>)
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_InitTick+0xa0>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6453      	str	r3, [r2, #68]	; 0x44
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_InitTick+0xa0>)
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020f8:	f107 0210 	add.w	r2, r7, #16
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f002 f89e 	bl	8004244 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002108:	f002 f888 	bl	800421c <HAL_RCC_GetPCLK2Freq>
 800210c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_InitTick+0xa4>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9b      	lsrs	r3, r3, #18
 8002118:	3b01      	subs	r3, #1
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_InitTick+0xa8>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_InitTick+0xac>)
 8002120:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_InitTick+0xa8>)
 8002124:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002128:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_InitTick+0xa8>)
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_InitTick+0xa8>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_InitTick+0xa8>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800213c:	4809      	ldr	r0, [pc, #36]	; (8002164 <HAL_InitTick+0xa8>)
 800213e:	f002 f8b3 	bl	80042a8 <HAL_TIM_Base_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002148:	4806      	ldr	r0, [pc, #24]	; (8002164 <HAL_InitTick+0xa8>)
 800214a:	f002 f907 	bl	800435c <HAL_TIM_Base_Start_IT>
 800214e:	4603      	mov	r3, r0
 8002150:	e000      	b.n	8002154 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	431bde83 	.word	0x431bde83
 8002164:	2000c288 	.word	0x2000c288
 8002168:	40010000 	.word	0x40010000

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	while( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) ){}
 800219c:	bf00      	nop
 800219e:	2110      	movs	r1, #16
 80021a0:	4806      	ldr	r0, [pc, #24]	; (80021bc <EXTI4_IRQHandler+0x24>)
 80021a2:	f001 fb85 	bl	80038b0 <HAL_GPIO_ReadPin>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f8      	bne.n	800219e <EXTI4_IRQHandler+0x6>

	printf("INTERRUPT BTN_1\r\n");
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <EXTI4_IRQHandler+0x28>)
 80021ae:	f007 f969 	bl	8009484 <puts>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021b2:	2010      	movs	r0, #16
 80021b4:	f001 fbae 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40020400 	.word	0x40020400
 80021c0:	0800be0c 	.word	0x0800be0c

080021c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)){}
 80021c8:	bf00      	nop
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	4806      	ldr	r0, [pc, #24]	; (80021e8 <EXTI9_5_IRQHandler+0x24>)
 80021ce:	f001 fb6f 	bl	80038b0 <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f8      	bne.n	80021ca <EXTI9_5_IRQHandler+0x6>
	printf("INTERRUPT BTN_0\r\n");
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <EXTI9_5_IRQHandler+0x28>)
 80021da:	f007 f953 	bl	8009484 <puts>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021de:	2080      	movs	r0, #128	; 0x80
 80021e0:	f001 fb98 	bl	8003914 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020800 	.word	0x40020800
 80021ec:	0800be20 	.word	0x0800be20

080021f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021f6:	f002 f913 	bl	8004420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000c288 	.word	0x2000c288

08002204 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA2_Stream2_IRQHandler+0x10>)
 800220a:	f000 ff63 	bl	80030d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000bd28 	.word	0x2000bd28

08002218 <_getpid>:
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
 800221c:	2301      	movs	r3, #1
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_kill>:
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	f006 f97f 	bl	8008534 <__errno>
 8002236:	4603      	mov	r3, r0
 8002238:	2216      	movs	r2, #22
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_exit>:
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffe7 	bl	8002228 <_kill>
 800225a:	e7fe      	b.n	800225a <_exit+0x12>

0800225c <_read>:
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e00a      	b.n	8002284 <_read+0x28>
 800226e:	f3af 8000 	nop.w
 8002272:	4601      	mov	r1, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	b2ca      	uxtb	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf0      	blt.n	800226e <_read+0x12>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_close>:
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <_fstat>:
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	2300      	movs	r3, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_isatty>:
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	2301      	movs	r3, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_lseek>:
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	2300      	movs	r3, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <_sbrk>:
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <_sbrk+0x5c>)
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <_sbrk+0x60>)
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_sbrk+0x22>
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_sbrk+0x64>)
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <_sbrk+0x68>)
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	429a      	cmp	r2, r3
 800232e:	d207      	bcs.n	8002340 <_sbrk+0x40>
 8002330:	f006 f900 	bl	8008534 <__errno>
 8002334:	4603      	mov	r3, r0
 8002336:	220c      	movs	r2, #12
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233e:	e009      	b.n	8002354 <_sbrk+0x54>
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <_sbrk+0x64>)
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20020000 	.word	0x20020000
 8002360:	00000400 	.word	0x00000400
 8002364:	20000214 	.word	0x20000214
 8002368:	2000c328 	.word	0x2000c328

0800236c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <SystemInit+0x20>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <SystemInit+0x20>)
 8002378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <_write>:

return fpriority;
}

int _write(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e00b      	b.n	80023ba <_write+0x2a>
	{
	   // ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	1c4b      	adds	r3, r1, #1
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ac:	2201      	movs	r2, #1
 80023ae:	4807      	ldr	r0, [pc, #28]	; (80023cc <_write+0x3c>)
 80023b0:	f002 fa47 	bl	8004842 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbef      	blt.n	80023a2 <_write+0x12>
	}

	return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2000be44 	.word	0x2000be44

080023d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d6:	490e      	ldr	r1, [pc, #56]	; (8002410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ec:	4c0b      	ldr	r4, [pc, #44]	; (800241c <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023fa:	f7ff ffb7 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fe:	f006 fa69 	bl	80088d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002402:	f7fe fda5 	bl	8000f50 <main>
  bx  lr    
 8002406:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002414:	0800c2dc 	.word	0x0800c2dc
  ldr r2, =_sbss
 8002418:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800241c:	2000c324 	.word	0x2000c324

08002420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC_IRQHandler>
	...

08002424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <HAL_Init+0x40>)
 800242e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_Init+0x40>)
 800243a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_Init+0x40>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 fc96 	bl	8002d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff fe32 	bl	80020bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002458:	f7ff fd12 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008
 800248c:	2000c2d0 	.word	0x2000c2d0

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	2000c2d0 	.word	0x2000c2d0

080024a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e033      	b.n	8002526 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fd06 	bl	8001ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ee:	f023 0302 	bic.w	r3, r3, #2
 80024f2:	f043 0202 	orr.w	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa96 	bl	8002a2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
 8002516:	e001      	b.n	800251c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADC_Start+0x1a>
 8002546:	2302      	movs	r3, #2
 8002548:	e097      	b.n	800267a <HAL_ADC_Start+0x14a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d018      	beq.n	8002592 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002570:	4b45      	ldr	r3, [pc, #276]	; (8002688 <HAL_ADC_Start+0x158>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a45      	ldr	r2, [pc, #276]	; (800268c <HAL_ADC_Start+0x15c>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9a      	lsrs	r2, r3, #18
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002584:	e002      	b.n	800258c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d15f      	bne.n	8002660 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	d106      	bne.n	80025ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f023 0206 	bic.w	r2, r3, #6
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_ADC_Start+0x160>)
 80025fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002608:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d129      	bne.n	8002678 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e020      	b.n	8002678 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_ADC_Start+0x164>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d11b      	bne.n	8002678 <HAL_ADC_Start+0x148>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d114      	bne.n	8002678 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	e00b      	b.n	8002678 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000
 800268c:	431bde83 	.word	0x431bde83
 8002690:	40012300 	.word	0x40012300
 8002694:	40012000 	.word	0x40012000

08002698 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d113      	bne.n	80026de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d10b      	bne.n	80026de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e063      	b.n	80027a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026de:	f7ff fed7 	bl	8002490 <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026e4:	e021      	b.n	800272a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ec:	d01d      	beq.n	800272a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_ADC_PollForConversion+0x6c>
 80026f4:	f7ff fecc 	bl	8002490 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d212      	bcs.n	800272a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d00b      	beq.n	800272a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e03d      	b.n	80027a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d1d6      	bne.n	80026e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0212 	mvn.w	r2, #18
 8002740:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d123      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11f      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e113      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x244>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d925      	bls.n	8002840 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68d9      	ldr	r1, [r3, #12]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	2207      	movs	r2, #7
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43da      	mvns	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	4603      	mov	r3, r0
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4403      	add	r3, r0
 8002832:	3b1e      	subs	r3, #30
 8002834:	409a      	lsls	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	e022      	b.n	8002886 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	2207      	movs	r2, #7
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6919      	ldr	r1, [r3, #16]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	4603      	mov	r3, r0
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4403      	add	r3, r0
 800287c:	409a      	lsls	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d824      	bhi.n	80028d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	3b05      	subs	r3, #5
 80028a0:	221f      	movs	r2, #31
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	400a      	ands	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	3b05      	subs	r3, #5
 80028ca:	fa00 f203 	lsl.w	r2, r0, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
 80028d6:	e04c      	b.n	8002972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b0c      	cmp	r3, #12
 80028de:	d824      	bhi.n	800292a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b23      	subs	r3, #35	; 0x23
 80028f2:	221f      	movs	r2, #31
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43da      	mvns	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	400a      	ands	r2, r1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b23      	subs	r3, #35	; 0x23
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
 8002928:	e023      	b.n	8002972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	3b41      	subs	r3, #65	; 0x41
 800293c:	221f      	movs	r2, #31
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	400a      	ands	r2, r1
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	3b41      	subs	r3, #65	; 0x41
 8002966:	fa00 f203 	lsl.w	r2, r0, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_ADC_ConfigChannel+0x250>)
 8002974:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <HAL_ADC_ConfigChannel+0x254>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10f      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b12      	cmp	r3, #18
 8002986:	d10b      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_ADC_ConfigChannel+0x254>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12b      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x23a>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_ADC_ConfigChannel+0x258>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x1f4>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b11      	cmp	r3, #17
 80029ba:	d122      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <HAL_ADC_ConfigChannel+0x258>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_ADC_ConfigChannel+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_ADC_ConfigChannel+0x260>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	0c9a      	lsrs	r2, r3, #18
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	40012000 	.word	0x40012000
 8002a20:	10000012 	.word	0x10000012
 8002a24:	20000000 	.word	0x20000000
 8002a28:	431bde83 	.word	0x431bde83

08002a2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a34:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <ADC_Init+0x1f0>)
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <ADC_Init+0x1f4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	e00f      	b.n	8002b2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0202 	bic.w	r2, r2, #2
 8002b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7e1b      	ldrb	r3, [r3, #24]
 8002b44:	005a      	lsls	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01b      	beq.n	8002b90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	3b01      	subs	r3, #1
 8002b84:	035a      	lsls	r2, r3, #13
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	e007      	b.n	8002ba0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	051a      	lsls	r2, r3, #20
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002be2:	025a      	lsls	r2, r3, #9
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	029a      	lsls	r2, r3, #10
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40012300 	.word	0x40012300
 8002c20:	0f000001 	.word	0x0f000001

08002c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <__NVIC_GetPriorityGrouping+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 0307 	and.w	r3, r3, #7
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4907      	ldr	r1, [pc, #28]	; (8002cc0 <__NVIC_EnableIRQ+0x38>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ff4c 	bl	8002c24 <__NVIC_SetPriorityGrouping>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da6:	f7ff ff61 	bl	8002c6c <__NVIC_GetPriorityGrouping>
 8002daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	6978      	ldr	r0, [r7, #20]
 8002db2:	f7ff ffb1 	bl	8002d18 <NVIC_EncodePriority>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff80 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff54 	bl	8002c88 <__NVIC_EnableIRQ>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff fb4c 	bl	8002490 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e099      	b.n	8002f38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e24:	e00f      	b.n	8002e46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e26:	f7ff fb33 	bl	8002490 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d908      	bls.n	8002e46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e078      	b.n	8002f38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e8      	bne.n	8002e26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <HAL_DMA_Init+0x158>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0307 	bic.w	r3, r3, #7
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d117      	bne.n	8002f0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fadf 	bl	80034b0 <DMA_CheckFifoParam>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2240      	movs	r2, #64	; 0x40
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f06:	2301      	movs	r3, #1
 8002f08:	e016      	b.n	8002f38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fa96 	bl	8003444 <DMA_CalcBaseAndBitshift>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	223f      	movs	r2, #63	; 0x3f
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	f010803f 	.word	0xf010803f

08002f44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_DMA_Start_IT+0x26>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e040      	b.n	8002fec <HAL_DMA_Start_IT+0xa8>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d12f      	bne.n	8002fde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa28 	bl	80033e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	223f      	movs	r2, #63	; 0x3f
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0216 	orr.w	r2, r2, #22
 8002fb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0208 	orr.w	r2, r2, #8
 8002fca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e005      	b.n	8002fea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003002:	f7ff fa45 	bl	8002490 <HAL_GetTick>
 8003006:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d008      	beq.n	8003026 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e052      	b.n	80030cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0216 	bic.w	r2, r2, #22
 8003034:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003044:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_DMA_Abort+0x62>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0208 	bic.w	r2, r2, #8
 8003064:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003076:	e013      	b.n	80030a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003078:	f7ff fa0a 	bl	8002490 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b05      	cmp	r3, #5
 8003084:	d90c      	bls.n	80030a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e015      	b.n	80030cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e4      	bne.n	8003078 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	223f      	movs	r2, #63	; 0x3f
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e0:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_DMA_IRQHandler+0x258>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a92      	ldr	r2, [pc, #584]	; (8003330 <HAL_DMA_IRQHandler+0x25c>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	2208      	movs	r2, #8
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01a      	beq.n	8003140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	2208      	movs	r2, #8
 800312e:	409a      	lsls	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d012      	beq.n	8003176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	2201      	movs	r2, #1
 8003164:	409a      	lsls	r2, r3
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	2204      	movs	r2, #4
 800317c:	409a      	lsls	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	2204      	movs	r2, #4
 800319a:	409a      	lsls	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f043 0204 	orr.w	r2, r3, #4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	2210      	movs	r2, #16
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d043      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d03c      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	2210      	movs	r2, #16
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d024      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
 8003202:	e01f      	b.n	8003244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01b      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e016      	b.n	8003244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0208 	bic.w	r2, r2, #8
 8003232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2220      	movs	r2, #32
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 808e 	beq.w	8003372 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8086 	beq.w	8003372 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2220      	movs	r2, #32
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b05      	cmp	r3, #5
 800327c:	d136      	bne.n	80032ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0216 	bic.w	r2, r2, #22
 800328c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_DMA_IRQHandler+0x1da>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0208 	bic.w	r2, r2, #8
 80032bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d07d      	beq.n	80033de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
        }
        return;
 80032ea:	e078      	b.n	80033de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01c      	beq.n	8003334 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	2b00      	cmp	r3, #0
 800330e:	d030      	beq.n	8003372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
 8003318:	e02b      	b.n	8003372 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d027      	beq.n	8003372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
 800332a:	e022      	b.n	8003372 <HAL_DMA_IRQHandler+0x29e>
 800332c:	20000000 	.word	0x20000000
 8003330:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0210 	bic.w	r2, r2, #16
 8003350:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	2b00      	cmp	r3, #0
 8003378:	d032      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d022      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2205      	movs	r2, #5
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3301      	adds	r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d307      	bcc.n	80033ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f2      	bne.n	800339e <HAL_DMA_IRQHandler+0x2ca>
 80033b8:	e000      	b.n	80033bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80033ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
 80033dc:	e000      	b.n	80033e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80033de:	bf00      	nop
    }
  }
}
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop

080033e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d108      	bne.n	8003428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003426:	e007      	b.n	8003438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3b10      	subs	r3, #16
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <DMA_CalcBaseAndBitshift+0x68>)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d909      	bls.n	8003486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	659a      	str	r2, [r3, #88]	; 0x58
 8003484:	e007      	b.n	8003496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	aaaaaaab 	.word	0xaaaaaaab
 80034ac:	0800bedc 	.word	0x0800bedc

080034b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11f      	bne.n	800350a <DMA_CheckFifoParam+0x5a>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d856      	bhi.n	800357e <DMA_CheckFifoParam+0xce>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <DMA_CheckFifoParam+0x28>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034fb 	.word	0x080034fb
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	0800357f 	.word	0x0800357f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d046      	beq.n	8003582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f8:	e043      	b.n	8003582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003502:	d140      	bne.n	8003586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003508:	e03d      	b.n	8003586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003512:	d121      	bne.n	8003558 <DMA_CheckFifoParam+0xa8>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d837      	bhi.n	800358a <DMA_CheckFifoParam+0xda>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <DMA_CheckFifoParam+0x70>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003531 	.word	0x08003531
 8003524:	08003537 	.word	0x08003537
 8003528:	08003531 	.word	0x08003531
 800352c:	08003549 	.word	0x08003549
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e030      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d025      	beq.n	800358e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003546:	e022      	b.n	800358e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003550:	d11f      	bne.n	8003592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003556:	e01c      	b.n	8003592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d903      	bls.n	8003566 <DMA_CheckFifoParam+0xb6>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d003      	beq.n	800356c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003564:	e018      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
      break;
 800356a:	e015      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e00b      	b.n	8003596 <DMA_CheckFifoParam+0xe6>
      break;
 800357e:	bf00      	nop
 8003580:	e00a      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
 8003584:	e008      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e006      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;   
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
    }
  } 
  
  return status; 
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop

080035a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e159      	b.n	8003878 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c4:	2201      	movs	r2, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	f040 8148 	bne.w	8003872 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d005      	beq.n	80035fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d130      	bne.n	800365c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003630:	2201      	movs	r2, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0201 	and.w	r2, r3, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b03      	cmp	r3, #3
 8003666:	d017      	beq.n	8003698 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d123      	bne.n	80036ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a2 	beq.w	8003872 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b57      	ldr	r3, [pc, #348]	; (8003890 <HAL_GPIO_Init+0x2e8>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	4a56      	ldr	r2, [pc, #344]	; (8003890 <HAL_GPIO_Init+0x2e8>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	6453      	str	r3, [r2, #68]	; 0x44
 800373e:	4b54      	ldr	r3, [pc, #336]	; (8003890 <HAL_GPIO_Init+0x2e8>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374a:	4a52      	ldr	r2, [pc, #328]	; (8003894 <HAL_GPIO_Init+0x2ec>)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a49      	ldr	r2, [pc, #292]	; (8003898 <HAL_GPIO_Init+0x2f0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d019      	beq.n	80037aa <HAL_GPIO_Init+0x202>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a48      	ldr	r2, [pc, #288]	; (800389c <HAL_GPIO_Init+0x2f4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_GPIO_Init+0x1fe>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a47      	ldr	r2, [pc, #284]	; (80038a0 <HAL_GPIO_Init+0x2f8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00d      	beq.n	80037a2 <HAL_GPIO_Init+0x1fa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a46      	ldr	r2, [pc, #280]	; (80038a4 <HAL_GPIO_Init+0x2fc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <HAL_GPIO_Init+0x1f6>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a45      	ldr	r2, [pc, #276]	; (80038a8 <HAL_GPIO_Init+0x300>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_GPIO_Init+0x1f2>
 8003796:	2304      	movs	r3, #4
 8003798:	e008      	b.n	80037ac <HAL_GPIO_Init+0x204>
 800379a:	2307      	movs	r3, #7
 800379c:	e006      	b.n	80037ac <HAL_GPIO_Init+0x204>
 800379e:	2303      	movs	r3, #3
 80037a0:	e004      	b.n	80037ac <HAL_GPIO_Init+0x204>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e002      	b.n	80037ac <HAL_GPIO_Init+0x204>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_GPIO_Init+0x204>
 80037aa:	2300      	movs	r3, #0
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f002 0203 	and.w	r2, r2, #3
 80037b2:	0092      	lsls	r2, r2, #2
 80037b4:	4093      	lsls	r3, r2
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037bc:	4935      	ldr	r1, [pc, #212]	; (8003894 <HAL_GPIO_Init+0x2ec>)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	3302      	adds	r3, #2
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ca:	4b38      	ldr	r3, [pc, #224]	; (80038ac <HAL_GPIO_Init+0x304>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <HAL_GPIO_Init+0x304>)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_GPIO_Init+0x304>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003818:	4a24      	ldr	r2, [pc, #144]	; (80038ac <HAL_GPIO_Init+0x304>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_GPIO_Init+0x304>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003842:	4a1a      	ldr	r2, [pc, #104]	; (80038ac <HAL_GPIO_Init+0x304>)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_GPIO_Init+0x304>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800386c:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <HAL_GPIO_Init+0x304>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3301      	adds	r3, #1
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b0f      	cmp	r3, #15
 800387c:	f67f aea2 	bls.w	80035c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	40013800 	.word	0x40013800
 8003898:	40020000 	.word	0x40020000
 800389c:	40020400 	.word	0x40020400
 80038a0:	40020800 	.word	0x40020800
 80038a4:	40020c00 	.word	0x40020c00
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40013c00 	.word	0x40013c00

080038b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	887b      	ldrh	r3, [r7, #2]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	e001      	b.n	80038d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
 80038ec:	4613      	mov	r3, r2
 80038ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038f0:	787b      	ldrb	r3, [r7, #1]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038fc:	e003      	b.n	8003906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038fe:	887b      	ldrh	r3, [r7, #2]
 8003900:	041a      	lsls	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800392a:	4a05      	ldr	r2, [pc, #20]	; (8003940 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f806 	bl	8003944 <HAL_GPIO_EXTI_Callback>
  }
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40013c00 	.word	0x40013c00

08003944 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e264      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d075      	beq.n	8003a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397a:	4ba3      	ldr	r3, [pc, #652]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d00c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003986:	4ba0      	ldr	r3, [pc, #640]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398e:	2b08      	cmp	r3, #8
 8003990:	d112      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b9d      	ldr	r3, [pc, #628]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399e:	d10b      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	4b99      	ldr	r3, [pc, #612]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05b      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d157      	bne.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e23f      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x74>
 80039c2:	4b91      	ldr	r3, [pc, #580]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a90      	ldr	r2, [pc, #576]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x98>
 80039da:	4b8b      	ldr	r3, [pc, #556]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a8a      	ldr	r2, [pc, #552]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b88      	ldr	r3, [pc, #544]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a87      	ldr	r2, [pc, #540]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039f4:	4b84      	ldr	r3, [pc, #528]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a83      	ldr	r2, [pc, #524]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a80      	ldr	r2, [pc, #512]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe fd3c 	bl	8002490 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fd38 	bl	8002490 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e204      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b76      	ldr	r3, [pc, #472]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xc0>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fd28 	bl	8002490 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe fd24 	bl	8002490 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1f0      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0xe8>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a72:	4b65      	ldr	r3, [pc, #404]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7e:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	4b5c      	ldr	r3, [pc, #368]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e1c4      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4952      	ldr	r1, [pc, #328]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003acc:	4b4f      	ldr	r3, [pc, #316]	; (8003c0c <HAL_RCC_OscConfig+0x2b0>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fcdd 	bl	8002490 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe fcd9 	bl	8002490 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1a5      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4940      	ldr	r1, [pc, #256]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
 8003b0c:	e015      	b.n	8003b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0e:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCC_OscConfig+0x2b0>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe fcbc 	bl	8002490 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fe fcb8 	bl	8002490 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e184      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d030      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <HAL_RCC_OscConfig+0x2b4>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fe fc9c 	bl	8002490 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fc98 	bl	8002490 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e164      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x200>
 8003b7a:	e015      	b.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x2b4>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fe fc85 	bl	8002490 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fe fc81 	bl	8002490 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e14d      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80a0 	beq.w	8003cf6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_OscConfig+0x2b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d121      	bne.n	8003c36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_OscConfig+0x2b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <HAL_RCC_OscConfig+0x2b8>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fc47 	bl	8002490 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e011      	b.n	8003c2a <HAL_RCC_OscConfig+0x2ce>
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	42470000 	.word	0x42470000
 8003c10:	42470e80 	.word	0x42470e80
 8003c14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7fe fc3a 	bl	8002490 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e106      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	4b85      	ldr	r3, [pc, #532]	; (8003e40 <HAL_RCC_OscConfig+0x4e4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2f0>
 8003c3e:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a80      	ldr	r2, [pc, #512]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4a:	e01c      	b.n	8003c86 <HAL_RCC_OscConfig+0x32a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	d10c      	bne.n	8003c6e <HAL_RCC_OscConfig+0x312>
 8003c54:	4b7b      	ldr	r3, [pc, #492]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a7a      	ldr	r2, [pc, #488]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c60:	4b78      	ldr	r3, [pc, #480]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	e00b      	b.n	8003c86 <HAL_RCC_OscConfig+0x32a>
 8003c6e:	4b75      	ldr	r3, [pc, #468]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a74      	ldr	r2, [pc, #464]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b72      	ldr	r3, [pc, #456]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a71      	ldr	r2, [pc, #452]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d015      	beq.n	8003cba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fbff 	bl	8002490 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe fbfb 	bl	8002490 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0c5      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ee      	beq.n	8003c96 <HAL_RCC_OscConfig+0x33a>
 8003cb8:	e014      	b.n	8003ce4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cba:	f7fe fbe9 	bl	8002490 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fe fbe5 	bl	8002490 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0af      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd8:	4b5a      	ldr	r3, [pc, #360]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ee      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d105      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cea:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a55      	ldr	r2, [pc, #340]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 809b 	beq.w	8003e36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d05c      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d141      	bne.n	8003d98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d14:	4b4c      	ldr	r3, [pc, #304]	; (8003e48 <HAL_RCC_OscConfig+0x4ec>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fe fbb9 	bl	8002490 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fe fbb5 	bl	8002490 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e081      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	019b      	lsls	r3, r3, #6
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	4937      	ldr	r1, [pc, #220]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <HAL_RCC_OscConfig+0x4ec>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe fb8e 	bl	8002490 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe fb8a 	bl	8002490 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e056      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x41c>
 8003d96:	e04e      	b.n	8003e36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <HAL_RCC_OscConfig+0x4ec>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fb77 	bl	8002490 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fe fb73 	bl	8002490 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e03f      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db8:	4b22      	ldr	r3, [pc, #136]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x44a>
 8003dc4:	e037      	b.n	8003e36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e032      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <HAL_RCC_OscConfig+0x4e8>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d028      	beq.n	8003e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d121      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d11a      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d111      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40007000 	.word	0x40007000
 8003e44:	40023800 	.word	0x40023800
 8003e48:	42470060 	.word	0x42470060

08003e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0cc      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b68      	ldr	r3, [pc, #416]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d90c      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b8      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea0:	4b59      	ldr	r3, [pc, #356]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a58      	ldr	r2, [pc, #352]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	494d      	ldr	r1, [pc, #308]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d044      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b47      	ldr	r3, [pc, #284]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d119      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e067      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b37      	ldr	r3, [pc, #220]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4934      	ldr	r1, [pc, #208]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f3c:	f7fe faa8 	bl	8002490 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fe faa4 	bl	8002490 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e04f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d20c      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e032      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4916      	ldr	r1, [pc, #88]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	490e      	ldr	r1, [pc, #56]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd2:	f000 f821 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	490a      	ldr	r1, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe f862 	bl	80020bc <HAL_InitTick>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023c00 	.word	0x40023c00
 8004008:	40023800 	.word	0x40023800
 800400c:	0800bec4 	.word	0x0800bec4
 8004010:	20000000 	.word	0x20000000
 8004014:	20000004 	.word	0x20000004

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	2300      	movs	r3, #0
 800402a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004030:	4b67      	ldr	r3, [pc, #412]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d00d      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x40>
 800403c:	2b08      	cmp	r3, #8
 800403e:	f200 80bd 	bhi.w	80041bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x34>
 8004046:	2b04      	cmp	r3, #4
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x3a>
 800404a:	e0b7      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800404e:	60bb      	str	r3, [r7, #8]
       break;
 8004050:	e0b7      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004052:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004054:	60bb      	str	r3, [r7, #8]
      break;
 8004056:	e0b4      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004058:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004060:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004062:	4b5b      	ldr	r3, [pc, #364]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04d      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	461a      	mov	r2, r3
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	ea02 0800 	and.w	r8, r2, r0
 8004086:	ea03 0901 	and.w	r9, r3, r1
 800408a:	4640      	mov	r0, r8
 800408c:	4649      	mov	r1, r9
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	014b      	lsls	r3, r1, #5
 8004098:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800409c:	0142      	lsls	r2, r0, #5
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	ebb0 0008 	subs.w	r0, r0, r8
 80040a6:	eb61 0109 	sbc.w	r1, r1, r9
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	018b      	lsls	r3, r1, #6
 80040b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040b8:	0182      	lsls	r2, r0, #6
 80040ba:	1a12      	subs	r2, r2, r0
 80040bc:	eb63 0301 	sbc.w	r3, r3, r1
 80040c0:	f04f 0000 	mov.w	r0, #0
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	00d9      	lsls	r1, r3, #3
 80040ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ce:	00d0      	lsls	r0, r2, #3
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	eb12 0208 	adds.w	r2, r2, r8
 80040d8:	eb43 0309 	adc.w	r3, r3, r9
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	0259      	lsls	r1, r3, #9
 80040e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040ea:	0250      	lsls	r0, r2, #9
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f7fc fdac 	bl	8000c58 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e04a      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	461a      	mov	r2, r3
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	f240 10ff 	movw	r0, #511	; 0x1ff
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	ea02 0400 	and.w	r4, r2, r0
 8004122:	ea03 0501 	and.w	r5, r3, r1
 8004126:	4620      	mov	r0, r4
 8004128:	4629      	mov	r1, r5
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	014b      	lsls	r3, r1, #5
 8004134:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004138:	0142      	lsls	r2, r0, #5
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	1b00      	subs	r0, r0, r4
 8004140:	eb61 0105 	sbc.w	r1, r1, r5
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	018b      	lsls	r3, r1, #6
 800414e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004152:	0182      	lsls	r2, r0, #6
 8004154:	1a12      	subs	r2, r2, r0
 8004156:	eb63 0301 	sbc.w	r3, r3, r1
 800415a:	f04f 0000 	mov.w	r0, #0
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	00d9      	lsls	r1, r3, #3
 8004164:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004168:	00d0      	lsls	r0, r2, #3
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	1912      	adds	r2, r2, r4
 8004170:	eb45 0303 	adc.w	r3, r5, r3
 8004174:	f04f 0000 	mov.w	r0, #0
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	0299      	lsls	r1, r3, #10
 800417e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004182:	0290      	lsls	r0, r2, #10
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	461a      	mov	r2, r3
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	f7fc fd60 	bl	8000c58 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4613      	mov	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	3301      	adds	r3, #1
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	60bb      	str	r3, [r7, #8]
      break;
 80041ba:	e002      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041be:	60bb      	str	r3, [r7, #8]
      break;
 80041c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c2:	68bb      	ldr	r3, [r7, #8]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	007a1200 	.word	0x007a1200

080041dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e2:	681b      	ldr	r3, [r3, #0]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000

080041f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041f8:	f7ff fff0 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0a9b      	lsrs	r3, r3, #10
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	; (8004218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	0800bed4 	.word	0x0800bed4

0800421c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004220:	f7ff ffdc 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0b5b      	lsrs	r3, r3, #13
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4903      	ldr	r1, [pc, #12]	; (8004240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	0800bed4 	.word	0x0800bed4

08004244 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	220f      	movs	r2, #15
 8004252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0203 	and.w	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_GetClockConfig+0x5c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	08db      	lsrs	r3, r3, #3
 800427e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <HAL_RCC_GetClockConfig+0x60>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0207 	and.w	r2, r3, #7
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40023c00 	.word	0x40023c00

080042a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f839 	bl	8004346 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 f9ca 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d001      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e044      	b.n	80043fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_TIM_Base_Start_IT+0xb0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x6c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d013      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x6c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1a      	ldr	r2, [pc, #104]	; (8004410 <HAL_TIM_Base_Start_IT+0xb4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x6c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a19      	ldr	r2, [pc, #100]	; (8004414 <HAL_TIM_Base_Start_IT+0xb8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x6c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a17      	ldr	r2, [pc, #92]	; (8004418 <HAL_TIM_Base_Start_IT+0xbc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x6c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIM_Base_Start_IT+0xc0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d111      	bne.n	80043ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d010      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	e007      	b.n	80043fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40014000 	.word	0x40014000

08004420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b02      	cmp	r3, #2
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0202 	mvn.w	r2, #2
 800444c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8ee 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8e0 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8f1 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b04      	cmp	r3, #4
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0204 	mvn.w	r2, #4
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8c4 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8b6 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8c7 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0208 	mvn.w	r2, #8
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2204      	movs	r2, #4
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f89a 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f88c 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f89d 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b10      	cmp	r3, #16
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b10      	cmp	r3, #16
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0210 	mvn.w	r2, #16
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2208      	movs	r2, #8
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f870 	bl	8004644 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f862 	bl	8004630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f873 	bl	8004658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0201 	mvn.w	r2, #1
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd fc56 	bl	8001e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8e2 	bl	8004794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f838 	bl	800466c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b20      	cmp	r3, #32
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0220 	mvn.w	r2, #32
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8ac 	bl	8004780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a34      	ldr	r2, [pc, #208]	; (8004764 <TIM_Base_SetConfig+0xe4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00f      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d00b      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a31      	ldr	r2, [pc, #196]	; (8004768 <TIM_Base_SetConfig+0xe8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a30      	ldr	r2, [pc, #192]	; (800476c <TIM_Base_SetConfig+0xec>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a2f      	ldr	r2, [pc, #188]	; (8004770 <TIM_Base_SetConfig+0xf0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a25      	ldr	r2, [pc, #148]	; (8004764 <TIM_Base_SetConfig+0xe4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01b      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d017      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a22      	ldr	r2, [pc, #136]	; (8004768 <TIM_Base_SetConfig+0xe8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a21      	ldr	r2, [pc, #132]	; (800476c <TIM_Base_SetConfig+0xec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00f      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a20      	ldr	r2, [pc, #128]	; (8004770 <TIM_Base_SetConfig+0xf0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00b      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1f      	ldr	r2, [pc, #124]	; (8004774 <TIM_Base_SetConfig+0xf4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <TIM_Base_SetConfig+0xf8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1d      	ldr	r2, [pc, #116]	; (800477c <TIM_Base_SetConfig+0xfc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d108      	bne.n	800471c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <TIM_Base_SetConfig+0xe4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	615a      	str	r2, [r3, #20]
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e03f      	b.n	800483a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd fbc6 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb11 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b08a      	sub	sp, #40	; 0x28
 8004846:	af02      	add	r7, sp, #8
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	d17c      	bne.n	800495c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_UART_Transmit+0x2c>
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e075      	b.n	800495e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_UART_Transmit+0x3e>
 800487c:	2302      	movs	r3, #2
 800487e:	e06e      	b.n	800495e <HAL_UART_Transmit+0x11c>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2221      	movs	r2, #33	; 0x21
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004896:	f7fd fdfb 	bl	8002490 <HAL_GetTick>
 800489a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b0:	d108      	bne.n	80048c4 <HAL_UART_Transmit+0x82>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e003      	b.n	80048cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048d4:	e02a      	b.n	800492c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2200      	movs	r2, #0
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f9a5 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e036      	b.n	800495e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004904:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	3302      	adds	r3, #2
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	e007      	b.n	800491e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1cf      	bne.n	80048d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2200      	movs	r2, #0
 800493e:	2140      	movs	r1, #64	; 0x40
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f975 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e006      	b.n	800495e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	4613      	mov	r3, r2
 8004972:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d11d      	bne.n	80049bc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_UART_Receive_DMA+0x26>
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e016      	b.n	80049be <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_UART_Receive_DMA+0x38>
 800499a:	2302      	movs	r3, #2
 800499c:	e00f      	b.n	80049be <HAL_UART_Receive_DMA+0x58>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f986 	bl	8004cc4 <UART_Start_Receive_DMA>
 80049b8:	4603      	mov	r3, r0
 80049ba:	e000      	b.n	80049be <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b21      	cmp	r3, #33	; 0x21
 80049f2:	d116      	bne.n	8004a22 <HAL_UART_DMAStop+0x5c>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d013      	beq.n	8004a22 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a08:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe faec 	bl	8002ff4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f9b5 	bl	8004d8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	bf0c      	ite	eq
 8004a30:	2301      	moveq	r3, #1
 8004a32:	2300      	movne	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b22      	cmp	r3, #34	; 0x22
 8004a42:	d116      	bne.n	8004a72 <HAL_UART_DMAStop+0xac>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d013      	beq.n	8004a72 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a58:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d004      	beq.n	8004a6c <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fac4 	bl	8002ff4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f9a3 	bl	8004db8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d12a      	bne.n	8004b42 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b00:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b20:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d107      	bne.n	8004b42 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0210 	bic.w	r2, r2, #16
 8004b40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d106      	bne.n	8004b58 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff ffb1 	bl	8004ab8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b56:	e002      	b.n	8004b5e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff ff8f 	bl	8004a7c <HAL_UART_RxCpltCallback>
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d108      	bne.n	8004b8e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff ff96 	bl	8004ab8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b8c:	e002      	b.n	8004b94 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff7e 	bl	8004a90 <HAL_UART_RxHalfCpltCallback>
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b21      	cmp	r3, #33	; 0x21
 8004bce:	d108      	bne.n	8004be2 <UART_DMAError+0x46>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004bdc:	68b8      	ldr	r0, [r7, #8]
 8004bde:	f000 f8d5 	bl	8004d8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b22      	cmp	r3, #34	; 0x22
 8004c02:	d108      	bne.n	8004c16 <UART_DMAError+0x7a>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c10:	68b8      	ldr	r0, [r7, #8]
 8004c12:	f000 f8d1 	bl	8004db8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f043 0210 	orr.w	r2, r3, #16
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c22:	68b8      	ldr	r0, [r7, #8]
 8004c24:	f7ff ff3e 	bl	8004aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c40:	e02c      	b.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c48:	d028      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c50:	f7fd fc1e 	bl	8002490 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d21d      	bcs.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e00f      	b.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d0c3      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2222      	movs	r2, #34	; 0x22
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	4a23      	ldr	r2, [pc, #140]	; (8004d80 <UART_Start_Receive_DMA+0xbc>)
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <UART_Start_Receive_DMA+0xc0>)
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <UART_Start_Receive_DMA+0xc4>)
 8004d02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	2200      	movs	r2, #0
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d0c:	f107 0308 	add.w	r3, r7, #8
 8004d10:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	f7fe f90e 	bl	8002f44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	08004ad1 	.word	0x08004ad1
 8004d84:	08004b67 	.word	0x08004b67
 8004d88:	08004b9d 	.word	0x08004b9d

08004d8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004da2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d107      	bne.n	8004df8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0210 	bic.w	r2, r2, #16
 8004df6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	b09f      	sub	sp, #124	; 0x7c
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	68d9      	ldr	r1, [r3, #12]
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	ea40 0301 	orr.w	r3, r0, r1
 8004e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e58:	f021 010c 	bic.w	r1, r1, #12
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e62:	430b      	orrs	r3, r1
 8004e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e72:	6999      	ldr	r1, [r3, #24]
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	ea40 0301 	orr.w	r3, r0, r1
 8004e7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4bc5      	ldr	r3, [pc, #788]	; (8005198 <UART_SetConfig+0x384>)
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d004      	beq.n	8004e92 <UART_SetConfig+0x7e>
 8004e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4bc3      	ldr	r3, [pc, #780]	; (800519c <UART_SetConfig+0x388>)
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d103      	bne.n	8004e9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e92:	f7ff f9c3 	bl	800421c <HAL_RCC_GetPCLK2Freq>
 8004e96:	6778      	str	r0, [r7, #116]	; 0x74
 8004e98:	e002      	b.n	8004ea0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e9a:	f7ff f9ab 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8004e9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea8:	f040 80b6 	bne.w	8005018 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eae:	461c      	mov	r4, r3
 8004eb0:	f04f 0500 	mov.w	r5, #0
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	1891      	adds	r1, r2, r2
 8004eba:	6439      	str	r1, [r7, #64]	; 0x40
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8004ec0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ec4:	1912      	adds	r2, r2, r4
 8004ec6:	eb45 0303 	adc.w	r3, r5, r3
 8004eca:	f04f 0000 	mov.w	r0, #0
 8004ece:	f04f 0100 	mov.w	r1, #0
 8004ed2:	00d9      	lsls	r1, r3, #3
 8004ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed8:	00d0      	lsls	r0, r2, #3
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	1911      	adds	r1, r2, r4
 8004ee0:	6639      	str	r1, [r7, #96]	; 0x60
 8004ee2:	416b      	adcs	r3, r5
 8004ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004efc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004f00:	f7fb feaa 	bl	8000c58 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4ba5      	ldr	r3, [pc, #660]	; (80051a0 <UART_SetConfig+0x38c>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	011e      	lsls	r6, r3, #4
 8004f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f14:	461c      	mov	r4, r3
 8004f16:	f04f 0500 	mov.w	r5, #0
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	462b      	mov	r3, r5
 8004f1e:	1891      	adds	r1, r2, r2
 8004f20:	6339      	str	r1, [r7, #48]	; 0x30
 8004f22:	415b      	adcs	r3, r3
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
 8004f26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f2a:	1912      	adds	r2, r2, r4
 8004f2c:	eb45 0303 	adc.w	r3, r5, r3
 8004f30:	f04f 0000 	mov.w	r0, #0
 8004f34:	f04f 0100 	mov.w	r1, #0
 8004f38:	00d9      	lsls	r1, r3, #3
 8004f3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f3e:	00d0      	lsls	r0, r2, #3
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	1911      	adds	r1, r2, r4
 8004f46:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f48:	416b      	adcs	r3, r5
 8004f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	461a      	mov	r2, r3
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	1891      	adds	r1, r2, r2
 8004f58:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f5a:	415b      	adcs	r3, r3
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f66:	f7fb fe77 	bl	8000c58 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4b8c      	ldr	r3, [pc, #560]	; (80051a0 <UART_SetConfig+0x38c>)
 8004f70:	fba3 1302 	umull	r1, r3, r3, r2
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	2164      	movs	r1, #100	; 0x64
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	3332      	adds	r3, #50	; 0x32
 8004f82:	4a87      	ldr	r2, [pc, #540]	; (80051a0 <UART_SetConfig+0x38c>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f90:	441e      	add	r6, r3
 8004f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f94:	4618      	mov	r0, r3
 8004f96:	f04f 0100 	mov.w	r1, #0
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	1894      	adds	r4, r2, r2
 8004fa0:	623c      	str	r4, [r7, #32]
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004faa:	1812      	adds	r2, r2, r0
 8004fac:	eb41 0303 	adc.w	r3, r1, r3
 8004fb0:	f04f 0400 	mov.w	r4, #0
 8004fb4:	f04f 0500 	mov.w	r5, #0
 8004fb8:	00dd      	lsls	r5, r3, #3
 8004fba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fbe:	00d4      	lsls	r4, r2, #3
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	1814      	adds	r4, r2, r0
 8004fc6:	653c      	str	r4, [r7, #80]	; 0x50
 8004fc8:	414b      	adcs	r3, r1
 8004fca:	657b      	str	r3, [r7, #84]	; 0x54
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	1891      	adds	r1, r2, r2
 8004fd8:	61b9      	str	r1, [r7, #24]
 8004fda:	415b      	adcs	r3, r3
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004fe6:	f7fb fe37 	bl	8000c58 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4b6c      	ldr	r3, [pc, #432]	; (80051a0 <UART_SetConfig+0x38c>)
 8004ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	2164      	movs	r1, #100	; 0x64
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	3332      	adds	r3, #50	; 0x32
 8005002:	4a67      	ldr	r2, [pc, #412]	; (80051a0 <UART_SetConfig+0x38c>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	f003 0207 	and.w	r2, r3, #7
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4432      	add	r2, r6
 8005014:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005016:	e0b9      	b.n	800518c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501a:	461c      	mov	r4, r3
 800501c:	f04f 0500 	mov.w	r5, #0
 8005020:	4622      	mov	r2, r4
 8005022:	462b      	mov	r3, r5
 8005024:	1891      	adds	r1, r2, r2
 8005026:	6139      	str	r1, [r7, #16]
 8005028:	415b      	adcs	r3, r3
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005030:	1912      	adds	r2, r2, r4
 8005032:	eb45 0303 	adc.w	r3, r5, r3
 8005036:	f04f 0000 	mov.w	r0, #0
 800503a:	f04f 0100 	mov.w	r1, #0
 800503e:	00d9      	lsls	r1, r3, #3
 8005040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005044:	00d0      	lsls	r0, r2, #3
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	eb12 0804 	adds.w	r8, r2, r4
 800504e:	eb43 0905 	adc.w	r9, r3, r5
 8005052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4618      	mov	r0, r3
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	008b      	lsls	r3, r1, #2
 8005066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800506a:	0082      	lsls	r2, r0, #2
 800506c:	4640      	mov	r0, r8
 800506e:	4649      	mov	r1, r9
 8005070:	f7fb fdf2 	bl	8000c58 <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4b49      	ldr	r3, [pc, #292]	; (80051a0 <UART_SetConfig+0x38c>)
 800507a:	fba3 2302 	umull	r2, r3, r3, r2
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	011e      	lsls	r6, r3, #4
 8005082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005084:	4618      	mov	r0, r3
 8005086:	f04f 0100 	mov.w	r1, #0
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	1894      	adds	r4, r2, r2
 8005090:	60bc      	str	r4, [r7, #8]
 8005092:	415b      	adcs	r3, r3
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800509a:	1812      	adds	r2, r2, r0
 800509c:	eb41 0303 	adc.w	r3, r1, r3
 80050a0:	f04f 0400 	mov.w	r4, #0
 80050a4:	f04f 0500 	mov.w	r5, #0
 80050a8:	00dd      	lsls	r5, r3, #3
 80050aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050ae:	00d4      	lsls	r4, r2, #3
 80050b0:	4622      	mov	r2, r4
 80050b2:	462b      	mov	r3, r5
 80050b4:	1814      	adds	r4, r2, r0
 80050b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80050b8:	414b      	adcs	r3, r1
 80050ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f04f 0100 	mov.w	r1, #0
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050d4:	0082      	lsls	r2, r0, #2
 80050d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80050da:	f7fb fdbd 	bl	8000c58 <__aeabi_uldivmod>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <UART_SetConfig+0x38c>)
 80050e4:	fba3 1302 	umull	r1, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	2164      	movs	r1, #100	; 0x64
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	3332      	adds	r3, #50	; 0x32
 80050f6:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <UART_SetConfig+0x38c>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005102:	441e      	add	r6, r3
 8005104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005106:	4618      	mov	r0, r3
 8005108:	f04f 0100 	mov.w	r1, #0
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	1894      	adds	r4, r2, r2
 8005112:	603c      	str	r4, [r7, #0]
 8005114:	415b      	adcs	r3, r3
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511c:	1812      	adds	r2, r2, r0
 800511e:	eb41 0303 	adc.w	r3, r1, r3
 8005122:	f04f 0400 	mov.w	r4, #0
 8005126:	f04f 0500 	mov.w	r5, #0
 800512a:	00dd      	lsls	r5, r3, #3
 800512c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005130:	00d4      	lsls	r4, r2, #3
 8005132:	4622      	mov	r2, r4
 8005134:	462b      	mov	r3, r5
 8005136:	eb12 0a00 	adds.w	sl, r2, r0
 800513a:	eb43 0b01 	adc.w	fp, r3, r1
 800513e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4618      	mov	r0, r3
 8005144:	f04f 0100 	mov.w	r1, #0
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	008b      	lsls	r3, r1, #2
 8005152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005156:	0082      	lsls	r2, r0, #2
 8005158:	4650      	mov	r0, sl
 800515a:	4659      	mov	r1, fp
 800515c:	f7fb fd7c 	bl	8000c58 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <UART_SetConfig+0x38c>)
 8005166:	fba3 1302 	umull	r1, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2164      	movs	r1, #100	; 0x64
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	3332      	adds	r3, #50	; 0x32
 8005178:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <UART_SetConfig+0x38c>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	f003 020f 	and.w	r2, r3, #15
 8005184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4432      	add	r2, r6
 800518a:	609a      	str	r2, [r3, #8]
}
 800518c:	bf00      	nop
 800518e:	377c      	adds	r7, #124	; 0x7c
 8005190:	46bd      	mov	sp, r7
 8005192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005196:	bf00      	nop
 8005198:	40011000 	.word	0x40011000
 800519c:	40011400 	.word	0x40011400
 80051a0:	51eb851f 	.word	0x51eb851f

080051a4 <__NVIC_SetPriority>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	db0a      	blt.n	80051ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	490c      	ldr	r1, [pc, #48]	; (80051f0 <__NVIC_SetPriority+0x4c>)
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	0112      	lsls	r2, r2, #4
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	440b      	add	r3, r1
 80051c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051cc:	e00a      	b.n	80051e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4908      	ldr	r1, [pc, #32]	; (80051f4 <__NVIC_SetPriority+0x50>)
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	3b04      	subs	r3, #4
 80051dc:	0112      	lsls	r2, r2, #4
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	440b      	add	r3, r1
 80051e2:	761a      	strb	r2, [r3, #24]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	e000e100 	.word	0xe000e100
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <SysTick_Handler+0x1c>)
 80051fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005200:	f002 fc68 	bl	8007ad4 <xTaskGetSchedulerState>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d001      	beq.n	800520e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800520a:	f000 fea5 	bl	8005f58 <xPortSysTickHandler>
  }
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	e000e010 	.word	0xe000e010

08005218 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800521c:	2100      	movs	r1, #0
 800521e:	f06f 0004 	mvn.w	r0, #4
 8005222:	f7ff ffbf 	bl	80051a4 <__NVIC_SetPriority>
#endif
}
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005232:	f3ef 8305 	mrs	r3, IPSR
 8005236:	603b      	str	r3, [r7, #0]
  return(result);
 8005238:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800523e:	f06f 0305 	mvn.w	r3, #5
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	e00c      	b.n	8005260 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <osKernelInitialize+0x44>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d105      	bne.n	800525a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <osKernelInitialize+0x44>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005254:	2300      	movs	r3, #0
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	e002      	b.n	8005260 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800525a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800525e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005260:	687b      	ldr	r3, [r7, #4]
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000218 	.word	0x20000218

08005274 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527a:	f3ef 8305 	mrs	r3, IPSR
 800527e:	603b      	str	r3, [r7, #0]
  return(result);
 8005280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005286:	f06f 0305 	mvn.w	r3, #5
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	e010      	b.n	80052b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <osKernelStart+0x48>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d109      	bne.n	80052aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005296:	f7ff ffbf 	bl	8005218 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800529a:	4b08      	ldr	r3, [pc, #32]	; (80052bc <osKernelStart+0x48>)
 800529c:	2202      	movs	r2, #2
 800529e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052a0:	f001 ffc0 	bl	8007224 <vTaskStartScheduler>
      stat = osOK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	e002      	b.n	80052b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052b0:	687b      	ldr	r3, [r7, #4]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000218 	.word	0x20000218

080052c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	; 0x38
 80052c4:	af04      	add	r7, sp, #16
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d0:	f3ef 8305 	mrs	r3, IPSR
 80052d4:	617b      	str	r3, [r7, #20]
  return(result);
 80052d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d17e      	bne.n	80053da <osThreadNew+0x11a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d07b      	beq.n	80053da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80052e6:	2318      	movs	r3, #24
 80052e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d045      	beq.n	8005386 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <osThreadNew+0x48>
        name = attr->name;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <osThreadNew+0x6e>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b38      	cmp	r3, #56	; 0x38
 8005320:	d805      	bhi.n	800532e <osThreadNew+0x6e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <osThreadNew+0x72>
        return (NULL);
 800532e:	2300      	movs	r3, #0
 8005330:	e054      	b.n	80053dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <osThreadNew+0xa8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b5b      	cmp	r3, #91	; 0x5b
 8005350:	d90a      	bls.n	8005368 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <osThreadNew+0xa8>
        mem = 1;
 8005362:	2301      	movs	r3, #1
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	e010      	b.n	800538a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <osThreadNew+0xca>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d108      	bne.n	800538a <osThreadNew+0xca>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <osThreadNew+0xca>
          mem = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e001      	b.n	800538a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d110      	bne.n	80053b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005398:	9202      	str	r2, [sp, #8]
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6a3a      	ldr	r2, [r7, #32]
 80053a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f001 fd66 	bl	8006e78 <xTaskCreateStatic>
 80053ac:	4603      	mov	r3, r0
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	e013      	b.n	80053da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d110      	bne.n	80053da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	f107 0310 	add.w	r3, r7, #16
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f001 fdb1 	bl	8006f32 <xTaskCreate>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <osThreadNew+0x11a>
            hTask = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053da:	693b      	ldr	r3, [r7, #16]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ec:	f3ef 8305 	mrs	r3, IPSR
 80053f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <osDelay+0x1c>
    stat = osErrorISR;
 80053f8:	f06f 0305 	mvn.w	r3, #5
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	e007      	b.n	8005410 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <osDelay+0x2c>
      vTaskDelay(ticks);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fed6 	bl	80071bc <vTaskDelay>
    }
  }

  return (stat);
 8005410:	68fb      	ldr	r3, [r7, #12]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800541a:	b580      	push	{r7, lr}
 800541c:	b088      	sub	sp, #32
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005426:	f3ef 8305 	mrs	r3, IPSR
 800542a:	60bb      	str	r3, [r7, #8]
  return(result);
 800542c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800542e:	2b00      	cmp	r3, #0
 8005430:	d174      	bne.n	800551c <osMutexNew+0x102>
    if (attr != NULL) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e001      	b.n	8005444 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <osMutexNew+0x3a>
      rmtx = 1U;
 800544e:	2301      	movs	r3, #1
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	e001      	b.n	8005458 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d15c      	bne.n	800551c <osMutexNew+0x102>
      mem = -1;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005466:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d006      	beq.n	8005484 <osMutexNew+0x6a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b4f      	cmp	r3, #79	; 0x4f
 800547c:	d902      	bls.n	8005484 <osMutexNew+0x6a>
          mem = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	e00c      	b.n	800549e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d108      	bne.n	800549e <osMutexNew+0x84>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <osMutexNew+0x84>
            mem = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e001      	b.n	800549e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d112      	bne.n	80054ca <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	4619      	mov	r1, r3
 80054b0:	2004      	movs	r0, #4
 80054b2:	f000 ff50 	bl	8006356 <xQueueCreateMutexStatic>
 80054b6:	61f8      	str	r0, [r7, #28]
 80054b8:	e016      	b.n	80054e8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4619      	mov	r1, r3
 80054c0:	2001      	movs	r0, #1
 80054c2:	f000 ff48 	bl	8006356 <xQueueCreateMutexStatic>
 80054c6:	61f8      	str	r0, [r7, #28]
 80054c8:	e00e      	b.n	80054e8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80054d6:	2004      	movs	r0, #4
 80054d8:	f000 ff25 	bl	8006326 <xQueueCreateMutex>
 80054dc:	61f8      	str	r0, [r7, #28]
 80054de:	e003      	b.n	80054e8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80054e0:	2001      	movs	r0, #1
 80054e2:	f000 ff20 	bl	8006326 <xQueueCreateMutex>
 80054e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <osMutexNew+0xee>
        if (attr != NULL) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <osMutexNew+0xe2>
          name = attr->name;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e001      	b.n	8005500 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	69f8      	ldr	r0, [r7, #28]
 8005504:	f001 fc5a 	bl	8006dbc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <osMutexNew+0x102>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800551c:	69fb      	ldr	r3, [r7, #28]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005544:	f3ef 8305 	mrs	r3, IPSR
 8005548:	60bb      	str	r3, [r7, #8]
  return(result);
 800554a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005550:	f06f 0305 	mvn.w	r3, #5
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e02c      	b.n	80055b2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800555e:	f06f 0303 	mvn.w	r3, #3
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e025      	b.n	80055b2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d011      	beq.n	8005590 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6938      	ldr	r0, [r7, #16]
 8005570:	f000 ff40 	bl	80063f4 <xQueueTakeMutexRecursive>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d01b      	beq.n	80055b2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005580:	f06f 0301 	mvn.w	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e014      	b.n	80055b2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005588:	f06f 0302 	mvn.w	r3, #2
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e010      	b.n	80055b2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6938      	ldr	r0, [r7, #16]
 8005594:	f001 f9de 	bl	8006954 <xQueueSemaphoreTake>
 8005598:	4603      	mov	r3, r0
 800559a:	2b01      	cmp	r3, #1
 800559c:	d009      	beq.n	80055b2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80055a4:	f06f 0301 	mvn.w	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e002      	b.n	80055b2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80055ac:	f06f 0302 	mvn.w	r3, #2
 80055b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80055b2:	697b      	ldr	r3, [r7, #20]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d8:	f3ef 8305 	mrs	r3, IPSR
 80055dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80055de:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <osMutexRelease+0x30>
    stat = osErrorISR;
 80055e4:	f06f 0305 	mvn.w	r3, #5
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e01f      	b.n	800562c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80055f2:	f06f 0303 	mvn.w	r3, #3
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e018      	b.n	800562c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005600:	6938      	ldr	r0, [r7, #16]
 8005602:	f000 fec3 	bl	800638c <xQueueGiveMutexRecursive>
 8005606:	4603      	mov	r3, r0
 8005608:	2b01      	cmp	r3, #1
 800560a:	d00f      	beq.n	800562c <osMutexRelease+0x70>
        stat = osErrorResource;
 800560c:	f06f 0302 	mvn.w	r3, #2
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e00b      	b.n	800562c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005614:	2300      	movs	r3, #0
 8005616:	2200      	movs	r2, #0
 8005618:	2100      	movs	r1, #0
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f000 ff20 	bl	8006460 <xQueueGenericSend>
 8005620:	4603      	mov	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d002      	beq.n	800562c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005626:	f06f 0302 	mvn.w	r3, #2
 800562a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800562c:	697b      	ldr	r3, [r7, #20]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4a07      	ldr	r2, [pc, #28]	; (8005664 <vApplicationGetIdleTaskMemory+0x2c>)
 8005648:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a06      	ldr	r2, [pc, #24]	; (8005668 <vApplicationGetIdleTaskMemory+0x30>)
 800564e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	601a      	str	r2, [r3, #0]
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	2000021c 	.word	0x2000021c
 8005668:	20000278 	.word	0x20000278

0800566c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a07      	ldr	r2, [pc, #28]	; (8005698 <vApplicationGetTimerTaskMemory+0x2c>)
 800567c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4a06      	ldr	r2, [pc, #24]	; (800569c <vApplicationGetTimerTaskMemory+0x30>)
 8005682:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800568a:	601a      	str	r2, [r3, #0]
}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000478 	.word	0x20000478
 800569c:	200004d4 	.word	0x200004d4

080056a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056ac:	f001 fe20 	bl	80072f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056b0:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <pvPortMalloc+0x180>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056b8:	f000 f920 	bl	80058fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056bc:	4b59      	ldr	r3, [pc, #356]	; (8005824 <pvPortMalloc+0x184>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f040 8093 	bne.w	80057f0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01d      	beq.n	800570c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056d0:	2208      	movs	r2, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f023 0307 	bic.w	r3, r3, #7
 80056e8:	3308      	adds	r3, #8
 80056ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d06e      	beq.n	80057f0 <pvPortMalloc+0x150>
 8005712:	4b45      	ldr	r3, [pc, #276]	; (8005828 <pvPortMalloc+0x188>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d869      	bhi.n	80057f0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800571c:	4b43      	ldr	r3, [pc, #268]	; (800582c <pvPortMalloc+0x18c>)
 800571e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005720:	4b42      	ldr	r3, [pc, #264]	; (800582c <pvPortMalloc+0x18c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005726:	e004      	b.n	8005732 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d903      	bls.n	8005744 <pvPortMalloc+0xa4>
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f1      	bne.n	8005728 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005744:	4b36      	ldr	r3, [pc, #216]	; (8005820 <pvPortMalloc+0x180>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	429a      	cmp	r2, r3
 800574c:	d050      	beq.n	80057f0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2208      	movs	r2, #8
 8005754:	4413      	add	r3, r2
 8005756:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	2308      	movs	r3, #8
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	429a      	cmp	r2, r3
 800576e:	d91f      	bls.n	80057b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4413      	add	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <pvPortMalloc+0xf8>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	613b      	str	r3, [r7, #16]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057aa:	69b8      	ldr	r0, [r7, #24]
 80057ac:	f000 f908 	bl	80059c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <pvPortMalloc+0x188>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <pvPortMalloc+0x188>)
 80057bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057be:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <pvPortMalloc+0x188>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <pvPortMalloc+0x190>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d203      	bcs.n	80057d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057ca:	4b17      	ldr	r3, [pc, #92]	; (8005828 <pvPortMalloc+0x188>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <pvPortMalloc+0x190>)
 80057d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4b13      	ldr	r3, [pc, #76]	; (8005824 <pvPortMalloc+0x184>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	431a      	orrs	r2, r3
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057e6:	4b13      	ldr	r3, [pc, #76]	; (8005834 <pvPortMalloc+0x194>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4a11      	ldr	r2, [pc, #68]	; (8005834 <pvPortMalloc+0x194>)
 80057ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057f0:	f001 fd8c 	bl	800730c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <pvPortMalloc+0x174>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <pvPortMalloc+0x172>
	return pvReturn;
 8005814:	69fb      	ldr	r3, [r7, #28]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3728      	adds	r7, #40	; 0x28
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	2000a51c 	.word	0x2000a51c
 8005824:	2000a530 	.word	0x2000a530
 8005828:	2000a520 	.word	0x2000a520
 800582c:	2000a514 	.word	0x2000a514
 8005830:	2000a524 	.word	0x2000a524
 8005834:	2000a528 	.word	0x2000a528

08005838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d04d      	beq.n	80058e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800584a:	2308      	movs	r3, #8
 800584c:	425b      	negs	r3, r3
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <vPortFree+0xb8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <vPortFree+0x44>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60fb      	str	r3, [r7, #12]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <vPortFree+0x62>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	60bb      	str	r3, [r7, #8]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <vPortFree+0xb8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01e      	beq.n	80058e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11a      	bne.n	80058e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <vPortFree+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	401a      	ands	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058c0:	f001 fd16 	bl	80072f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <vPortFree+0xbc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <vPortFree+0xbc>)
 80058d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058d2:	6938      	ldr	r0, [r7, #16]
 80058d4:	f000 f874 	bl	80059c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058d8:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <vPortFree+0xc0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	4a06      	ldr	r2, [pc, #24]	; (80058f8 <vPortFree+0xc0>)
 80058e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058e2:	f001 fd13 	bl	800730c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058e6:	bf00      	nop
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2000a530 	.word	0x2000a530
 80058f4:	2000a520 	.word	0x2000a520
 80058f8:	2000a52c 	.word	0x2000a52c

080058fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005902:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005906:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005908:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <prvHeapInit+0xac>)
 800590a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00c      	beq.n	8005930 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3307      	adds	r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0307 	bic.w	r3, r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <prvHeapInit+0xac>)
 800592c:	4413      	add	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <prvHeapInit+0xb0>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800593a:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <prvHeapInit+0xb0>)
 800593c:	2200      	movs	r2, #0
 800593e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	4413      	add	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005948:	2208      	movs	r2, #8
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0307 	bic.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <prvHeapInit+0xb4>)
 800595c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800595e:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <prvHeapInit+0xb4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005966:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <prvHeapInit+0xb4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800597c:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <prvHeapInit+0xb4>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <prvHeapInit+0xb8>)
 800598a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <prvHeapInit+0xbc>)
 8005992:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <prvHeapInit+0xc0>)
 8005996:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800599a:	601a      	str	r2, [r3, #0]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	200008d4 	.word	0x200008d4
 80059ac:	2000a514 	.word	0x2000a514
 80059b0:	2000a51c 	.word	0x2000a51c
 80059b4:	2000a524 	.word	0x2000a524
 80059b8:	2000a520 	.word	0x2000a520
 80059bc:	2000a530 	.word	0x2000a530

080059c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059c8:	4b28      	ldr	r3, [pc, #160]	; (8005a6c <prvInsertBlockIntoFreeList+0xac>)
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e002      	b.n	80059d4 <prvInsertBlockIntoFreeList+0x14>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d8f7      	bhi.n	80059ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4413      	add	r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d108      	bne.n	8005a02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	441a      	add	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d118      	bne.n	8005a48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <prvInsertBlockIntoFreeList+0xb0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d00d      	beq.n	8005a3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e008      	b.n	8005a50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <prvInsertBlockIntoFreeList+0xb0>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e003      	b.n	8005a50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d002      	beq.n	8005a5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	2000a514 	.word	0x2000a514
 8005a70:	2000a51c 	.word	0x2000a51c

08005a74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f103 0208 	add.w	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f103 0208 	add.w	r2, r3, #8
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f103 0208 	add.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b2c:	d103      	bne.n	8005b36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e00c      	b.n	8005b50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e002      	b.n	8005b44 <vListInsert+0x2e>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d2f6      	bcs.n	8005b3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6892      	ldr	r2, [r2, #8]
 8005b9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6852      	ldr	r2, [r2, #4]
 8005ba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d103      	bne.n	8005bbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3b04      	subs	r3, #4
 8005bec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3b04      	subs	r3, #4
 8005bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3b04      	subs	r3, #4
 8005c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c0c:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <pxPortInitialiseStack+0x64>)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3b14      	subs	r3, #20
 8005c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3b04      	subs	r3, #4
 8005c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f06f 0202 	mvn.w	r2, #2
 8005c2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3b20      	subs	r3, #32
 8005c30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	08005c45 	.word	0x08005c45

08005c44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <prvTaskExitError+0x54>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c56:	d00a      	beq.n	8005c6e <prvTaskExitError+0x2a>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	60fb      	str	r3, [r7, #12]
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <prvTaskExitError+0x28>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	60bb      	str	r3, [r7, #8]
}
 8005c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c82:	bf00      	nop
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0fc      	beq.n	8005c84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	2000000c 	.word	0x2000000c
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	4770      	bx	lr
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	2000a53c 	.word	0x2000a53c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cc8:	4808      	ldr	r0, [pc, #32]	; (8005cec <prvPortStartFirstTask+0x24>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8814 	msr	CONTROL, r0
 8005cda:	b662      	cpsie	i
 8005cdc:	b661      	cpsie	f
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	df00      	svc	0
 8005ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cea:	bf00      	nop
 8005cec:	e000ed08 	.word	0xe000ed08

08005cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cf6:	4b46      	ldr	r3, [pc, #280]	; (8005e10 <xPortStartScheduler+0x120>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <xPortStartScheduler+0x124>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10a      	bne.n	8005d16 <xPortStartScheduler+0x26>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d16:	4b3e      	ldr	r3, [pc, #248]	; (8005e10 <xPortStartScheduler+0x120>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3f      	ldr	r2, [pc, #252]	; (8005e18 <xPortStartScheduler+0x128>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10a      	bne.n	8005d36 <xPortStartScheduler+0x46>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	60fb      	str	r3, [r7, #12]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d36:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	22ff      	movs	r2, #255	; 0xff
 8005d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <xPortStartScheduler+0x130>)
 8005d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d5e:	4b31      	ldr	r3, [pc, #196]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d60:	2207      	movs	r2, #7
 8005d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d64:	e009      	b.n	8005d7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	4a2d      	ldr	r2, [pc, #180]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d0ef      	beq.n	8005d66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d86:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <xPortStartScheduler+0x134>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1c3 0307 	rsb	r3, r3, #7
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d00a      	beq.n	8005da8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da8:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <xPortStartScheduler+0x134>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <xPortStartScheduler+0x134>)
 8005db0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005db2:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <xPortStartScheduler+0x134>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dba:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <xPortStartScheduler+0x134>)
 8005dbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a17      	ldr	r2, [pc, #92]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dde:	f000 f8dd 	bl	8005f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <xPortStartScheduler+0x13c>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005de8:	f000 f8fc 	bl	8005fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <xPortStartScheduler+0x140>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0f      	ldr	r2, [pc, #60]	; (8005e30 <xPortStartScheduler+0x140>)
 8005df2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005df6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005df8:	f7ff ff66 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dfc:	f001 fbee 	bl	80075dc <vTaskSwitchContext>
	prvTaskExitError();
 8005e00:	f7ff ff20 	bl	8005c44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	e000ed00 	.word	0xe000ed00
 8005e14:	410fc271 	.word	0x410fc271
 8005e18:	410fc270 	.word	0x410fc270
 8005e1c:	e000e400 	.word	0xe000e400
 8005e20:	2000a534 	.word	0x2000a534
 8005e24:	2000a538 	.word	0x2000a538
 8005e28:	e000ed20 	.word	0xe000ed20
 8005e2c:	2000000c 	.word	0x2000000c
 8005e30:	e000ef34 	.word	0xe000ef34

08005e34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
}
 8005e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e58:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <vPortEnterCritical+0x58>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10f      	bne.n	8005e80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <vPortEnterCritical+0x5c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	603b      	str	r3, [r7, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <vPortEnterCritical+0x4a>
	}
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	2000000c 	.word	0x2000000c
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <vPortExitCritical+0x50>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <vPortExitCritical+0x24>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	607b      	str	r3, [r7, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <vPortExitCritical+0x50>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <vPortExitCritical+0x50>)
 8005ec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <vPortExitCritical+0x50>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <vPortExitCritical+0x42>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ed4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	2000000c 	.word	0x2000000c
	...

08005ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ef0:	f3ef 8009 	mrs	r0, PSP
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <pxCurrentTCBConst>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f01e 0f10 	tst.w	lr, #16
 8005f00:	bf08      	it	eq
 8005f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	6010      	str	r0, [r2, #0]
 8005f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f14:	f380 8811 	msr	BASEPRI, r0
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f001 fb5c 	bl	80075dc <vTaskSwitchContext>
 8005f24:	f04f 0000 	mov.w	r0, #0
 8005f28:	f380 8811 	msr	BASEPRI, r0
 8005f2c:	bc09      	pop	{r0, r3}
 8005f2e:	6819      	ldr	r1, [r3, #0]
 8005f30:	6808      	ldr	r0, [r1, #0]
 8005f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f36:	f01e 0f10 	tst.w	lr, #16
 8005f3a:	bf08      	it	eq
 8005f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f40:	f380 8809 	msr	PSP, r0
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	f3af 8000 	nop.w

08005f50 <pxCurrentTCBConst>:
 8005f50:	2000a53c 	.word	0x2000a53c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop

08005f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f72:	f001 fa79 	bl	8007468 <xTaskIncrementTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <xPortSysTickHandler+0x40>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	2300      	movs	r3, #0
 8005f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <vPortSetupTimerInterrupt+0x38>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <vPortSetupTimerInterrupt+0x3c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <vPortSetupTimerInterrupt+0x40>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <vPortSetupTimerInterrupt+0x44>)
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fbe:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	601a      	str	r2, [r3, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	e000e010 	.word	0xe000e010
 8005fd4:	e000e018 	.word	0xe000e018
 8005fd8:	20000000 	.word	0x20000000
 8005fdc:	10624dd3 	.word	0x10624dd3
 8005fe0:	e000e014 	.word	0xe000e014

08005fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ff4 <vPortEnableVFP+0x10>
 8005fe8:	6801      	ldr	r1, [r0, #0]
 8005fea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fee:	6001      	str	r1, [r0, #0]
 8005ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ff2:	bf00      	nop
 8005ff4:	e000ed88 	.word	0xe000ed88

08005ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ffe:	f3ef 8305 	mrs	r3, IPSR
 8006002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b0f      	cmp	r3, #15
 8006008:	d914      	bls.n	8006034 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800600a:	4a17      	ldr	r2, [pc, #92]	; (8006068 <vPortValidateInterruptPriority+0x70>)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006014:	4b15      	ldr	r3, [pc, #84]	; (800606c <vPortValidateInterruptPriority+0x74>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	7afa      	ldrb	r2, [r7, #11]
 800601a:	429a      	cmp	r2, r3
 800601c:	d20a      	bcs.n	8006034 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	607b      	str	r3, [r7, #4]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <vPortValidateInterruptPriority+0x78>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800603c:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <vPortValidateInterruptPriority+0x7c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d90a      	bls.n	800605a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	603b      	str	r3, [r7, #0]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <vPortValidateInterruptPriority+0x60>
	}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	e000e3f0 	.word	0xe000e3f0
 800606c:	2000a534 	.word	0x2000a534
 8006070:	e000ed0c 	.word	0xe000ed0c
 8006074:	2000a538 	.word	0x2000a538

08006078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <xQueueGenericReset+0x2a>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60bb      	str	r3, [r7, #8]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060a2:	f7ff fec7 	bl	8005e34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	3b01      	subs	r3, #1
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	441a      	add	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d114      	bne.n	8006122 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01a      	beq.n	8006136 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3310      	adds	r3, #16
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fb17 	bl	8007738 <xTaskRemoveFromEventList>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d012      	beq.n	8006136 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <xQueueGenericReset+0xcc>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	e009      	b.n	8006136 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3310      	adds	r3, #16
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fca4 	bl	8005a74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3324      	adds	r3, #36	; 0x24
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fc9f 	bl	8005a74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006136:	f7ff fead 	bl	8005e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800613a:	2301      	movs	r3, #1
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	; 0x38
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <xQueueGenericCreateStatic+0x52>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <xQueueGenericCreateStatic+0x56>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueGenericCreateStatic+0x58>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	623b      	str	r3, [r7, #32]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <xQueueGenericCreateStatic+0x7e>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <xQueueGenericCreateStatic+0x82>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <xQueueGenericCreateStatic+0x84>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	61fb      	str	r3, [r7, #28]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061e6:	2350      	movs	r3, #80	; 0x50
 80061e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b50      	cmp	r3, #80	; 0x50
 80061ee:	d00a      	beq.n	8006206 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	61bb      	str	r3, [r7, #24]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006206:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00d      	beq.n	800622e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800621a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4613      	mov	r3, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f83f 	bl	80062ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006230:	4618      	mov	r0, r3
 8006232:	3730      	adds	r7, #48	; 0x30
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericCreate+0x2a>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	613b      	str	r3, [r7, #16]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3350      	adds	r3, #80	; 0x50
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fa15 	bl	80056a0 <pvPortMalloc>
 8006276:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d011      	beq.n	80062a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	3350      	adds	r3, #80	; 0x50
 8006286:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006290:	79fa      	ldrb	r2, [r7, #7]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f805 	bl	80062ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062a2:	69bb      	ldr	r3, [r7, #24]
	}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e002      	b.n	80062ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062da:	2101      	movs	r1, #1
 80062dc:	69b8      	ldr	r0, [r7, #24]
 80062de:	f7ff fecb 	bl	8006078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00e      	beq.n	800631e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006312:	2300      	movs	r3, #0
 8006314:	2200      	movs	r2, #0
 8006316:	2100      	movs	r1, #0
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f8a1 	bl	8006460 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	4603      	mov	r3, r0
 800632e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006330:	2301      	movs	r3, #1
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	461a      	mov	r2, r3
 800633c:	6939      	ldr	r1, [r7, #16]
 800633e:	6978      	ldr	r0, [r7, #20]
 8006340:	f7ff ff7a 	bl	8006238 <xQueueGenericCreate>
 8006344:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ffd3 	bl	80062f2 <prvInitialiseMutex>

		return xNewQueue;
 800634c:	68fb      	ldr	r3, [r7, #12]
	}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006356:	b580      	push	{r7, lr}
 8006358:	b088      	sub	sp, #32
 800635a:	af02      	add	r7, sp, #8
 800635c:	4603      	mov	r3, r0
 800635e:	6039      	str	r1, [r7, #0]
 8006360:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006362:	2301      	movs	r3, #1
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2200      	movs	r2, #0
 8006372:	6939      	ldr	r1, [r7, #16]
 8006374:	6978      	ldr	r0, [r7, #20]
 8006376:	f7ff fee7 	bl	8006148 <xQueueGenericCreateStatic>
 800637a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff ffb8 	bl	80062f2 <prvInitialiseMutex>

		return xNewQueue;
 8006382:	68fb      	ldr	r3, [r7, #12]
	}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	689c      	ldr	r4, [r3, #8]
 80063b8:	f001 fb7c 	bl	8007ab4 <xTaskGetCurrentTaskHandle>
 80063bc:	4603      	mov	r3, r0
 80063be:	429c      	cmp	r4, r3
 80063c0:	d111      	bne.n	80063e6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	1e5a      	subs	r2, r3, #1
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80063d4:	2300      	movs	r3, #0
 80063d6:	2200      	movs	r2, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	6938      	ldr	r0, [r7, #16]
 80063dc:	f000 f840 	bl	8006460 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e001      	b.n	80063ea <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80063ea:	697b      	ldr	r3, [r7, #20]
	}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd90      	pop	{r4, r7, pc}

080063f4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	60fb      	str	r3, [r7, #12]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	689c      	ldr	r4, [r3, #8]
 8006422:	f001 fb47 	bl	8007ab4 <xTaskGetCurrentTaskHandle>
 8006426:	4603      	mov	r3, r0
 8006428:	429c      	cmp	r4, r3
 800642a:	d107      	bne.n	800643c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e00c      	b.n	8006456 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6938      	ldr	r0, [r7, #16]
 8006440:	f000 fa88 	bl	8006954 <xQueueSemaphoreTake>
 8006444:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006456:	697b      	ldr	r3, [r7, #20]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd90      	pop	{r4, r7, pc}

08006460 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08e      	sub	sp, #56	; 0x38
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800646e:	2300      	movs	r3, #0
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <xQueueGenericSend+0x32>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <xQueueGenericSend+0x40>
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xQueueGenericSend+0x44>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <xQueueGenericSend+0x46>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <xQueueGenericSend+0x60>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d103      	bne.n	80064ce <xQueueGenericSend+0x6e>
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <xQueueGenericSend+0x72>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <xQueueGenericSend+0x74>
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <xQueueGenericSend+0x8e>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	623b      	str	r3, [r7, #32]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ee:	f001 faf1 	bl	8007ad4 <xTaskGetSchedulerState>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <xQueueGenericSend+0x9e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <xQueueGenericSend+0xa2>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <xQueueGenericSend+0xa4>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <xQueueGenericSend+0xbe>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	61fb      	str	r3, [r7, #28]
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800651e:	f7ff fc89 	bl	8005e34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <xQueueGenericSend+0xd4>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d129      	bne.n	8006588 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800653a:	f000 fb2f 	bl	8006b9c <prvCopyDataToQueue>
 800653e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	3324      	adds	r3, #36	; 0x24
 800654c:	4618      	mov	r0, r3
 800654e:	f001 f8f3 	bl	8007738 <xTaskRemoveFromEventList>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d013      	beq.n	8006580 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006558:	4b3f      	ldr	r3, [pc, #252]	; (8006658 <xQueueGenericSend+0x1f8>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	e00a      	b.n	8006580 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006570:	4b39      	ldr	r3, [pc, #228]	; (8006658 <xQueueGenericSend+0x1f8>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006580:	f7ff fc88 	bl	8005e94 <vPortExitCritical>
				return pdPASS;
 8006584:	2301      	movs	r3, #1
 8006586:	e063      	b.n	8006650 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800658e:	f7ff fc81 	bl	8005e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006592:	2300      	movs	r3, #0
 8006594:	e05c      	b.n	8006650 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800659c:	f107 0314 	add.w	r3, r7, #20
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 f92d 	bl	8007800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065a6:	2301      	movs	r3, #1
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065aa:	f7ff fc73 	bl	8005e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ae:	f000 fe9f 	bl	80072f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065b2:	f7ff fc3f 	bl	8005e34 <vPortEnterCritical>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065bc:	b25b      	sxtb	r3, r3
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065c2:	d103      	bne.n	80065cc <xQueueGenericSend+0x16c>
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d2:	b25b      	sxtb	r3, r3
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d8:	d103      	bne.n	80065e2 <xQueueGenericSend+0x182>
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065e2:	f7ff fc57 	bl	8005e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065e6:	1d3a      	adds	r2, r7, #4
 80065e8:	f107 0314 	add.w	r3, r7, #20
 80065ec:	4611      	mov	r1, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 f91c 	bl	800782c <xTaskCheckForTimeOut>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d124      	bne.n	8006644 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065fc:	f000 fbc6 	bl	8006d8c <prvIsQueueFull>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d018      	beq.n	8006638 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	3310      	adds	r3, #16
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	4611      	mov	r1, r2
 800660e:	4618      	mov	r0, r3
 8006610:	f001 f842 	bl	8007698 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006616:	f000 fb51 	bl	8006cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800661a:	f000 fe77 	bl	800730c <xTaskResumeAll>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	f47f af7c 	bne.w	800651e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <xQueueGenericSend+0x1f8>)
 8006628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	e772      	b.n	800651e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800663a:	f000 fb3f 	bl	8006cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800663e:	f000 fe65 	bl	800730c <xTaskResumeAll>
 8006642:	e76c      	b.n	800651e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006646:	f000 fb39 	bl	8006cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800664a:	f000 fe5f 	bl	800730c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800664e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006650:	4618      	mov	r0, r3
 8006652:	3738      	adds	r7, #56	; 0x38
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b090      	sub	sp, #64	; 0x40
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d103      	bne.n	8006698 <xQueueGenericSendFromISR+0x3c>
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <xQueueGenericSendFromISR+0x40>
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <xQueueGenericSendFromISR+0x42>
 800669c:	2300      	movs	r3, #0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d103      	bne.n	80066c6 <xQueueGenericSendFromISR+0x6a>
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <xQueueGenericSendFromISR+0x6e>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueGenericSendFromISR+0x70>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	623b      	str	r3, [r7, #32]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066e6:	f7ff fc87 	bl	8005ff8 <vPortValidateInterruptPriority>
	__asm volatile
 80066ea:	f3ef 8211 	mrs	r2, BASEPRI
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	61fa      	str	r2, [r7, #28]
 8006700:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006702:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	429a      	cmp	r2, r3
 8006710:	d302      	bcc.n	8006718 <xQueueGenericSendFromISR+0xbc>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d12f      	bne.n	8006778 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800671e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800672e:	f000 fa35 	bl	8006b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006732:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800673a:	d112      	bne.n	8006762 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d016      	beq.n	8006772 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	3324      	adds	r3, #36	; 0x24
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fff5 	bl	8007738 <xTaskRemoveFromEventList>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00e      	beq.n	8006772 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00b      	beq.n	8006772 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e007      	b.n	8006772 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006766:	3301      	adds	r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	b25a      	sxtb	r2, r3
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006772:	2301      	movs	r3, #1
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006776:	e001      	b.n	800677c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006778:	2300      	movs	r3, #0
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f383 8811 	msr	BASEPRI, r3
}
 8006786:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800678a:	4618      	mov	r0, r3
 800678c:	3740      	adds	r7, #64	; 0x40
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08c      	sub	sp, #48	; 0x30
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <xQueueReceive+0x30>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	623b      	str	r3, [r7, #32]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <xQueueReceive+0x3e>
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <xQueueReceive+0x42>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <xQueueReceive+0x44>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <xQueueReceive+0x5e>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	61fb      	str	r3, [r7, #28]
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067f2:	f001 f96f 	bl	8007ad4 <xTaskGetSchedulerState>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <xQueueReceive+0x6e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <xQueueReceive+0x72>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <xQueueReceive+0x74>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xQueueReceive+0x8e>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	61bb      	str	r3, [r7, #24]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006822:	f7ff fb07 	bl	8005e34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01f      	beq.n	8006872 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006836:	f000 fa1b 	bl	8006c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00f      	beq.n	800686a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	3310      	adds	r3, #16
 800684e:	4618      	mov	r0, r3
 8006850:	f000 ff72 	bl	8007738 <xTaskRemoveFromEventList>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800685a:	4b3d      	ldr	r3, [pc, #244]	; (8006950 <xQueueReceive+0x1bc>)
 800685c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800686a:	f7ff fb13 	bl	8005e94 <vPortExitCritical>
				return pdPASS;
 800686e:	2301      	movs	r3, #1
 8006870:	e069      	b.n	8006946 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006878:	f7ff fb0c 	bl	8005e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800687c:	2300      	movs	r3, #0
 800687e:	e062      	b.n	8006946 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006886:	f107 0310 	add.w	r3, r7, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f000 ffb8 	bl	8007800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006894:	f7ff fafe 	bl	8005e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006898:	f000 fd2a 	bl	80072f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689c:	f7ff faca 	bl	8005e34 <vPortEnterCritical>
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a6:	b25b      	sxtb	r3, r3
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ac:	d103      	bne.n	80068b6 <xQueueReceive+0x122>
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c2:	d103      	bne.n	80068cc <xQueueReceive+0x138>
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068cc:	f7ff fae2 	bl	8005e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068d0:	1d3a      	adds	r2, r7, #4
 80068d2:	f107 0310 	add.w	r3, r7, #16
 80068d6:	4611      	mov	r1, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 ffa7 	bl	800782c <xTaskCheckForTimeOut>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d123      	bne.n	800692c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e6:	f000 fa3b 	bl	8006d60 <prvIsQueueEmpty>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fecd 	bl	8007698 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006900:	f000 f9dc 	bl	8006cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006904:	f000 fd02 	bl	800730c <xTaskResumeAll>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d189      	bne.n	8006822 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800690e:	4b10      	ldr	r3, [pc, #64]	; (8006950 <xQueueReceive+0x1bc>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e780      	b.n	8006822 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006922:	f000 f9cb 	bl	8006cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006926:	f000 fcf1 	bl	800730c <xTaskResumeAll>
 800692a:	e77a      	b.n	8006822 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800692c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692e:	f000 f9c5 	bl	8006cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 fceb 	bl	800730c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006938:	f000 fa12 	bl	8006d60 <prvIsQueueEmpty>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	f43f af6f 	beq.w	8006822 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006944:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006946:	4618      	mov	r0, r3
 8006948:	3730      	adds	r7, #48	; 0x30
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08e      	sub	sp, #56	; 0x38
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	623b      	str	r3, [r7, #32]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61fb      	str	r3, [r7, #28]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a4:	f001 f896 	bl	8007ad4 <xTaskGetSchedulerState>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <xQueueSemaphoreTake+0x60>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <xQueueSemaphoreTake+0x64>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <xQueueSemaphoreTake+0x66>
 80069b8:	2300      	movs	r3, #0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	61bb      	str	r3, [r7, #24]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069d4:	f7ff fa2e 	bl	8005e34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d024      	beq.n	8006a2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	1e5a      	subs	r2, r3, #1
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80069f4:	f001 f9e4 	bl	8007dc0 <pvTaskIncrementMutexHeldCount>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00f      	beq.n	8006a26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	3310      	adds	r3, #16
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fe94 	bl	8007738 <xTaskRemoveFromEventList>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a16:	4b54      	ldr	r3, [pc, #336]	; (8006b68 <xQueueSemaphoreTake+0x214>)
 8006a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a26:	f7ff fa35 	bl	8005e94 <vPortExitCritical>
				return pdPASS;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e097      	b.n	8006b5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d111      	bne.n	8006a58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	617b      	str	r3, [r7, #20]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a50:	f7ff fa20 	bl	8005e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a54:	2300      	movs	r3, #0
 8006a56:	e082      	b.n	8006b5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a5e:	f107 030c 	add.w	r3, r7, #12
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fecc 	bl	8007800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a6c:	f7ff fa12 	bl	8005e94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a70:	f000 fc3e 	bl	80072f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a74:	f7ff f9de 	bl	8005e34 <vPortEnterCritical>
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a84:	d103      	bne.n	8006a8e <xQueueSemaphoreTake+0x13a>
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a94:	b25b      	sxtb	r3, r3
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a9a:	d103      	bne.n	8006aa4 <xQueueSemaphoreTake+0x150>
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aa4:	f7ff f9f6 	bl	8005e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aa8:	463a      	mov	r2, r7
 8006aaa:	f107 030c 	add.w	r3, r7, #12
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 febb 	bl	800782c <xTaskCheckForTimeOut>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d132      	bne.n	8006b22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006abe:	f000 f94f 	bl	8006d60 <prvIsQueueEmpty>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d026      	beq.n	8006b16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ad0:	f7ff f9b0 	bl	8005e34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f819 	bl	8007b10 <xTaskPriorityInherit>
 8006ade:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ae0:	f7ff f9d8 	bl	8005e94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fdd3 	bl	8007698 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af4:	f000 f8e2 	bl	8006cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006af8:	f000 fc08 	bl	800730c <xTaskResumeAll>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f47f af68 	bne.w	80069d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b04:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <xQueueSemaphoreTake+0x214>)
 8006b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	e75e      	b.n	80069d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b18:	f000 f8d0 	bl	8006cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b1c:	f000 fbf6 	bl	800730c <xTaskResumeAll>
 8006b20:	e758      	b.n	80069d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b24:	f000 f8ca 	bl	8006cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b28:	f000 fbf0 	bl	800730c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b2e:	f000 f917 	bl	8006d60 <prvIsQueueEmpty>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f43f af4d 	beq.w	80069d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00d      	beq.n	8006b5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006b40:	f7ff f978 	bl	8005e34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b46:	f000 f811 	bl	8006b6c <prvGetDisinheritPriorityAfterTimeout>
 8006b4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 f8b2 	bl	8007cbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b58:	f7ff f99c 	bl	8005e94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3738      	adds	r7, #56	; 0x38
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d006      	beq.n	8006b8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e001      	b.n	8006b8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10d      	bne.n	8006bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d14d      	bne.n	8006c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 f80a 	bl	8007be0 <xTaskPriorityDisinherit>
 8006bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	609a      	str	r2, [r3, #8]
 8006bd4:	e043      	b.n	8006c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d119      	bne.n	8006c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6858      	ldr	r0, [r3, #4]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	461a      	mov	r2, r3
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	f001 fe9b 	bl	8008922 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	441a      	add	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d32b      	bcc.n	8006c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	e026      	b.n	8006c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68d8      	ldr	r0, [r3, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	f001 fe81 	bl	8008922 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	425b      	negs	r3, r3
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d207      	bcs.n	8006c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	425b      	negs	r3, r3
 8006c46:	441a      	add	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d105      	bne.n	8006c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c66:	697b      	ldr	r3, [r7, #20]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d018      	beq.n	8006cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	441a      	add	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d303      	bcc.n	8006ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68d9      	ldr	r1, [r3, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	461a      	mov	r2, r3
 8006cae:	6838      	ldr	r0, [r7, #0]
 8006cb0:	f001 fe37 	bl	8008922 <memcpy>
	}
}
 8006cb4:	bf00      	nop
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cc4:	f7ff f8b6 	bl	8005e34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cd0:	e011      	b.n	8006cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d012      	beq.n	8006d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3324      	adds	r3, #36	; 0x24
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fd2a 	bl	8007738 <xTaskRemoveFromEventList>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cea:	f000 fe01 	bl	80078f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dce9      	bgt.n	8006cd2 <prvUnlockQueue+0x16>
 8006cfe:	e000      	b.n	8006d02 <prvUnlockQueue+0x46>
					break;
 8006d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	22ff      	movs	r2, #255	; 0xff
 8006d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d0a:	f7ff f8c3 	bl	8005e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d0e:	f7ff f891 	bl	8005e34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d1a:	e011      	b.n	8006d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d012      	beq.n	8006d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3310      	adds	r3, #16
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fd05 	bl	8007738 <xTaskRemoveFromEventList>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d34:	f000 fddc 	bl	80078f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dce9      	bgt.n	8006d1c <prvUnlockQueue+0x60>
 8006d48:	e000      	b.n	8006d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	22ff      	movs	r2, #255	; 0xff
 8006d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d54:	f7ff f89e 	bl	8005e94 <vPortExitCritical>
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d68:	f7ff f864 	bl	8005e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e001      	b.n	8006d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d7e:	f7ff f889 	bl	8005e94 <vPortExitCritical>

	return xReturn;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d94:	f7ff f84e 	bl	8005e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d102      	bne.n	8006daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e001      	b.n	8006dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dae:	f7ff f871 	bl	8005e94 <vPortExitCritical>

	return xReturn;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e014      	b.n	8006df6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006dcc:	4a0f      	ldr	r2, [pc, #60]	; (8006e0c <vQueueAddToRegistry+0x50>)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10b      	bne.n	8006df0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006dd8:	490c      	ldr	r1, [pc, #48]	; (8006e0c <vQueueAddToRegistry+0x50>)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006de2:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <vQueueAddToRegistry+0x50>)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4413      	add	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dee:	e006      	b.n	8006dfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b07      	cmp	r3, #7
 8006dfa:	d9e7      	bls.n	8006dcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	2000c2d4 	.word	0x2000c2d4

08006e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e20:	f7ff f808 	bl	8005e34 <vPortEnterCritical>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e30:	d103      	bne.n	8006e3a <vQueueWaitForMessageRestricted+0x2a>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e46:	d103      	bne.n	8006e50 <vQueueWaitForMessageRestricted+0x40>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e50:	f7ff f820 	bl	8005e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	3324      	adds	r3, #36	; 0x24
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fc3b 	bl	80076e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e6a:	6978      	ldr	r0, [r7, #20]
 8006e6c:	f7ff ff26 	bl	8006cbc <prvUnlockQueue>
	}
 8006e70:	bf00      	nop
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08e      	sub	sp, #56	; 0x38
 8006e7c:	af04      	add	r7, sp, #16
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	623b      	str	r3, [r7, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <xTaskCreateStatic+0x46>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	61fb      	str	r3, [r7, #28]
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ebe:	235c      	movs	r3, #92	; 0x5c
 8006ec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ec6:	d00a      	beq.n	8006ede <xTaskCreateStatic+0x66>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	61bb      	str	r3, [r7, #24]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ede:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01e      	beq.n	8006f24 <xTaskCreateStatic+0xac>
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01b      	beq.n	8006f24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	2202      	movs	r2, #2
 8006efa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006efe:	2300      	movs	r3, #0
 8006f00:	9303      	str	r3, [sp, #12]
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	9302      	str	r3, [sp, #8]
 8006f06:	f107 0314 	add.w	r3, r7, #20
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f850 	bl	8006fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f1e:	f000 f8dd 	bl	80070dc <prvAddNewTaskToReadyList>
 8006f22:	e001      	b.n	8006f28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f28:	697b      	ldr	r3, [r7, #20]
	}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3728      	adds	r7, #40	; 0x28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b08c      	sub	sp, #48	; 0x30
 8006f36:	af04      	add	r7, sp, #16
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f42:	88fb      	ldrh	r3, [r7, #6]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fbaa 	bl	80056a0 <pvPortMalloc>
 8006f4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00e      	beq.n	8006f72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f54:	205c      	movs	r0, #92	; 0x5c
 8006f56:	f7fe fba3 	bl	80056a0 <pvPortMalloc>
 8006f5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
 8006f68:	e005      	b.n	8006f76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f6a:	6978      	ldr	r0, [r7, #20]
 8006f6c:	f7fe fc64 	bl	8005838 <vPortFree>
 8006f70:	e001      	b.n	8006f76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d017      	beq.n	8006fac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	2300      	movs	r3, #0
 8006f88:	9303      	str	r3, [sp, #12]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	9302      	str	r3, [sp, #8]
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f80e 	bl	8006fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fa0:	69f8      	ldr	r0, [r7, #28]
 8006fa2:	f000 f89b 	bl	80070dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e002      	b.n	8006fb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
	}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	21a5      	movs	r1, #165	; 0xa5
 8006fd6:	f001 fcb2 	bl	800893e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	f023 0307 	bic.w	r3, r3, #7
 8006ff2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	617b      	str	r3, [r7, #20]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d01f      	beq.n	800705a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800701a:	2300      	movs	r3, #0
 800701c:	61fb      	str	r3, [r7, #28]
 800701e:	e012      	b.n	8007046 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	7819      	ldrb	r1, [r3, #0]
 8007028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	3334      	adds	r3, #52	; 0x34
 8007030:	460a      	mov	r2, r1
 8007032:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d006      	beq.n	800704e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	3301      	adds	r3, #1
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	2b0f      	cmp	r3, #15
 800704a:	d9e9      	bls.n	8007020 <prvInitialiseNewTask+0x64>
 800704c:	e000      	b.n	8007050 <prvInitialiseNewTask+0x94>
			{
				break;
 800704e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007058:	e003      	b.n	8007062 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	2b37      	cmp	r3, #55	; 0x37
 8007066:	d901      	bls.n	800706c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007068:	2337      	movs	r3, #55	; 0x37
 800706a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007070:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007076:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	2200      	movs	r2, #0
 800707c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	3304      	adds	r3, #4
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fd16 	bl	8005ab4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	3318      	adds	r3, #24
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fd11 	bl	8005ab4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007096:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	2200      	movs	r2, #0
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	69b8      	ldr	r0, [r7, #24]
 80070bc:	f7fe fd8e 	bl	8005bdc <pxPortInitialiseStack>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d2:	bf00      	nop
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070e4:	f7fe fea6 	bl	8005e34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070e8:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <prvAddNewTaskToReadyList+0xc4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3301      	adds	r3, #1
 80070ee:	4a2c      	ldr	r2, [pc, #176]	; (80071a0 <prvAddNewTaskToReadyList+0xc4>)
 80070f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070f2:	4b2c      	ldr	r3, [pc, #176]	; (80071a4 <prvAddNewTaskToReadyList+0xc8>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070fa:	4a2a      	ldr	r2, [pc, #168]	; (80071a4 <prvAddNewTaskToReadyList+0xc8>)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007100:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <prvAddNewTaskToReadyList+0xc4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d110      	bne.n	800712a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007108:	f000 fc16 	bl	8007938 <prvInitialiseTaskLists>
 800710c:	e00d      	b.n	800712a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800710e:	4b26      	ldr	r3, [pc, #152]	; (80071a8 <prvAddNewTaskToReadyList+0xcc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007116:	4b23      	ldr	r3, [pc, #140]	; (80071a4 <prvAddNewTaskToReadyList+0xc8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	429a      	cmp	r2, r3
 8007122:	d802      	bhi.n	800712a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007124:	4a1f      	ldr	r2, [pc, #124]	; (80071a4 <prvAddNewTaskToReadyList+0xc8>)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800712a:	4b20      	ldr	r3, [pc, #128]	; (80071ac <prvAddNewTaskToReadyList+0xd0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	4a1e      	ldr	r2, [pc, #120]	; (80071ac <prvAddNewTaskToReadyList+0xd0>)
 8007132:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007134:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <prvAddNewTaskToReadyList+0xd0>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <prvAddNewTaskToReadyList+0xd4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d903      	bls.n	8007150 <prvAddNewTaskToReadyList+0x74>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <prvAddNewTaskToReadyList+0xd4>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <prvAddNewTaskToReadyList+0xd8>)
 800715e:	441a      	add	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7fe fcb1 	bl	8005ace <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800716c:	f7fe fe92 	bl	8005e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <prvAddNewTaskToReadyList+0xcc>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00e      	beq.n	8007196 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <prvAddNewTaskToReadyList+0xc8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	429a      	cmp	r2, r3
 8007184:	d207      	bcs.n	8007196 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007186:	4b0c      	ldr	r3, [pc, #48]	; (80071b8 <prvAddNewTaskToReadyList+0xdc>)
 8007188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	2000aa10 	.word	0x2000aa10
 80071a4:	2000a53c 	.word	0x2000a53c
 80071a8:	2000aa1c 	.word	0x2000aa1c
 80071ac:	2000aa2c 	.word	0x2000aa2c
 80071b0:	2000aa18 	.word	0x2000aa18
 80071b4:	2000a540 	.word	0x2000a540
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d017      	beq.n	80071fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071ce:	4b13      	ldr	r3, [pc, #76]	; (800721c <vTaskDelay+0x60>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <vTaskDelay+0x30>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	60bb      	str	r3, [r7, #8]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071ec:	f000 f880 	bl	80072f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071f0:	2100      	movs	r1, #0
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fdf8 	bl	8007de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071f8:	f000 f888 	bl	800730c <xTaskResumeAll>
 80071fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <vTaskDelay+0x64>)
 8007206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000aa38 	.word	0x2000aa38
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007232:	463a      	mov	r2, r7
 8007234:	1d39      	adds	r1, r7, #4
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe f9fc 	bl	8005638 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	9202      	str	r2, [sp, #8]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	2300      	movs	r3, #0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	2300      	movs	r3, #0
 8007250:	460a      	mov	r2, r1
 8007252:	4921      	ldr	r1, [pc, #132]	; (80072d8 <vTaskStartScheduler+0xb4>)
 8007254:	4821      	ldr	r0, [pc, #132]	; (80072dc <vTaskStartScheduler+0xb8>)
 8007256:	f7ff fe0f 	bl	8006e78 <xTaskCreateStatic>
 800725a:	4603      	mov	r3, r0
 800725c:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <vTaskStartScheduler+0xbc>)
 800725e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <vTaskStartScheduler+0xbc>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e001      	b.n	8007272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d102      	bne.n	800727e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007278:	f000 fe0a 	bl	8007e90 <xTimerCreateTimerTask>
 800727c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d116      	bne.n	80072b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	613b      	str	r3, [r7, #16]
}
 8007296:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007298:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <vTaskStartScheduler+0xc0>)
 800729a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072a0:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <vTaskStartScheduler+0xc4>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <vTaskStartScheduler+0xc8>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072ac:	f7fe fd20 	bl	8005cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072b0:	e00e      	b.n	80072d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b8:	d10a      	bne.n	80072d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	60fb      	str	r3, [r7, #12]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vTaskStartScheduler+0xaa>
}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	0800be34 	.word	0x0800be34
 80072dc:	08007909 	.word	0x08007909
 80072e0:	2000aa34 	.word	0x2000aa34
 80072e4:	2000aa30 	.word	0x2000aa30
 80072e8:	2000aa1c 	.word	0x2000aa1c
 80072ec:	2000aa14 	.word	0x2000aa14

080072f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072f4:	4b04      	ldr	r3, [pc, #16]	; (8007308 <vTaskSuspendAll+0x18>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a03      	ldr	r2, [pc, #12]	; (8007308 <vTaskSuspendAll+0x18>)
 80072fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072fe:	bf00      	nop
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	2000aa38 	.word	0x2000aa38

0800730c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800731a:	4b42      	ldr	r3, [pc, #264]	; (8007424 <xTaskResumeAll+0x118>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <xTaskResumeAll+0x2c>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	603b      	str	r3, [r7, #0]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007338:	f7fe fd7c 	bl	8005e34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800733c:	4b39      	ldr	r3, [pc, #228]	; (8007424 <xTaskResumeAll+0x118>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3b01      	subs	r3, #1
 8007342:	4a38      	ldr	r2, [pc, #224]	; (8007424 <xTaskResumeAll+0x118>)
 8007344:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007346:	4b37      	ldr	r3, [pc, #220]	; (8007424 <xTaskResumeAll+0x118>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d162      	bne.n	8007414 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800734e:	4b36      	ldr	r3, [pc, #216]	; (8007428 <xTaskResumeAll+0x11c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d05e      	beq.n	8007414 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007356:	e02f      	b.n	80073b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007358:	4b34      	ldr	r3, [pc, #208]	; (800742c <xTaskResumeAll+0x120>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3318      	adds	r3, #24
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fc0f 	bl	8005b88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3304      	adds	r3, #4
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fc0a 	bl	8005b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	4b2d      	ldr	r3, [pc, #180]	; (8007430 <xTaskResumeAll+0x124>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d903      	bls.n	8007388 <xTaskResumeAll+0x7c>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a2a      	ldr	r2, [pc, #168]	; (8007430 <xTaskResumeAll+0x124>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4a27      	ldr	r2, [pc, #156]	; (8007434 <xTaskResumeAll+0x128>)
 8007396:	441a      	add	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fb95 	bl	8005ace <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a8:	4b23      	ldr	r3, [pc, #140]	; (8007438 <xTaskResumeAll+0x12c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80073b2:	4b22      	ldr	r3, [pc, #136]	; (800743c <xTaskResumeAll+0x130>)
 80073b4:	2201      	movs	r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073b8:	4b1c      	ldr	r3, [pc, #112]	; (800742c <xTaskResumeAll+0x120>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1cb      	bne.n	8007358 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073c6:	f000 fb55 	bl	8007a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073ca:	4b1d      	ldr	r3, [pc, #116]	; (8007440 <xTaskResumeAll+0x134>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073d6:	f000 f847 	bl	8007468 <xTaskIncrementTick>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80073e0:	4b16      	ldr	r3, [pc, #88]	; (800743c <xTaskResumeAll+0x130>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f1      	bne.n	80073d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80073f2:	4b13      	ldr	r3, [pc, #76]	; (8007440 <xTaskResumeAll+0x134>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <xTaskResumeAll+0x130>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d009      	beq.n	8007414 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007404:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <xTaskResumeAll+0x138>)
 8007406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007414:	f7fe fd3e 	bl	8005e94 <vPortExitCritical>

	return xAlreadyYielded;
 8007418:	68bb      	ldr	r3, [r7, #8]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	2000aa38 	.word	0x2000aa38
 8007428:	2000aa10 	.word	0x2000aa10
 800742c:	2000a9d0 	.word	0x2000a9d0
 8007430:	2000aa18 	.word	0x2000aa18
 8007434:	2000a540 	.word	0x2000a540
 8007438:	2000a53c 	.word	0x2000a53c
 800743c:	2000aa24 	.word	0x2000aa24
 8007440:	2000aa20 	.word	0x2000aa20
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <xTaskGetTickCount+0x1c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007454:	687b      	ldr	r3, [r7, #4]
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000aa14 	.word	0x2000aa14

08007468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007472:	4b4f      	ldr	r3, [pc, #316]	; (80075b0 <xTaskIncrementTick+0x148>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 808f 	bne.w	800759a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800747c:	4b4d      	ldr	r3, [pc, #308]	; (80075b4 <xTaskIncrementTick+0x14c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007484:	4a4b      	ldr	r2, [pc, #300]	; (80075b4 <xTaskIncrementTick+0x14c>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d120      	bne.n	80074d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007490:	4b49      	ldr	r3, [pc, #292]	; (80075b8 <xTaskIncrementTick+0x150>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	603b      	str	r3, [r7, #0]
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <xTaskIncrementTick+0x46>
 80074b0:	4b41      	ldr	r3, [pc, #260]	; (80075b8 <xTaskIncrementTick+0x150>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	4b41      	ldr	r3, [pc, #260]	; (80075bc <xTaskIncrementTick+0x154>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a3f      	ldr	r2, [pc, #252]	; (80075b8 <xTaskIncrementTick+0x150>)
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	4a3f      	ldr	r2, [pc, #252]	; (80075bc <xTaskIncrementTick+0x154>)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	4b3e      	ldr	r3, [pc, #248]	; (80075c0 <xTaskIncrementTick+0x158>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	4a3d      	ldr	r2, [pc, #244]	; (80075c0 <xTaskIncrementTick+0x158>)
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	f000 fad1 	bl	8007a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074d2:	4b3c      	ldr	r3, [pc, #240]	; (80075c4 <xTaskIncrementTick+0x15c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d349      	bcc.n	8007570 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074dc:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <xTaskIncrementTick+0x150>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e6:	4b37      	ldr	r3, [pc, #220]	; (80075c4 <xTaskIncrementTick+0x15c>)
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074ec:	601a      	str	r2, [r3, #0]
					break;
 80074ee:	e03f      	b.n	8007570 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f0:	4b31      	ldr	r3, [pc, #196]	; (80075b8 <xTaskIncrementTick+0x150>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d203      	bcs.n	8007510 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007508:	4a2e      	ldr	r2, [pc, #184]	; (80075c4 <xTaskIncrementTick+0x15c>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800750e:	e02f      	b.n	8007570 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe fb37 	bl	8005b88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d004      	beq.n	800752c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	3318      	adds	r3, #24
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fb2e 	bl	8005b88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <xTaskIncrementTick+0x160>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d903      	bls.n	8007540 <xTaskIncrementTick+0xd8>
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	4a22      	ldr	r2, [pc, #136]	; (80075c8 <xTaskIncrementTick+0x160>)
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4a1f      	ldr	r2, [pc, #124]	; (80075cc <xTaskIncrementTick+0x164>)
 800754e:	441a      	add	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	3304      	adds	r3, #4
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f7fe fab9 	bl	8005ace <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <xTaskIncrementTick+0x168>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	429a      	cmp	r2, r3
 8007568:	d3b8      	bcc.n	80074dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800756a:	2301      	movs	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756e:	e7b5      	b.n	80074dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007570:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <xTaskIncrementTick+0x168>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007576:	4915      	ldr	r1, [pc, #84]	; (80075cc <xTaskIncrementTick+0x164>)
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d901      	bls.n	800758c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007588:	2301      	movs	r3, #1
 800758a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800758c:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <xTaskIncrementTick+0x16c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	e004      	b.n	80075a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800759a:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <xTaskIncrementTick+0x170>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3301      	adds	r3, #1
 80075a0:	4a0d      	ldr	r2, [pc, #52]	; (80075d8 <xTaskIncrementTick+0x170>)
 80075a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075a4:	697b      	ldr	r3, [r7, #20]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	2000aa38 	.word	0x2000aa38
 80075b4:	2000aa14 	.word	0x2000aa14
 80075b8:	2000a9c8 	.word	0x2000a9c8
 80075bc:	2000a9cc 	.word	0x2000a9cc
 80075c0:	2000aa28 	.word	0x2000aa28
 80075c4:	2000aa30 	.word	0x2000aa30
 80075c8:	2000aa18 	.word	0x2000aa18
 80075cc:	2000a540 	.word	0x2000a540
 80075d0:	2000a53c 	.word	0x2000a53c
 80075d4:	2000aa24 	.word	0x2000aa24
 80075d8:	2000aa20 	.word	0x2000aa20

080075dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075e2:	4b28      	ldr	r3, [pc, #160]	; (8007684 <vTaskSwitchContext+0xa8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075ea:	4b27      	ldr	r3, [pc, #156]	; (8007688 <vTaskSwitchContext+0xac>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075f0:	e041      	b.n	8007676 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80075f2:	4b25      	ldr	r3, [pc, #148]	; (8007688 <vTaskSwitchContext+0xac>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f8:	4b24      	ldr	r3, [pc, #144]	; (800768c <vTaskSwitchContext+0xb0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	e010      	b.n	8007622 <vTaskSwitchContext+0x46>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10a      	bne.n	800761c <vTaskSwitchContext+0x40>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	607b      	str	r3, [r7, #4]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <vTaskSwitchContext+0x3e>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3b01      	subs	r3, #1
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	491b      	ldr	r1, [pc, #108]	; (8007690 <vTaskSwitchContext+0xb4>)
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0e4      	beq.n	8007600 <vTaskSwitchContext+0x24>
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4a13      	ldr	r2, [pc, #76]	; (8007690 <vTaskSwitchContext+0xb4>)
 8007642:	4413      	add	r3, r2
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	605a      	str	r2, [r3, #4]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3308      	adds	r3, #8
 8007658:	429a      	cmp	r2, r3
 800765a:	d104      	bne.n	8007666 <vTaskSwitchContext+0x8a>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	605a      	str	r2, [r3, #4]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4a09      	ldr	r2, [pc, #36]	; (8007694 <vTaskSwitchContext+0xb8>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	4a06      	ldr	r2, [pc, #24]	; (800768c <vTaskSwitchContext+0xb0>)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6013      	str	r3, [r2, #0]
}
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	2000aa38 	.word	0x2000aa38
 8007688:	2000aa24 	.word	0x2000aa24
 800768c:	2000aa18 	.word	0x2000aa18
 8007690:	2000a540 	.word	0x2000a540
 8007694:	2000a53c 	.word	0x2000a53c

08007698 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076be:	4b07      	ldr	r3, [pc, #28]	; (80076dc <vTaskPlaceOnEventList+0x44>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3318      	adds	r3, #24
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fe fa25 	bl	8005b16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076cc:	2101      	movs	r1, #1
 80076ce:	6838      	ldr	r0, [r7, #0]
 80076d0:	f000 fb8a 	bl	8007de8 <prvAddCurrentTaskToDelayedList>
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	2000a53c 	.word	0x2000a53c

080076e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	617b      	str	r3, [r7, #20]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <vTaskPlaceOnEventListRestricted+0x54>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3318      	adds	r3, #24
 800770e:	4619      	mov	r1, r3
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7fe f9dc 	bl	8005ace <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800771c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007720:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	68b8      	ldr	r0, [r7, #8]
 8007726:	f000 fb5f 	bl	8007de8 <prvAddCurrentTaskToDelayedList>
	}
 800772a:	bf00      	nop
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	2000a53c 	.word	0x2000a53c

08007738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60fb      	str	r3, [r7, #12]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	3318      	adds	r3, #24
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fa0d 	bl	8005b88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800776e:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <xTaskRemoveFromEventList+0xb0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d11d      	bne.n	80077b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	3304      	adds	r3, #4
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fa04 	bl	8005b88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	4b19      	ldr	r3, [pc, #100]	; (80077ec <xTaskRemoveFromEventList+0xb4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d903      	bls.n	8007794 <xTaskRemoveFromEventList+0x5c>
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	4a16      	ldr	r2, [pc, #88]	; (80077ec <xTaskRemoveFromEventList+0xb4>)
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <xTaskRemoveFromEventList+0xb8>)
 80077a2:	441a      	add	r2, r3
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f7fe f98f 	bl	8005ace <vListInsertEnd>
 80077b0:	e005      	b.n	80077be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	3318      	adds	r3, #24
 80077b6:	4619      	mov	r1, r3
 80077b8:	480e      	ldr	r0, [pc, #56]	; (80077f4 <xTaskRemoveFromEventList+0xbc>)
 80077ba:	f7fe f988 	bl	8005ace <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c2:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <xTaskRemoveFromEventList+0xc0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d905      	bls.n	80077d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <xTaskRemoveFromEventList+0xc4>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e001      	b.n	80077dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077dc:	697b      	ldr	r3, [r7, #20]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	2000aa38 	.word	0x2000aa38
 80077ec:	2000aa18 	.word	0x2000aa18
 80077f0:	2000a540 	.word	0x2000a540
 80077f4:	2000a9d0 	.word	0x2000a9d0
 80077f8:	2000a53c 	.word	0x2000a53c
 80077fc:	2000aa24 	.word	0x2000aa24

08007800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007808:	4b06      	ldr	r3, [pc, #24]	; (8007824 <vTaskInternalSetTimeOutState+0x24>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <vTaskInternalSetTimeOutState+0x28>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	605a      	str	r2, [r3, #4]
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	2000aa28 	.word	0x2000aa28
 8007828:	2000aa14 	.word	0x2000aa14

0800782c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	613b      	str	r3, [r7, #16]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	60fb      	str	r3, [r7, #12]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800786e:	f7fe fae1 	bl	8005e34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007872:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <xTaskCheckForTimeOut+0xbc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788a:	d102      	bne.n	8007892 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800788c:	2300      	movs	r3, #0
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	e023      	b.n	80078da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4b15      	ldr	r3, [pc, #84]	; (80078ec <xTaskCheckForTimeOut+0xc0>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d007      	beq.n	80078ae <xTaskCheckForTimeOut+0x82>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d302      	bcc.n	80078ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078a8:	2301      	movs	r3, #1
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	e015      	b.n	80078da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d20b      	bcs.n	80078d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	1ad2      	subs	r2, r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff ff9b 	bl	8007800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	e004      	b.n	80078da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078d6:	2301      	movs	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078da:	f7fe fadb 	bl	8005e94 <vPortExitCritical>

	return xReturn;
 80078de:	69fb      	ldr	r3, [r7, #28]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3720      	adds	r7, #32
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	2000aa14 	.word	0x2000aa14
 80078ec:	2000aa28 	.word	0x2000aa28

080078f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078f4:	4b03      	ldr	r3, [pc, #12]	; (8007904 <vTaskMissedYield+0x14>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
}
 80078fa:	bf00      	nop
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	2000aa24 	.word	0x2000aa24

08007908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007910:	f000 f852 	bl	80079b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <prvIdleTask+0x28>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d9f9      	bls.n	8007910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <prvIdleTask+0x2c>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800792c:	e7f0      	b.n	8007910 <prvIdleTask+0x8>
 800792e:	bf00      	nop
 8007930:	2000a540 	.word	0x2000a540
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800793e:	2300      	movs	r3, #0
 8007940:	607b      	str	r3, [r7, #4]
 8007942:	e00c      	b.n	800795e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4a12      	ldr	r2, [pc, #72]	; (8007998 <prvInitialiseTaskLists+0x60>)
 8007950:	4413      	add	r3, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe f88e 	bl	8005a74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3301      	adds	r3, #1
 800795c:	607b      	str	r3, [r7, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b37      	cmp	r3, #55	; 0x37
 8007962:	d9ef      	bls.n	8007944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007964:	480d      	ldr	r0, [pc, #52]	; (800799c <prvInitialiseTaskLists+0x64>)
 8007966:	f7fe f885 	bl	8005a74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800796a:	480d      	ldr	r0, [pc, #52]	; (80079a0 <prvInitialiseTaskLists+0x68>)
 800796c:	f7fe f882 	bl	8005a74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007970:	480c      	ldr	r0, [pc, #48]	; (80079a4 <prvInitialiseTaskLists+0x6c>)
 8007972:	f7fe f87f 	bl	8005a74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007976:	480c      	ldr	r0, [pc, #48]	; (80079a8 <prvInitialiseTaskLists+0x70>)
 8007978:	f7fe f87c 	bl	8005a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800797c:	480b      	ldr	r0, [pc, #44]	; (80079ac <prvInitialiseTaskLists+0x74>)
 800797e:	f7fe f879 	bl	8005a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <prvInitialiseTaskLists+0x78>)
 8007984:	4a05      	ldr	r2, [pc, #20]	; (800799c <prvInitialiseTaskLists+0x64>)
 8007986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <prvInitialiseTaskLists+0x7c>)
 800798a:	4a05      	ldr	r2, [pc, #20]	; (80079a0 <prvInitialiseTaskLists+0x68>)
 800798c:	601a      	str	r2, [r3, #0]
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	2000a540 	.word	0x2000a540
 800799c:	2000a9a0 	.word	0x2000a9a0
 80079a0:	2000a9b4 	.word	0x2000a9b4
 80079a4:	2000a9d0 	.word	0x2000a9d0
 80079a8:	2000a9e4 	.word	0x2000a9e4
 80079ac:	2000a9fc 	.word	0x2000a9fc
 80079b0:	2000a9c8 	.word	0x2000a9c8
 80079b4:	2000a9cc 	.word	0x2000a9cc

080079b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079be:	e019      	b.n	80079f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079c0:	f7fe fa38 	bl	8005e34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c4:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <prvCheckTasksWaitingTermination+0x50>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3304      	adds	r3, #4
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe f8d9 	bl	8005b88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <prvCheckTasksWaitingTermination+0x54>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3b01      	subs	r3, #1
 80079dc:	4a0b      	ldr	r2, [pc, #44]	; (8007a0c <prvCheckTasksWaitingTermination+0x54>)
 80079de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <prvCheckTasksWaitingTermination+0x58>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <prvCheckTasksWaitingTermination+0x58>)
 80079e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079ea:	f7fe fa53 	bl	8005e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f810 	bl	8007a14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <prvCheckTasksWaitingTermination+0x58>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e1      	bne.n	80079c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	2000a9e4 	.word	0x2000a9e4
 8007a0c:	2000aa10 	.word	0x2000aa10
 8007a10:	2000a9f8 	.word	0x2000a9f8

08007a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d108      	bne.n	8007a38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fd ff04 	bl	8005838 <vPortFree>
				vPortFree( pxTCB );
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7fd ff01 	bl	8005838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a36:	e018      	b.n	8007a6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d103      	bne.n	8007a4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fd fef8 	bl	8005838 <vPortFree>
	}
 8007a48:	e00f      	b.n	8007a6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d00a      	beq.n	8007a6a <prvDeleteTCB+0x56>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	60fb      	str	r3, [r7, #12]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <prvDeleteTCB+0x54>
	}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a7a:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <prvResetNextTaskUnblockTime+0x38>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a84:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8007a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a8c:	e008      	b.n	8007aa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8e:	4b07      	ldr	r3, [pc, #28]	; (8007aac <prvResetNextTaskUnblockTime+0x38>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	4a04      	ldr	r2, [pc, #16]	; (8007ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8007a9e:	6013      	str	r3, [r2, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	2000a9c8 	.word	0x2000a9c8
 8007ab0:	2000aa30 	.word	0x2000aa30

08007ab4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ac0:	687b      	ldr	r3, [r7, #4]
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	2000a53c 	.word	0x2000a53c

08007ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <xTaskGetSchedulerState+0x34>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	e008      	b.n	8007afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae8:	4b08      	ldr	r3, [pc, #32]	; (8007b0c <xTaskGetSchedulerState+0x38>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d102      	bne.n	8007af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007af0:	2302      	movs	r3, #2
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	e001      	b.n	8007afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007afa:	687b      	ldr	r3, [r7, #4]
	}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	2000aa1c 	.word	0x2000aa1c
 8007b0c:	2000aa38 	.word	0x2000aa38

08007b10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d051      	beq.n	8007bca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2a:	4b2a      	ldr	r3, [pc, #168]	; (8007bd4 <xTaskPriorityInherit+0xc4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d241      	bcs.n	8007bb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	db06      	blt.n	8007b4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <xTaskPriorityInherit+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6959      	ldr	r1, [r3, #20]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4a1f      	ldr	r2, [pc, #124]	; (8007bd8 <xTaskPriorityInherit+0xc8>)
 8007b5c:	4413      	add	r3, r2
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	d122      	bne.n	8007ba8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe f80e 	bl	8005b88 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <xTaskPriorityInherit+0xc4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	4b18      	ldr	r3, [pc, #96]	; (8007bdc <xTaskPriorityInherit+0xcc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d903      	bls.n	8007b8a <xTaskPriorityInherit+0x7a>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b86:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <xTaskPriorityInherit+0xcc>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4a10      	ldr	r2, [pc, #64]	; (8007bd8 <xTaskPriorityInherit+0xc8>)
 8007b98:	441a      	add	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7fd ff94 	bl	8005ace <vListInsertEnd>
 8007ba6:	e004      	b.n	8007bb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <xTaskPriorityInherit+0xc4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	e008      	b.n	8007bca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <xTaskPriorityInherit+0xc4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d201      	bcs.n	8007bca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bca:	68fb      	ldr	r3, [r7, #12]
	}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	2000a53c 	.word	0x2000a53c
 8007bd8:	2000a540 	.word	0x2000a540
 8007bdc:	2000aa18 	.word	0x2000aa18

08007be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d056      	beq.n	8007ca4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bf6:	4b2e      	ldr	r3, [pc, #184]	; (8007cb0 <xTaskPriorityDisinherit+0xd0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d00a      	beq.n	8007c16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	60fb      	str	r3, [r7, #12]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60bb      	str	r3, [r7, #8]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d02c      	beq.n	8007ca4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d128      	bne.n	8007ca4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd ff96 	bl	8005b88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c74:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <xTaskPriorityDisinherit+0xd4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d903      	bls.n	8007c84 <xTaskPriorityDisinherit+0xa4>
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	4a0c      	ldr	r2, [pc, #48]	; (8007cb4 <xTaskPriorityDisinherit+0xd4>)
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <xTaskPriorityDisinherit+0xd8>)
 8007c92:	441a      	add	r2, r3
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	3304      	adds	r3, #4
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	f7fd ff17 	bl	8005ace <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ca4:	697b      	ldr	r3, [r7, #20]
	}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	2000a53c 	.word	0x2000a53c
 8007cb4:	2000aa18 	.word	0x2000aa18
 8007cb8:	2000a540 	.word	0x2000a540

08007cbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d06a      	beq.n	8007daa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	60fb      	str	r3, [r7, #12]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d902      	bls.n	8007d02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	e002      	b.n	8007d08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d04b      	beq.n	8007daa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d146      	bne.n	8007daa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d1c:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d10a      	bne.n	8007d3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60bb      	str	r3, [r7, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	db04      	blt.n	8007d5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	6959      	ldr	r1, [r3, #20]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4a13      	ldr	r2, [pc, #76]	; (8007db8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007d6a:	4413      	add	r3, r2
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	d11c      	bne.n	8007daa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fd ff07 	bl	8005b88 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d903      	bls.n	8007d8e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4a07      	ldr	r2, [pc, #28]	; (8007db8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007d9c:	441a      	add	r2, r3
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fd fe92 	bl	8005ace <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007daa:	bf00      	nop
 8007dac:	3720      	adds	r7, #32
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	2000a53c 	.word	0x2000a53c
 8007db8:	2000a540 	.word	0x2000a540
 8007dbc:	2000aa18 	.word	0x2000aa18

08007dc0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dd2:	3201      	adds	r2, #1
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007dd6:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
	}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	2000a53c 	.word	0x2000a53c

08007de8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007df2:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <prvAddCurrentTaskToDelayedList+0x90>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007df8:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fd fec2 	bl	8005b88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e0a:	d10a      	bne.n	8007e22 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e12:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4819      	ldr	r0, [pc, #100]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e1c:	f7fd fe57 	bl	8005ace <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e20:	e026      	b.n	8007e70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4413      	add	r3, r2
 8007e28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e2a:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d209      	bcs.n	8007e4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e3a:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4619      	mov	r1, r3
 8007e46:	4610      	mov	r0, r2
 8007e48:	f7fd fe65 	bl	8005b16 <vListInsert>
}
 8007e4c:	e010      	b.n	8007e70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f7fd fe5b 	bl	8005b16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d202      	bcs.n	8007e70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e6a:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	6013      	str	r3, [r2, #0]
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	2000aa14 	.word	0x2000aa14
 8007e7c:	2000a53c 	.word	0x2000a53c
 8007e80:	2000a9fc 	.word	0x2000a9fc
 8007e84:	2000a9cc 	.word	0x2000a9cc
 8007e88:	2000a9c8 	.word	0x2000a9c8
 8007e8c:	2000aa30 	.word	0x2000aa30

08007e90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e9a:	f000 fb07 	bl	80084ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e9e:	4b1c      	ldr	r3, [pc, #112]	; (8007f10 <xTimerCreateTimerTask+0x80>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d021      	beq.n	8007eea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007eae:	1d3a      	adds	r2, r7, #4
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	f107 030c 	add.w	r3, r7, #12
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fd fbd7 	bl	800566c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	9202      	str	r2, [sp, #8]
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	2302      	movs	r3, #2
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	460a      	mov	r2, r1
 8007ed0:	4910      	ldr	r1, [pc, #64]	; (8007f14 <xTimerCreateTimerTask+0x84>)
 8007ed2:	4811      	ldr	r0, [pc, #68]	; (8007f18 <xTimerCreateTimerTask+0x88>)
 8007ed4:	f7fe ffd0 	bl	8006e78 <xTaskCreateStatic>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	4a10      	ldr	r2, [pc, #64]	; (8007f1c <xTimerCreateTimerTask+0x8c>)
 8007edc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <xTimerCreateTimerTask+0x8c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	613b      	str	r3, [r7, #16]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f06:	697b      	ldr	r3, [r7, #20]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000aa6c 	.word	0x2000aa6c
 8007f14:	0800be3c 	.word	0x0800be3c
 8007f18:	08008055 	.word	0x08008055
 8007f1c:	2000aa70 	.word	0x2000aa70

08007f20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	; 0x28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	623b      	str	r3, [r7, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f4e:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <xTimerGenericCommand+0x98>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d02a      	beq.n	8007fac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b05      	cmp	r3, #5
 8007f66:	dc18      	bgt.n	8007f9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f68:	f7ff fdb4 	bl	8007ad4 <xTaskGetSchedulerState>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d109      	bne.n	8007f86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f72:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <xTimerGenericCommand+0x98>)
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	f107 0110 	add.w	r1, r7, #16
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7e:	f7fe fa6f 	bl	8006460 <xQueueGenericSend>
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24
 8007f84:	e012      	b.n	8007fac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <xTimerGenericCommand+0x98>)
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	f107 0110 	add.w	r1, r7, #16
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2200      	movs	r2, #0
 8007f92:	f7fe fa65 	bl	8006460 <xQueueGenericSend>
 8007f96:	6278      	str	r0, [r7, #36]	; 0x24
 8007f98:	e008      	b.n	8007fac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <xTimerGenericCommand+0x98>)
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	f107 0110 	add.w	r1, r7, #16
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	f7fe fb59 	bl	800665c <xQueueGenericSendFromISR>
 8007faa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3728      	adds	r7, #40	; 0x28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000aa6c 	.word	0x2000aa6c

08007fbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc6:	4b22      	ldr	r3, [pc, #136]	; (8008050 <prvProcessExpiredTimer+0x94>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fd fdd7 	bl	8005b88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d022      	beq.n	800802e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	699a      	ldr	r2, [r3, #24]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	18d1      	adds	r1, r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	6978      	ldr	r0, [r7, #20]
 8007ff6:	f000 f8d1 	bl	800819c <prvInsertTimerInActiveList>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01f      	beq.n	8008040 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008000:	2300      	movs	r3, #0
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	2300      	movs	r3, #0
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	2100      	movs	r1, #0
 800800a:	6978      	ldr	r0, [r7, #20]
 800800c:	f7ff ff88 	bl	8007f20 <xTimerGenericCommand>
 8008010:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d113      	bne.n	8008040 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	60fb      	str	r3, [r7, #12]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008034:	f023 0301 	bic.w	r3, r3, #1
 8008038:	b2da      	uxtb	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	6978      	ldr	r0, [r7, #20]
 8008046:	4798      	blx	r3
}
 8008048:	bf00      	nop
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	2000aa64 	.word	0x2000aa64

08008054 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800805c:	f107 0308 	add.w	r3, r7, #8
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f857 	bl	8008114 <prvGetNextExpireTime>
 8008066:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4619      	mov	r1, r3
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f803 	bl	8008078 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008072:	f000 f8d5 	bl	8008220 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008076:	e7f1      	b.n	800805c <prvTimerTask+0x8>

08008078 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008082:	f7ff f935 	bl	80072f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f866 	bl	800815c <prvSampleTimeNow>
 8008090:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d130      	bne.n	80080fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <prvProcessTimerOrBlockTask+0x3c>
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d806      	bhi.n	80080b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080a6:	f7ff f931 	bl	800730c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080aa:	68f9      	ldr	r1, [r7, #12]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff ff85 	bl	8007fbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080b2:	e024      	b.n	80080fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <prvProcessTimerOrBlockTask+0x90>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <prvProcessTimerOrBlockTask+0x50>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <prvProcessTimerOrBlockTask+0x52>
 80080c8:	2300      	movs	r3, #0
 80080ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <prvProcessTimerOrBlockTask+0x94>)
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4619      	mov	r1, r3
 80080da:	f7fe fe99 	bl	8006e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080de:	f7ff f915 	bl	800730c <xTaskResumeAll>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080e8:	4b09      	ldr	r3, [pc, #36]	; (8008110 <prvProcessTimerOrBlockTask+0x98>)
 80080ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	f3bf 8f6f 	isb	sy
}
 80080f8:	e001      	b.n	80080fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080fa:	f7ff f907 	bl	800730c <xTaskResumeAll>
}
 80080fe:	bf00      	nop
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	2000aa68 	.word	0x2000aa68
 800810c:	2000aa6c 	.word	0x2000aa6c
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800811c:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <prvGetNextExpireTime+0x44>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <prvGetNextExpireTime+0x16>
 8008126:	2201      	movs	r2, #1
 8008128:	e000      	b.n	800812c <prvGetNextExpireTime+0x18>
 800812a:	2200      	movs	r2, #0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <prvGetNextExpireTime+0x44>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e001      	b.n	8008148 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	2000aa64 	.word	0x2000aa64

0800815c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008164:	f7ff f970 	bl	8007448 <xTaskGetTickCount>
 8008168:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800816a:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <prvSampleTimeNow+0x3c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	429a      	cmp	r2, r3
 8008172:	d205      	bcs.n	8008180 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008174:	f000 f936 	bl	80083e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e002      	b.n	8008186 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008186:	4a04      	ldr	r2, [pc, #16]	; (8008198 <prvSampleTimeNow+0x3c>)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800818c:	68fb      	ldr	r3, [r7, #12]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	2000aa74 	.word	0x2000aa74

0800819c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d812      	bhi.n	80081e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad2      	subs	r2, r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d302      	bcc.n	80081d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e01b      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081d6:	4b10      	ldr	r3, [pc, #64]	; (8008218 <prvInsertTimerInActiveList+0x7c>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3304      	adds	r3, #4
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7fd fc98 	bl	8005b16 <vListInsert>
 80081e6:	e012      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d206      	bcs.n	80081fe <prvInsertTimerInActiveList+0x62>
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d302      	bcc.n	80081fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e007      	b.n	800820e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081fe:	4b07      	ldr	r3, [pc, #28]	; (800821c <prvInsertTimerInActiveList+0x80>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fd fc84 	bl	8005b16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800820e:	697b      	ldr	r3, [r7, #20]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	2000aa68 	.word	0x2000aa68
 800821c:	2000aa64 	.word	0x2000aa64

08008220 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08e      	sub	sp, #56	; 0x38
 8008224:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008226:	e0ca      	b.n	80083be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da18      	bge.n	8008260 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800822e:	1d3b      	adds	r3, r7, #4
 8008230:	3304      	adds	r3, #4
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61fb      	str	r3, [r7, #28]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008256:	6850      	ldr	r0, [r2, #4]
 8008258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825a:	6892      	ldr	r2, [r2, #8]
 800825c:	4611      	mov	r1, r2
 800825e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f2c0 80aa 	blt.w	80083bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	3304      	adds	r3, #4
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd fc85 	bl	8005b88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800827e:	463b      	mov	r3, r7
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff ff6b 	bl	800815c <prvSampleTimeNow>
 8008286:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b09      	cmp	r3, #9
 800828c:	f200 8097 	bhi.w	80083be <prvProcessReceivedCommands+0x19e>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <prvProcessReceivedCommands+0x78>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	08008335 	.word	0x08008335
 80082a8:	08008349 	.word	0x08008349
 80082ac:	08008393 	.word	0x08008393
 80082b0:	080082c1 	.word	0x080082c1
 80082b4:	080082c1 	.word	0x080082c1
 80082b8:	08008335 	.word	0x08008335
 80082bc:	08008349 	.word	0x08008349
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	18d1      	adds	r1, r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e0:	f7ff ff5c 	bl	800819c <prvInsertTimerInActiveList>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d069      	beq.n	80083be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d05e      	beq.n	80083be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	441a      	add	r2, r3
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	2100      	movs	r1, #0
 8008310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008312:	f7ff fe05 	bl	8007f20 <xTimerGenericCommand>
 8008316:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d14f      	bne.n	80083be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	61bb      	str	r3, [r7, #24]
}
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800833a:	f023 0301 	bic.w	r3, r3, #1
 800833e:	b2da      	uxtb	r2, r3
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008346:	e03a      	b.n	80083be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	617b      	str	r3, [r7, #20]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	18d1      	adds	r1, r2, r3
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800838a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838c:	f7ff ff06 	bl	800819c <prvInsertTimerInActiveList>
					break;
 8008390:	e015      	b.n	80083be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80083a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a2:	f7fd fa49 	bl	8005838 <vPortFree>
 80083a6:	e00a      	b.n	80083be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ae:	f023 0301 	bic.w	r3, r3, #1
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083ba:	e000      	b.n	80083be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80083bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083be:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <prvProcessReceivedCommands+0x1c0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	1d39      	adds	r1, r7, #4
 80083c4:	2200      	movs	r2, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe f9e4 	bl	8006794 <xQueueReceive>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f47f af2a 	bne.w	8008228 <prvProcessReceivedCommands+0x8>
	}
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	3730      	adds	r7, #48	; 0x30
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	2000aa6c 	.word	0x2000aa6c

080083e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ea:	e048      	b.n	800847e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083ec:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <prvSwitchTimerLists+0xc0>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f6:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <prvSwitchTimerLists+0xc0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3304      	adds	r3, #4
 8008404:	4618      	mov	r0, r3
 8008406:	f7fd fbbf 	bl	8005b88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d02e      	beq.n	800847e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4413      	add	r3, r2
 8008428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	429a      	cmp	r2, r3
 8008430:	d90e      	bls.n	8008450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800843e:	4b19      	ldr	r3, [pc, #100]	; (80084a4 <prvSwitchTimerLists+0xc0>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fd fb64 	bl	8005b16 <vListInsert>
 800844e:	e016      	b.n	800847e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	2100      	movs	r1, #0
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f7ff fd60 	bl	8007f20 <xTimerGenericCommand>
 8008460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	603b      	str	r3, [r7, #0]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <prvSwitchTimerLists+0xc0>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1b1      	bne.n	80083ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008488:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <prvSwitchTimerLists+0xc0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800848e:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <prvSwitchTimerLists+0xc4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a04      	ldr	r2, [pc, #16]	; (80084a4 <prvSwitchTimerLists+0xc0>)
 8008494:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008496:	4a04      	ldr	r2, [pc, #16]	; (80084a8 <prvSwitchTimerLists+0xc4>)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	6013      	str	r3, [r2, #0]
}
 800849c:	bf00      	nop
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	2000aa64 	.word	0x2000aa64
 80084a8:	2000aa68 	.word	0x2000aa68

080084ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084b2:	f7fd fcbf 	bl	8005e34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084b6:	4b15      	ldr	r3, [pc, #84]	; (800850c <prvCheckForValidListAndQueue+0x60>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d120      	bne.n	8008500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084be:	4814      	ldr	r0, [pc, #80]	; (8008510 <prvCheckForValidListAndQueue+0x64>)
 80084c0:	f7fd fad8 	bl	8005a74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084c4:	4813      	ldr	r0, [pc, #76]	; (8008514 <prvCheckForValidListAndQueue+0x68>)
 80084c6:	f7fd fad5 	bl	8005a74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084ca:	4b13      	ldr	r3, [pc, #76]	; (8008518 <prvCheckForValidListAndQueue+0x6c>)
 80084cc:	4a10      	ldr	r2, [pc, #64]	; (8008510 <prvCheckForValidListAndQueue+0x64>)
 80084ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084d0:	4b12      	ldr	r3, [pc, #72]	; (800851c <prvCheckForValidListAndQueue+0x70>)
 80084d2:	4a10      	ldr	r2, [pc, #64]	; (8008514 <prvCheckForValidListAndQueue+0x68>)
 80084d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084d6:	2300      	movs	r3, #0
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4b11      	ldr	r3, [pc, #68]	; (8008520 <prvCheckForValidListAndQueue+0x74>)
 80084dc:	4a11      	ldr	r2, [pc, #68]	; (8008524 <prvCheckForValidListAndQueue+0x78>)
 80084de:	2110      	movs	r1, #16
 80084e0:	200a      	movs	r0, #10
 80084e2:	f7fd fe31 	bl	8006148 <xQueueGenericCreateStatic>
 80084e6:	4603      	mov	r3, r0
 80084e8:	4a08      	ldr	r2, [pc, #32]	; (800850c <prvCheckForValidListAndQueue+0x60>)
 80084ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <prvCheckForValidListAndQueue+0x60>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <prvCheckForValidListAndQueue+0x60>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	490b      	ldr	r1, [pc, #44]	; (8008528 <prvCheckForValidListAndQueue+0x7c>)
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fc5e 	bl	8006dbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008500:	f7fd fcc8 	bl	8005e94 <vPortExitCritical>
}
 8008504:	bf00      	nop
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	2000aa6c 	.word	0x2000aa6c
 8008510:	2000aa3c 	.word	0x2000aa3c
 8008514:	2000aa50 	.word	0x2000aa50
 8008518:	2000aa64 	.word	0x2000aa64
 800851c:	2000aa68 	.word	0x2000aa68
 8008520:	2000ab18 	.word	0x2000ab18
 8008524:	2000aa78 	.word	0x2000aa78
 8008528:	0800be44 	.word	0x0800be44

0800852c <atoi>:
 800852c:	220a      	movs	r2, #10
 800852e:	2100      	movs	r1, #0
 8008530:	f001 b8e0 	b.w	80096f4 <strtol>

08008534 <__errno>:
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <__errno+0x8>)
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000010 	.word	0x20000010

08008540 <__sflush_r>:
 8008540:	898a      	ldrh	r2, [r1, #12]
 8008542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008546:	4605      	mov	r5, r0
 8008548:	0710      	lsls	r0, r2, #28
 800854a:	460c      	mov	r4, r1
 800854c:	d458      	bmi.n	8008600 <__sflush_r+0xc0>
 800854e:	684b      	ldr	r3, [r1, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc05      	bgt.n	8008560 <__sflush_r+0x20>
 8008554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	dc02      	bgt.n	8008560 <__sflush_r+0x20>
 800855a:	2000      	movs	r0, #0
 800855c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008562:	2e00      	cmp	r6, #0
 8008564:	d0f9      	beq.n	800855a <__sflush_r+0x1a>
 8008566:	2300      	movs	r3, #0
 8008568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800856c:	682f      	ldr	r7, [r5, #0]
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	d032      	beq.n	80085d8 <__sflush_r+0x98>
 8008572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	075a      	lsls	r2, r3, #29
 8008578:	d505      	bpl.n	8008586 <__sflush_r+0x46>
 800857a:	6863      	ldr	r3, [r4, #4]
 800857c:	1ac0      	subs	r0, r0, r3
 800857e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008580:	b10b      	cbz	r3, 8008586 <__sflush_r+0x46>
 8008582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008584:	1ac0      	subs	r0, r0, r3
 8008586:	2300      	movs	r3, #0
 8008588:	4602      	mov	r2, r0
 800858a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	4628      	mov	r0, r5
 8008590:	47b0      	blx	r6
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	d106      	bne.n	80085a6 <__sflush_r+0x66>
 8008598:	6829      	ldr	r1, [r5, #0]
 800859a:	291d      	cmp	r1, #29
 800859c:	d82c      	bhi.n	80085f8 <__sflush_r+0xb8>
 800859e:	4a2a      	ldr	r2, [pc, #168]	; (8008648 <__sflush_r+0x108>)
 80085a0:	40ca      	lsrs	r2, r1
 80085a2:	07d6      	lsls	r6, r2, #31
 80085a4:	d528      	bpl.n	80085f8 <__sflush_r+0xb8>
 80085a6:	2200      	movs	r2, #0
 80085a8:	6062      	str	r2, [r4, #4]
 80085aa:	04d9      	lsls	r1, r3, #19
 80085ac:	6922      	ldr	r2, [r4, #16]
 80085ae:	6022      	str	r2, [r4, #0]
 80085b0:	d504      	bpl.n	80085bc <__sflush_r+0x7c>
 80085b2:	1c42      	adds	r2, r0, #1
 80085b4:	d101      	bne.n	80085ba <__sflush_r+0x7a>
 80085b6:	682b      	ldr	r3, [r5, #0]
 80085b8:	b903      	cbnz	r3, 80085bc <__sflush_r+0x7c>
 80085ba:	6560      	str	r0, [r4, #84]	; 0x54
 80085bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085be:	602f      	str	r7, [r5, #0]
 80085c0:	2900      	cmp	r1, #0
 80085c2:	d0ca      	beq.n	800855a <__sflush_r+0x1a>
 80085c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c8:	4299      	cmp	r1, r3
 80085ca:	d002      	beq.n	80085d2 <__sflush_r+0x92>
 80085cc:	4628      	mov	r0, r5
 80085ce:	f000 f9bf 	bl	8008950 <_free_r>
 80085d2:	2000      	movs	r0, #0
 80085d4:	6360      	str	r0, [r4, #52]	; 0x34
 80085d6:	e7c1      	b.n	800855c <__sflush_r+0x1c>
 80085d8:	6a21      	ldr	r1, [r4, #32]
 80085da:	2301      	movs	r3, #1
 80085dc:	4628      	mov	r0, r5
 80085de:	47b0      	blx	r6
 80085e0:	1c41      	adds	r1, r0, #1
 80085e2:	d1c7      	bne.n	8008574 <__sflush_r+0x34>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0c4      	beq.n	8008574 <__sflush_r+0x34>
 80085ea:	2b1d      	cmp	r3, #29
 80085ec:	d001      	beq.n	80085f2 <__sflush_r+0xb2>
 80085ee:	2b16      	cmp	r3, #22
 80085f0:	d101      	bne.n	80085f6 <__sflush_r+0xb6>
 80085f2:	602f      	str	r7, [r5, #0]
 80085f4:	e7b1      	b.n	800855a <__sflush_r+0x1a>
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	e7ad      	b.n	800855c <__sflush_r+0x1c>
 8008600:	690f      	ldr	r7, [r1, #16]
 8008602:	2f00      	cmp	r7, #0
 8008604:	d0a9      	beq.n	800855a <__sflush_r+0x1a>
 8008606:	0793      	lsls	r3, r2, #30
 8008608:	680e      	ldr	r6, [r1, #0]
 800860a:	bf08      	it	eq
 800860c:	694b      	ldreq	r3, [r1, #20]
 800860e:	600f      	str	r7, [r1, #0]
 8008610:	bf18      	it	ne
 8008612:	2300      	movne	r3, #0
 8008614:	eba6 0807 	sub.w	r8, r6, r7
 8008618:	608b      	str	r3, [r1, #8]
 800861a:	f1b8 0f00 	cmp.w	r8, #0
 800861e:	dd9c      	ble.n	800855a <__sflush_r+0x1a>
 8008620:	6a21      	ldr	r1, [r4, #32]
 8008622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008624:	4643      	mov	r3, r8
 8008626:	463a      	mov	r2, r7
 8008628:	4628      	mov	r0, r5
 800862a:	47b0      	blx	r6
 800862c:	2800      	cmp	r0, #0
 800862e:	dc06      	bgt.n	800863e <__sflush_r+0xfe>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800863c:	e78e      	b.n	800855c <__sflush_r+0x1c>
 800863e:	4407      	add	r7, r0
 8008640:	eba8 0800 	sub.w	r8, r8, r0
 8008644:	e7e9      	b.n	800861a <__sflush_r+0xda>
 8008646:	bf00      	nop
 8008648:	20400001 	.word	0x20400001

0800864c <_fflush_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	690b      	ldr	r3, [r1, #16]
 8008650:	4605      	mov	r5, r0
 8008652:	460c      	mov	r4, r1
 8008654:	b913      	cbnz	r3, 800865c <_fflush_r+0x10>
 8008656:	2500      	movs	r5, #0
 8008658:	4628      	mov	r0, r5
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	b118      	cbz	r0, 8008666 <_fflush_r+0x1a>
 800865e:	6983      	ldr	r3, [r0, #24]
 8008660:	b90b      	cbnz	r3, 8008666 <_fflush_r+0x1a>
 8008662:	f000 f899 	bl	8008798 <__sinit>
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <_fflush_r+0x6c>)
 8008668:	429c      	cmp	r4, r3
 800866a:	d11b      	bne.n	80086a4 <_fflush_r+0x58>
 800866c:	686c      	ldr	r4, [r5, #4]
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0ef      	beq.n	8008656 <_fflush_r+0xa>
 8008676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008678:	07d0      	lsls	r0, r2, #31
 800867a:	d404      	bmi.n	8008686 <_fflush_r+0x3a>
 800867c:	0599      	lsls	r1, r3, #22
 800867e:	d402      	bmi.n	8008686 <_fflush_r+0x3a>
 8008680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008682:	f000 f94c 	bl	800891e <__retarget_lock_acquire_recursive>
 8008686:	4628      	mov	r0, r5
 8008688:	4621      	mov	r1, r4
 800868a:	f7ff ff59 	bl	8008540 <__sflush_r>
 800868e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008690:	07da      	lsls	r2, r3, #31
 8008692:	4605      	mov	r5, r0
 8008694:	d4e0      	bmi.n	8008658 <_fflush_r+0xc>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	059b      	lsls	r3, r3, #22
 800869a:	d4dd      	bmi.n	8008658 <_fflush_r+0xc>
 800869c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800869e:	f000 f93f 	bl	8008920 <__retarget_lock_release_recursive>
 80086a2:	e7d9      	b.n	8008658 <_fflush_r+0xc>
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <_fflush_r+0x70>)
 80086a6:	429c      	cmp	r4, r3
 80086a8:	d101      	bne.n	80086ae <_fflush_r+0x62>
 80086aa:	68ac      	ldr	r4, [r5, #8]
 80086ac:	e7df      	b.n	800866e <_fflush_r+0x22>
 80086ae:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <_fflush_r+0x74>)
 80086b0:	429c      	cmp	r4, r3
 80086b2:	bf08      	it	eq
 80086b4:	68ec      	ldreq	r4, [r5, #12]
 80086b6:	e7da      	b.n	800866e <_fflush_r+0x22>
 80086b8:	0800bf04 	.word	0x0800bf04
 80086bc:	0800bf24 	.word	0x0800bf24
 80086c0:	0800bee4 	.word	0x0800bee4

080086c4 <fflush>:
 80086c4:	4601      	mov	r1, r0
 80086c6:	b920      	cbnz	r0, 80086d2 <fflush+0xe>
 80086c8:	4b04      	ldr	r3, [pc, #16]	; (80086dc <fflush+0x18>)
 80086ca:	4905      	ldr	r1, [pc, #20]	; (80086e0 <fflush+0x1c>)
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	f000 b8e1 	b.w	8008894 <_fwalk_reent>
 80086d2:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <fflush+0x20>)
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7ff bfb9 	b.w	800864c <_fflush_r>
 80086da:	bf00      	nop
 80086dc:	0800bf44 	.word	0x0800bf44
 80086e0:	0800864d 	.word	0x0800864d
 80086e4:	20000010 	.word	0x20000010

080086e8 <std>:
 80086e8:	2300      	movs	r3, #0
 80086ea:	b510      	push	{r4, lr}
 80086ec:	4604      	mov	r4, r0
 80086ee:	e9c0 3300 	strd	r3, r3, [r0]
 80086f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086f6:	6083      	str	r3, [r0, #8]
 80086f8:	8181      	strh	r1, [r0, #12]
 80086fa:	6643      	str	r3, [r0, #100]	; 0x64
 80086fc:	81c2      	strh	r2, [r0, #14]
 80086fe:	6183      	str	r3, [r0, #24]
 8008700:	4619      	mov	r1, r3
 8008702:	2208      	movs	r2, #8
 8008704:	305c      	adds	r0, #92	; 0x5c
 8008706:	f000 f91a 	bl	800893e <memset>
 800870a:	4b05      	ldr	r3, [pc, #20]	; (8008720 <std+0x38>)
 800870c:	6263      	str	r3, [r4, #36]	; 0x24
 800870e:	4b05      	ldr	r3, [pc, #20]	; (8008724 <std+0x3c>)
 8008710:	62a3      	str	r3, [r4, #40]	; 0x28
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <std+0x40>)
 8008714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <std+0x44>)
 8008718:	6224      	str	r4, [r4, #32]
 800871a:	6323      	str	r3, [r4, #48]	; 0x30
 800871c:	bd10      	pop	{r4, pc}
 800871e:	bf00      	nop
 8008720:	080094f5 	.word	0x080094f5
 8008724:	08009517 	.word	0x08009517
 8008728:	0800954f 	.word	0x0800954f
 800872c:	08009573 	.word	0x08009573

08008730 <_cleanup_r>:
 8008730:	4901      	ldr	r1, [pc, #4]	; (8008738 <_cleanup_r+0x8>)
 8008732:	f000 b8af 	b.w	8008894 <_fwalk_reent>
 8008736:	bf00      	nop
 8008738:	0800864d 	.word	0x0800864d

0800873c <__sfmoreglue>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	1e4a      	subs	r2, r1, #1
 8008740:	2568      	movs	r5, #104	; 0x68
 8008742:	4355      	muls	r5, r2
 8008744:	460e      	mov	r6, r1
 8008746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800874a:	f000 f951 	bl	80089f0 <_malloc_r>
 800874e:	4604      	mov	r4, r0
 8008750:	b140      	cbz	r0, 8008764 <__sfmoreglue+0x28>
 8008752:	2100      	movs	r1, #0
 8008754:	e9c0 1600 	strd	r1, r6, [r0]
 8008758:	300c      	adds	r0, #12
 800875a:	60a0      	str	r0, [r4, #8]
 800875c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008760:	f000 f8ed 	bl	800893e <memset>
 8008764:	4620      	mov	r0, r4
 8008766:	bd70      	pop	{r4, r5, r6, pc}

08008768 <__sfp_lock_acquire>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__sfp_lock_acquire+0x8>)
 800876a:	f000 b8d8 	b.w	800891e <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	2000c31c 	.word	0x2000c31c

08008774 <__sfp_lock_release>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__sfp_lock_release+0x8>)
 8008776:	f000 b8d3 	b.w	8008920 <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	2000c31c 	.word	0x2000c31c

08008780 <__sinit_lock_acquire>:
 8008780:	4801      	ldr	r0, [pc, #4]	; (8008788 <__sinit_lock_acquire+0x8>)
 8008782:	f000 b8cc 	b.w	800891e <__retarget_lock_acquire_recursive>
 8008786:	bf00      	nop
 8008788:	2000c317 	.word	0x2000c317

0800878c <__sinit_lock_release>:
 800878c:	4801      	ldr	r0, [pc, #4]	; (8008794 <__sinit_lock_release+0x8>)
 800878e:	f000 b8c7 	b.w	8008920 <__retarget_lock_release_recursive>
 8008792:	bf00      	nop
 8008794:	2000c317 	.word	0x2000c317

08008798 <__sinit>:
 8008798:	b510      	push	{r4, lr}
 800879a:	4604      	mov	r4, r0
 800879c:	f7ff fff0 	bl	8008780 <__sinit_lock_acquire>
 80087a0:	69a3      	ldr	r3, [r4, #24]
 80087a2:	b11b      	cbz	r3, 80087ac <__sinit+0x14>
 80087a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a8:	f7ff bff0 	b.w	800878c <__sinit_lock_release>
 80087ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087b0:	6523      	str	r3, [r4, #80]	; 0x50
 80087b2:	4b13      	ldr	r3, [pc, #76]	; (8008800 <__sinit+0x68>)
 80087b4:	4a13      	ldr	r2, [pc, #76]	; (8008804 <__sinit+0x6c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	bf04      	itt	eq
 80087be:	2301      	moveq	r3, #1
 80087c0:	61a3      	streq	r3, [r4, #24]
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 f820 	bl	8008808 <__sfp>
 80087c8:	6060      	str	r0, [r4, #4]
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 f81c 	bl	8008808 <__sfp>
 80087d0:	60a0      	str	r0, [r4, #8]
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 f818 	bl	8008808 <__sfp>
 80087d8:	2200      	movs	r2, #0
 80087da:	60e0      	str	r0, [r4, #12]
 80087dc:	2104      	movs	r1, #4
 80087de:	6860      	ldr	r0, [r4, #4]
 80087e0:	f7ff ff82 	bl	80086e8 <std>
 80087e4:	68a0      	ldr	r0, [r4, #8]
 80087e6:	2201      	movs	r2, #1
 80087e8:	2109      	movs	r1, #9
 80087ea:	f7ff ff7d 	bl	80086e8 <std>
 80087ee:	68e0      	ldr	r0, [r4, #12]
 80087f0:	2202      	movs	r2, #2
 80087f2:	2112      	movs	r1, #18
 80087f4:	f7ff ff78 	bl	80086e8 <std>
 80087f8:	2301      	movs	r3, #1
 80087fa:	61a3      	str	r3, [r4, #24]
 80087fc:	e7d2      	b.n	80087a4 <__sinit+0xc>
 80087fe:	bf00      	nop
 8008800:	0800bf44 	.word	0x0800bf44
 8008804:	08008731 	.word	0x08008731

08008808 <__sfp>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	4607      	mov	r7, r0
 800880c:	f7ff ffac 	bl	8008768 <__sfp_lock_acquire>
 8008810:	4b1e      	ldr	r3, [pc, #120]	; (800888c <__sfp+0x84>)
 8008812:	681e      	ldr	r6, [r3, #0]
 8008814:	69b3      	ldr	r3, [r6, #24]
 8008816:	b913      	cbnz	r3, 800881e <__sfp+0x16>
 8008818:	4630      	mov	r0, r6
 800881a:	f7ff ffbd 	bl	8008798 <__sinit>
 800881e:	3648      	adds	r6, #72	; 0x48
 8008820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008824:	3b01      	subs	r3, #1
 8008826:	d503      	bpl.n	8008830 <__sfp+0x28>
 8008828:	6833      	ldr	r3, [r6, #0]
 800882a:	b30b      	cbz	r3, 8008870 <__sfp+0x68>
 800882c:	6836      	ldr	r6, [r6, #0]
 800882e:	e7f7      	b.n	8008820 <__sfp+0x18>
 8008830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008834:	b9d5      	cbnz	r5, 800886c <__sfp+0x64>
 8008836:	4b16      	ldr	r3, [pc, #88]	; (8008890 <__sfp+0x88>)
 8008838:	60e3      	str	r3, [r4, #12]
 800883a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800883e:	6665      	str	r5, [r4, #100]	; 0x64
 8008840:	f000 f86c 	bl	800891c <__retarget_lock_init_recursive>
 8008844:	f7ff ff96 	bl	8008774 <__sfp_lock_release>
 8008848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800884c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008850:	6025      	str	r5, [r4, #0]
 8008852:	61a5      	str	r5, [r4, #24]
 8008854:	2208      	movs	r2, #8
 8008856:	4629      	mov	r1, r5
 8008858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800885c:	f000 f86f 	bl	800893e <memset>
 8008860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008868:	4620      	mov	r0, r4
 800886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800886c:	3468      	adds	r4, #104	; 0x68
 800886e:	e7d9      	b.n	8008824 <__sfp+0x1c>
 8008870:	2104      	movs	r1, #4
 8008872:	4638      	mov	r0, r7
 8008874:	f7ff ff62 	bl	800873c <__sfmoreglue>
 8008878:	4604      	mov	r4, r0
 800887a:	6030      	str	r0, [r6, #0]
 800887c:	2800      	cmp	r0, #0
 800887e:	d1d5      	bne.n	800882c <__sfp+0x24>
 8008880:	f7ff ff78 	bl	8008774 <__sfp_lock_release>
 8008884:	230c      	movs	r3, #12
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	e7ee      	b.n	8008868 <__sfp+0x60>
 800888a:	bf00      	nop
 800888c:	0800bf44 	.word	0x0800bf44
 8008890:	ffff0001 	.word	0xffff0001

08008894 <_fwalk_reent>:
 8008894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008898:	4606      	mov	r6, r0
 800889a:	4688      	mov	r8, r1
 800889c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088a0:	2700      	movs	r7, #0
 80088a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088a6:	f1b9 0901 	subs.w	r9, r9, #1
 80088aa:	d505      	bpl.n	80088b8 <_fwalk_reent+0x24>
 80088ac:	6824      	ldr	r4, [r4, #0]
 80088ae:	2c00      	cmp	r4, #0
 80088b0:	d1f7      	bne.n	80088a2 <_fwalk_reent+0xe>
 80088b2:	4638      	mov	r0, r7
 80088b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088b8:	89ab      	ldrh	r3, [r5, #12]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d907      	bls.n	80088ce <_fwalk_reent+0x3a>
 80088be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088c2:	3301      	adds	r3, #1
 80088c4:	d003      	beq.n	80088ce <_fwalk_reent+0x3a>
 80088c6:	4629      	mov	r1, r5
 80088c8:	4630      	mov	r0, r6
 80088ca:	47c0      	blx	r8
 80088cc:	4307      	orrs	r7, r0
 80088ce:	3568      	adds	r5, #104	; 0x68
 80088d0:	e7e9      	b.n	80088a6 <_fwalk_reent+0x12>
	...

080088d4 <__libc_init_array>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4d0d      	ldr	r5, [pc, #52]	; (800890c <__libc_init_array+0x38>)
 80088d8:	4c0d      	ldr	r4, [pc, #52]	; (8008910 <__libc_init_array+0x3c>)
 80088da:	1b64      	subs	r4, r4, r5
 80088dc:	10a4      	asrs	r4, r4, #2
 80088de:	2600      	movs	r6, #0
 80088e0:	42a6      	cmp	r6, r4
 80088e2:	d109      	bne.n	80088f8 <__libc_init_array+0x24>
 80088e4:	4d0b      	ldr	r5, [pc, #44]	; (8008914 <__libc_init_array+0x40>)
 80088e6:	4c0c      	ldr	r4, [pc, #48]	; (8008918 <__libc_init_array+0x44>)
 80088e8:	f003 f886 	bl	800b9f8 <_init>
 80088ec:	1b64      	subs	r4, r4, r5
 80088ee:	10a4      	asrs	r4, r4, #2
 80088f0:	2600      	movs	r6, #0
 80088f2:	42a6      	cmp	r6, r4
 80088f4:	d105      	bne.n	8008902 <__libc_init_array+0x2e>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fc:	4798      	blx	r3
 80088fe:	3601      	adds	r6, #1
 8008900:	e7ee      	b.n	80088e0 <__libc_init_array+0xc>
 8008902:	f855 3b04 	ldr.w	r3, [r5], #4
 8008906:	4798      	blx	r3
 8008908:	3601      	adds	r6, #1
 800890a:	e7f2      	b.n	80088f2 <__libc_init_array+0x1e>
 800890c:	0800c2d4 	.word	0x0800c2d4
 8008910:	0800c2d4 	.word	0x0800c2d4
 8008914:	0800c2d4 	.word	0x0800c2d4
 8008918:	0800c2d8 	.word	0x0800c2d8

0800891c <__retarget_lock_init_recursive>:
 800891c:	4770      	bx	lr

0800891e <__retarget_lock_acquire_recursive>:
 800891e:	4770      	bx	lr

08008920 <__retarget_lock_release_recursive>:
 8008920:	4770      	bx	lr

08008922 <memcpy>:
 8008922:	440a      	add	r2, r1
 8008924:	4291      	cmp	r1, r2
 8008926:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800892a:	d100      	bne.n	800892e <memcpy+0xc>
 800892c:	4770      	bx	lr
 800892e:	b510      	push	{r4, lr}
 8008930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008938:	4291      	cmp	r1, r2
 800893a:	d1f9      	bne.n	8008930 <memcpy+0xe>
 800893c:	bd10      	pop	{r4, pc}

0800893e <memset>:
 800893e:	4402      	add	r2, r0
 8008940:	4603      	mov	r3, r0
 8008942:	4293      	cmp	r3, r2
 8008944:	d100      	bne.n	8008948 <memset+0xa>
 8008946:	4770      	bx	lr
 8008948:	f803 1b01 	strb.w	r1, [r3], #1
 800894c:	e7f9      	b.n	8008942 <memset+0x4>
	...

08008950 <_free_r>:
 8008950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008952:	2900      	cmp	r1, #0
 8008954:	d048      	beq.n	80089e8 <_free_r+0x98>
 8008956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800895a:	9001      	str	r0, [sp, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f1a1 0404 	sub.w	r4, r1, #4
 8008962:	bfb8      	it	lt
 8008964:	18e4      	addlt	r4, r4, r3
 8008966:	f001 fec7 	bl	800a6f8 <__malloc_lock>
 800896a:	4a20      	ldr	r2, [pc, #128]	; (80089ec <_free_r+0x9c>)
 800896c:	9801      	ldr	r0, [sp, #4]
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	4615      	mov	r5, r2
 8008972:	b933      	cbnz	r3, 8008982 <_free_r+0x32>
 8008974:	6063      	str	r3, [r4, #4]
 8008976:	6014      	str	r4, [r2, #0]
 8008978:	b003      	add	sp, #12
 800897a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800897e:	f001 bec1 	b.w	800a704 <__malloc_unlock>
 8008982:	42a3      	cmp	r3, r4
 8008984:	d90b      	bls.n	800899e <_free_r+0x4e>
 8008986:	6821      	ldr	r1, [r4, #0]
 8008988:	1862      	adds	r2, r4, r1
 800898a:	4293      	cmp	r3, r2
 800898c:	bf04      	itt	eq
 800898e:	681a      	ldreq	r2, [r3, #0]
 8008990:	685b      	ldreq	r3, [r3, #4]
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	bf04      	itt	eq
 8008996:	1852      	addeq	r2, r2, r1
 8008998:	6022      	streq	r2, [r4, #0]
 800899a:	602c      	str	r4, [r5, #0]
 800899c:	e7ec      	b.n	8008978 <_free_r+0x28>
 800899e:	461a      	mov	r2, r3
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	b10b      	cbz	r3, 80089a8 <_free_r+0x58>
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d9fa      	bls.n	800899e <_free_r+0x4e>
 80089a8:	6811      	ldr	r1, [r2, #0]
 80089aa:	1855      	adds	r5, r2, r1
 80089ac:	42a5      	cmp	r5, r4
 80089ae:	d10b      	bne.n	80089c8 <_free_r+0x78>
 80089b0:	6824      	ldr	r4, [r4, #0]
 80089b2:	4421      	add	r1, r4
 80089b4:	1854      	adds	r4, r2, r1
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	6011      	str	r1, [r2, #0]
 80089ba:	d1dd      	bne.n	8008978 <_free_r+0x28>
 80089bc:	681c      	ldr	r4, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	6053      	str	r3, [r2, #4]
 80089c2:	4421      	add	r1, r4
 80089c4:	6011      	str	r1, [r2, #0]
 80089c6:	e7d7      	b.n	8008978 <_free_r+0x28>
 80089c8:	d902      	bls.n	80089d0 <_free_r+0x80>
 80089ca:	230c      	movs	r3, #12
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	e7d3      	b.n	8008978 <_free_r+0x28>
 80089d0:	6825      	ldr	r5, [r4, #0]
 80089d2:	1961      	adds	r1, r4, r5
 80089d4:	428b      	cmp	r3, r1
 80089d6:	bf04      	itt	eq
 80089d8:	6819      	ldreq	r1, [r3, #0]
 80089da:	685b      	ldreq	r3, [r3, #4]
 80089dc:	6063      	str	r3, [r4, #4]
 80089de:	bf04      	itt	eq
 80089e0:	1949      	addeq	r1, r1, r5
 80089e2:	6021      	streq	r1, [r4, #0]
 80089e4:	6054      	str	r4, [r2, #4]
 80089e6:	e7c7      	b.n	8008978 <_free_r+0x28>
 80089e8:	b003      	add	sp, #12
 80089ea:	bd30      	pop	{r4, r5, pc}
 80089ec:	2000ab68 	.word	0x2000ab68

080089f0 <_malloc_r>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	1ccd      	adds	r5, r1, #3
 80089f4:	f025 0503 	bic.w	r5, r5, #3
 80089f8:	3508      	adds	r5, #8
 80089fa:	2d0c      	cmp	r5, #12
 80089fc:	bf38      	it	cc
 80089fe:	250c      	movcc	r5, #12
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	4606      	mov	r6, r0
 8008a04:	db01      	blt.n	8008a0a <_malloc_r+0x1a>
 8008a06:	42a9      	cmp	r1, r5
 8008a08:	d903      	bls.n	8008a12 <_malloc_r+0x22>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	2000      	movs	r0, #0
 8008a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a12:	f001 fe71 	bl	800a6f8 <__malloc_lock>
 8008a16:	4921      	ldr	r1, [pc, #132]	; (8008a9c <_malloc_r+0xac>)
 8008a18:	680a      	ldr	r2, [r1, #0]
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	b99c      	cbnz	r4, 8008a46 <_malloc_r+0x56>
 8008a1e:	4f20      	ldr	r7, [pc, #128]	; (8008aa0 <_malloc_r+0xb0>)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	b923      	cbnz	r3, 8008a2e <_malloc_r+0x3e>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 fd34 	bl	8009494 <_sbrk_r>
 8008a2c:	6038      	str	r0, [r7, #0]
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4630      	mov	r0, r6
 8008a32:	f000 fd2f 	bl	8009494 <_sbrk_r>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	d123      	bne.n	8008a82 <_malloc_r+0x92>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	6033      	str	r3, [r6, #0]
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f001 fe60 	bl	800a704 <__malloc_unlock>
 8008a44:	e7e3      	b.n	8008a0e <_malloc_r+0x1e>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	1b5b      	subs	r3, r3, r5
 8008a4a:	d417      	bmi.n	8008a7c <_malloc_r+0x8c>
 8008a4c:	2b0b      	cmp	r3, #11
 8008a4e:	d903      	bls.n	8008a58 <_malloc_r+0x68>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	441c      	add	r4, r3
 8008a54:	6025      	str	r5, [r4, #0]
 8008a56:	e004      	b.n	8008a62 <_malloc_r+0x72>
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	42a2      	cmp	r2, r4
 8008a5c:	bf0c      	ite	eq
 8008a5e:	600b      	streq	r3, [r1, #0]
 8008a60:	6053      	strne	r3, [r2, #4]
 8008a62:	4630      	mov	r0, r6
 8008a64:	f001 fe4e 	bl	800a704 <__malloc_unlock>
 8008a68:	f104 000b 	add.w	r0, r4, #11
 8008a6c:	1d23      	adds	r3, r4, #4
 8008a6e:	f020 0007 	bic.w	r0, r0, #7
 8008a72:	1ac2      	subs	r2, r0, r3
 8008a74:	d0cc      	beq.n	8008a10 <_malloc_r+0x20>
 8008a76:	1a1b      	subs	r3, r3, r0
 8008a78:	50a3      	str	r3, [r4, r2]
 8008a7a:	e7c9      	b.n	8008a10 <_malloc_r+0x20>
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	6864      	ldr	r4, [r4, #4]
 8008a80:	e7cc      	b.n	8008a1c <_malloc_r+0x2c>
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d0e3      	beq.n	8008a54 <_malloc_r+0x64>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f000 fd00 	bl	8009494 <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d1dd      	bne.n	8008a54 <_malloc_r+0x64>
 8008a98:	e7cf      	b.n	8008a3a <_malloc_r+0x4a>
 8008a9a:	bf00      	nop
 8008a9c:	2000ab68 	.word	0x2000ab68
 8008aa0:	2000ab6c 	.word	0x2000ab6c

08008aa4 <__cvt>:
 8008aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	ec55 4b10 	vmov	r4, r5, d0
 8008aac:	2d00      	cmp	r5, #0
 8008aae:	460e      	mov	r6, r1
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	462b      	mov	r3, r5
 8008ab4:	bfbb      	ittet	lt
 8008ab6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008aba:	461d      	movlt	r5, r3
 8008abc:	2300      	movge	r3, #0
 8008abe:	232d      	movlt	r3, #45	; 0x2d
 8008ac0:	700b      	strb	r3, [r1, #0]
 8008ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ac8:	4691      	mov	r9, r2
 8008aca:	f023 0820 	bic.w	r8, r3, #32
 8008ace:	bfbc      	itt	lt
 8008ad0:	4622      	movlt	r2, r4
 8008ad2:	4614      	movlt	r4, r2
 8008ad4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ad8:	d005      	beq.n	8008ae6 <__cvt+0x42>
 8008ada:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ade:	d100      	bne.n	8008ae2 <__cvt+0x3e>
 8008ae0:	3601      	adds	r6, #1
 8008ae2:	2102      	movs	r1, #2
 8008ae4:	e000      	b.n	8008ae8 <__cvt+0x44>
 8008ae6:	2103      	movs	r1, #3
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	ab02      	add	r3, sp, #8
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	ec45 4b10 	vmov	d0, r4, r5
 8008af4:	4653      	mov	r3, sl
 8008af6:	4632      	mov	r2, r6
 8008af8:	f000 ff76 	bl	80099e8 <_dtoa_r>
 8008afc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b00:	4607      	mov	r7, r0
 8008b02:	d102      	bne.n	8008b0a <__cvt+0x66>
 8008b04:	f019 0f01 	tst.w	r9, #1
 8008b08:	d022      	beq.n	8008b50 <__cvt+0xac>
 8008b0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b0e:	eb07 0906 	add.w	r9, r7, r6
 8008b12:	d110      	bne.n	8008b36 <__cvt+0x92>
 8008b14:	783b      	ldrb	r3, [r7, #0]
 8008b16:	2b30      	cmp	r3, #48	; 0x30
 8008b18:	d10a      	bne.n	8008b30 <__cvt+0x8c>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 ffd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b26:	b918      	cbnz	r0, 8008b30 <__cvt+0x8c>
 8008b28:	f1c6 0601 	rsb	r6, r6, #1
 8008b2c:	f8ca 6000 	str.w	r6, [sl]
 8008b30:	f8da 3000 	ldr.w	r3, [sl]
 8008b34:	4499      	add	r9, r3
 8008b36:	2200      	movs	r2, #0
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	f7f7 ffcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b42:	b108      	cbz	r0, 8008b48 <__cvt+0xa4>
 8008b44:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b48:	2230      	movs	r2, #48	; 0x30
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	454b      	cmp	r3, r9
 8008b4e:	d307      	bcc.n	8008b60 <__cvt+0xbc>
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b54:	1bdb      	subs	r3, r3, r7
 8008b56:	4638      	mov	r0, r7
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	b004      	add	sp, #16
 8008b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b60:	1c59      	adds	r1, r3, #1
 8008b62:	9103      	str	r1, [sp, #12]
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e7f0      	b.n	8008b4a <__cvt+0xa6>

08008b68 <__exponent>:
 8008b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	bfb8      	it	lt
 8008b70:	4249      	neglt	r1, r1
 8008b72:	f803 2b02 	strb.w	r2, [r3], #2
 8008b76:	bfb4      	ite	lt
 8008b78:	222d      	movlt	r2, #45	; 0x2d
 8008b7a:	222b      	movge	r2, #43	; 0x2b
 8008b7c:	2909      	cmp	r1, #9
 8008b7e:	7042      	strb	r2, [r0, #1]
 8008b80:	dd2a      	ble.n	8008bd8 <__exponent+0x70>
 8008b82:	f10d 0407 	add.w	r4, sp, #7
 8008b86:	46a4      	mov	ip, r4
 8008b88:	270a      	movs	r7, #10
 8008b8a:	46a6      	mov	lr, r4
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b92:	fb07 1516 	mls	r5, r7, r6, r1
 8008b96:	3530      	adds	r5, #48	; 0x30
 8008b98:	2a63      	cmp	r2, #99	; 0x63
 8008b9a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	dcf1      	bgt.n	8008b8a <__exponent+0x22>
 8008ba6:	3130      	adds	r1, #48	; 0x30
 8008ba8:	f1ae 0502 	sub.w	r5, lr, #2
 8008bac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bb0:	1c44      	adds	r4, r0, #1
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4561      	cmp	r1, ip
 8008bb6:	d30a      	bcc.n	8008bce <__exponent+0x66>
 8008bb8:	f10d 0209 	add.w	r2, sp, #9
 8008bbc:	eba2 020e 	sub.w	r2, r2, lr
 8008bc0:	4565      	cmp	r5, ip
 8008bc2:	bf88      	it	hi
 8008bc4:	2200      	movhi	r2, #0
 8008bc6:	4413      	add	r3, r2
 8008bc8:	1a18      	subs	r0, r3, r0
 8008bca:	b003      	add	sp, #12
 8008bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008bd6:	e7ed      	b.n	8008bb4 <__exponent+0x4c>
 8008bd8:	2330      	movs	r3, #48	; 0x30
 8008bda:	3130      	adds	r1, #48	; 0x30
 8008bdc:	7083      	strb	r3, [r0, #2]
 8008bde:	70c1      	strb	r1, [r0, #3]
 8008be0:	1d03      	adds	r3, r0, #4
 8008be2:	e7f1      	b.n	8008bc8 <__exponent+0x60>

08008be4 <_printf_float>:
 8008be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	ed2d 8b02 	vpush	{d8}
 8008bec:	b08d      	sub	sp, #52	; 0x34
 8008bee:	460c      	mov	r4, r1
 8008bf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bf4:	4616      	mov	r6, r2
 8008bf6:	461f      	mov	r7, r3
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	f001 fce1 	bl	800a5c0 <_localeconv_r>
 8008bfe:	f8d0 a000 	ldr.w	sl, [r0]
 8008c02:	4650      	mov	r0, sl
 8008c04:	f7f7 faec 	bl	80001e0 <strlen>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	9305      	str	r3, [sp, #20]
 8008c10:	f8d8 3000 	ldr.w	r3, [r8]
 8008c14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c18:	3307      	adds	r3, #7
 8008c1a:	f023 0307 	bic.w	r3, r3, #7
 8008c1e:	f103 0208 	add.w	r2, r3, #8
 8008c22:	f8c8 2000 	str.w	r2, [r8]
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c36:	9307      	str	r3, [sp, #28]
 8008c38:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c3c:	ee08 0a10 	vmov	s16, r0
 8008c40:	4b9f      	ldr	r3, [pc, #636]	; (8008ec0 <_printf_float+0x2dc>)
 8008c42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c4a:	f7f7 ff77 	bl	8000b3c <__aeabi_dcmpun>
 8008c4e:	bb88      	cbnz	r0, 8008cb4 <_printf_float+0xd0>
 8008c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c54:	4b9a      	ldr	r3, [pc, #616]	; (8008ec0 <_printf_float+0x2dc>)
 8008c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c5a:	f7f7 ff51 	bl	8000b00 <__aeabi_dcmple>
 8008c5e:	bb48      	cbnz	r0, 8008cb4 <_printf_float+0xd0>
 8008c60:	2200      	movs	r2, #0
 8008c62:	2300      	movs	r3, #0
 8008c64:	4640      	mov	r0, r8
 8008c66:	4649      	mov	r1, r9
 8008c68:	f7f7 ff40 	bl	8000aec <__aeabi_dcmplt>
 8008c6c:	b110      	cbz	r0, 8008c74 <_printf_float+0x90>
 8008c6e:	232d      	movs	r3, #45	; 0x2d
 8008c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c74:	4b93      	ldr	r3, [pc, #588]	; (8008ec4 <_printf_float+0x2e0>)
 8008c76:	4894      	ldr	r0, [pc, #592]	; (8008ec8 <_printf_float+0x2e4>)
 8008c78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c7c:	bf94      	ite	ls
 8008c7e:	4698      	movls	r8, r3
 8008c80:	4680      	movhi	r8, r0
 8008c82:	2303      	movs	r3, #3
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	9b05      	ldr	r3, [sp, #20]
 8008c88:	f023 0204 	bic.w	r2, r3, #4
 8008c8c:	6022      	str	r2, [r4, #0]
 8008c8e:	f04f 0900 	mov.w	r9, #0
 8008c92:	9700      	str	r7, [sp, #0]
 8008c94:	4633      	mov	r3, r6
 8008c96:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f000 f9d8 	bl	8009050 <_printf_common>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f040 8090 	bne.w	8008dc6 <_printf_float+0x1e2>
 8008ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008caa:	b00d      	add	sp, #52	; 0x34
 8008cac:	ecbd 8b02 	vpop	{d8}
 8008cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4649      	mov	r1, r9
 8008cbc:	f7f7 ff3e 	bl	8000b3c <__aeabi_dcmpun>
 8008cc0:	b140      	cbz	r0, 8008cd4 <_printf_float+0xf0>
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfbc      	itt	lt
 8008cc8:	232d      	movlt	r3, #45	; 0x2d
 8008cca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cce:	487f      	ldr	r0, [pc, #508]	; (8008ecc <_printf_float+0x2e8>)
 8008cd0:	4b7f      	ldr	r3, [pc, #508]	; (8008ed0 <_printf_float+0x2ec>)
 8008cd2:	e7d1      	b.n	8008c78 <_printf_float+0x94>
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cda:	9206      	str	r2, [sp, #24]
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	d13f      	bne.n	8008d60 <_printf_float+0x17c>
 8008ce0:	2306      	movs	r3, #6
 8008ce2:	6063      	str	r3, [r4, #4]
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	6861      	ldr	r1, [r4, #4]
 8008ce8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cec:	2300      	movs	r3, #0
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	ab0a      	add	r3, sp, #40	; 0x28
 8008cf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008cf6:	ab09      	add	r3, sp, #36	; 0x24
 8008cf8:	ec49 8b10 	vmov	d0, r8, r9
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d04:	4628      	mov	r0, r5
 8008d06:	f7ff fecd 	bl	8008aa4 <__cvt>
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d0e:	2b47      	cmp	r3, #71	; 0x47
 8008d10:	4680      	mov	r8, r0
 8008d12:	d108      	bne.n	8008d26 <_printf_float+0x142>
 8008d14:	1cc8      	adds	r0, r1, #3
 8008d16:	db02      	blt.n	8008d1e <_printf_float+0x13a>
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	4299      	cmp	r1, r3
 8008d1c:	dd41      	ble.n	8008da2 <_printf_float+0x1be>
 8008d1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d22:	fa5f fb8b 	uxtb.w	fp, fp
 8008d26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d2a:	d820      	bhi.n	8008d6e <_printf_float+0x18a>
 8008d2c:	3901      	subs	r1, #1
 8008d2e:	465a      	mov	r2, fp
 8008d30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d34:	9109      	str	r1, [sp, #36]	; 0x24
 8008d36:	f7ff ff17 	bl	8008b68 <__exponent>
 8008d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d3c:	1813      	adds	r3, r2, r0
 8008d3e:	2a01      	cmp	r2, #1
 8008d40:	4681      	mov	r9, r0
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	dc02      	bgt.n	8008d4c <_printf_float+0x168>
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	07d2      	lsls	r2, r2, #31
 8008d4a:	d501      	bpl.n	8008d50 <_printf_float+0x16c>
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d09c      	beq.n	8008c92 <_printf_float+0xae>
 8008d58:	232d      	movs	r3, #45	; 0x2d
 8008d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5e:	e798      	b.n	8008c92 <_printf_float+0xae>
 8008d60:	9a06      	ldr	r2, [sp, #24]
 8008d62:	2a47      	cmp	r2, #71	; 0x47
 8008d64:	d1be      	bne.n	8008ce4 <_printf_float+0x100>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1bc      	bne.n	8008ce4 <_printf_float+0x100>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e7b9      	b.n	8008ce2 <_printf_float+0xfe>
 8008d6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d72:	d118      	bne.n	8008da6 <_printf_float+0x1c2>
 8008d74:	2900      	cmp	r1, #0
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	dd0b      	ble.n	8008d92 <_printf_float+0x1ae>
 8008d7a:	6121      	str	r1, [r4, #16]
 8008d7c:	b913      	cbnz	r3, 8008d84 <_printf_float+0x1a0>
 8008d7e:	6822      	ldr	r2, [r4, #0]
 8008d80:	07d0      	lsls	r0, r2, #31
 8008d82:	d502      	bpl.n	8008d8a <_printf_float+0x1a6>
 8008d84:	3301      	adds	r3, #1
 8008d86:	440b      	add	r3, r1
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d8c:	f04f 0900 	mov.w	r9, #0
 8008d90:	e7de      	b.n	8008d50 <_printf_float+0x16c>
 8008d92:	b913      	cbnz	r3, 8008d9a <_printf_float+0x1b6>
 8008d94:	6822      	ldr	r2, [r4, #0]
 8008d96:	07d2      	lsls	r2, r2, #31
 8008d98:	d501      	bpl.n	8008d9e <_printf_float+0x1ba>
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	e7f4      	b.n	8008d88 <_printf_float+0x1a4>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e7f2      	b.n	8008d88 <_printf_float+0x1a4>
 8008da2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da8:	4299      	cmp	r1, r3
 8008daa:	db05      	blt.n	8008db8 <_printf_float+0x1d4>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	6121      	str	r1, [r4, #16]
 8008db0:	07d8      	lsls	r0, r3, #31
 8008db2:	d5ea      	bpl.n	8008d8a <_printf_float+0x1a6>
 8008db4:	1c4b      	adds	r3, r1, #1
 8008db6:	e7e7      	b.n	8008d88 <_printf_float+0x1a4>
 8008db8:	2900      	cmp	r1, #0
 8008dba:	bfd4      	ite	le
 8008dbc:	f1c1 0202 	rsble	r2, r1, #2
 8008dc0:	2201      	movgt	r2, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	e7e0      	b.n	8008d88 <_printf_float+0x1a4>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	055a      	lsls	r2, r3, #21
 8008dca:	d407      	bmi.n	8008ddc <_printf_float+0x1f8>
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	4642      	mov	r2, r8
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b8      	blx	r7
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d12c      	bne.n	8008e34 <_printf_float+0x250>
 8008dda:	e764      	b.n	8008ca6 <_printf_float+0xc2>
 8008ddc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008de0:	f240 80e0 	bls.w	8008fa4 <_printf_float+0x3c0>
 8008de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008de8:	2200      	movs	r2, #0
 8008dea:	2300      	movs	r3, #0
 8008dec:	f7f7 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d034      	beq.n	8008e5e <_printf_float+0x27a>
 8008df4:	4a37      	ldr	r2, [pc, #220]	; (8008ed4 <_printf_float+0x2f0>)
 8008df6:	2301      	movs	r3, #1
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	47b8      	blx	r7
 8008dfe:	3001      	adds	r0, #1
 8008e00:	f43f af51 	beq.w	8008ca6 <_printf_float+0xc2>
 8008e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	db02      	blt.n	8008e12 <_printf_float+0x22e>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	07d8      	lsls	r0, r3, #31
 8008e10:	d510      	bpl.n	8008e34 <_printf_float+0x250>
 8008e12:	ee18 3a10 	vmov	r3, s16
 8008e16:	4652      	mov	r2, sl
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f43f af41 	beq.w	8008ca6 <_printf_float+0xc2>
 8008e24:	f04f 0800 	mov.w	r8, #0
 8008e28:	f104 091a 	add.w	r9, r4, #26
 8008e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	4543      	cmp	r3, r8
 8008e32:	dc09      	bgt.n	8008e48 <_printf_float+0x264>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	079b      	lsls	r3, r3, #30
 8008e38:	f100 8105 	bmi.w	8009046 <_printf_float+0x462>
 8008e3c:	68e0      	ldr	r0, [r4, #12]
 8008e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e40:	4298      	cmp	r0, r3
 8008e42:	bfb8      	it	lt
 8008e44:	4618      	movlt	r0, r3
 8008e46:	e730      	b.n	8008caa <_printf_float+0xc6>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	464a      	mov	r2, r9
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b8      	blx	r7
 8008e52:	3001      	adds	r0, #1
 8008e54:	f43f af27 	beq.w	8008ca6 <_printf_float+0xc2>
 8008e58:	f108 0801 	add.w	r8, r8, #1
 8008e5c:	e7e6      	b.n	8008e2c <_printf_float+0x248>
 8008e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc39      	bgt.n	8008ed8 <_printf_float+0x2f4>
 8008e64:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <_printf_float+0x2f0>)
 8008e66:	2301      	movs	r3, #1
 8008e68:	4631      	mov	r1, r6
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b8      	blx	r7
 8008e6e:	3001      	adds	r0, #1
 8008e70:	f43f af19 	beq.w	8008ca6 <_printf_float+0xc2>
 8008e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	d102      	bne.n	8008e82 <_printf_float+0x29e>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	d5d8      	bpl.n	8008e34 <_printf_float+0x250>
 8008e82:	ee18 3a10 	vmov	r3, s16
 8008e86:	4652      	mov	r2, sl
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	f43f af09 	beq.w	8008ca6 <_printf_float+0xc2>
 8008e94:	f04f 0900 	mov.w	r9, #0
 8008e98:	f104 0a1a 	add.w	sl, r4, #26
 8008e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9e:	425b      	negs	r3, r3
 8008ea0:	454b      	cmp	r3, r9
 8008ea2:	dc01      	bgt.n	8008ea8 <_printf_float+0x2c4>
 8008ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea6:	e792      	b.n	8008dce <_printf_float+0x1ea>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4652      	mov	r2, sl
 8008eac:	4631      	mov	r1, r6
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47b8      	blx	r7
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	f43f aef7 	beq.w	8008ca6 <_printf_float+0xc2>
 8008eb8:	f109 0901 	add.w	r9, r9, #1
 8008ebc:	e7ee      	b.n	8008e9c <_printf_float+0x2b8>
 8008ebe:	bf00      	nop
 8008ec0:	7fefffff 	.word	0x7fefffff
 8008ec4:	0800bf48 	.word	0x0800bf48
 8008ec8:	0800bf4c 	.word	0x0800bf4c
 8008ecc:	0800bf54 	.word	0x0800bf54
 8008ed0:	0800bf50 	.word	0x0800bf50
 8008ed4:	0800bf58 	.word	0x0800bf58
 8008ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008edc:	429a      	cmp	r2, r3
 8008ede:	bfa8      	it	ge
 8008ee0:	461a      	movge	r2, r3
 8008ee2:	2a00      	cmp	r2, #0
 8008ee4:	4691      	mov	r9, r2
 8008ee6:	dc37      	bgt.n	8008f58 <_printf_float+0x374>
 8008ee8:	f04f 0b00 	mov.w	fp, #0
 8008eec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ef0:	f104 021a 	add.w	r2, r4, #26
 8008ef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ef6:	9305      	str	r3, [sp, #20]
 8008ef8:	eba3 0309 	sub.w	r3, r3, r9
 8008efc:	455b      	cmp	r3, fp
 8008efe:	dc33      	bgt.n	8008f68 <_printf_float+0x384>
 8008f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f04:	429a      	cmp	r2, r3
 8008f06:	db3b      	blt.n	8008f80 <_printf_float+0x39c>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	07da      	lsls	r2, r3, #31
 8008f0c:	d438      	bmi.n	8008f80 <_printf_float+0x39c>
 8008f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f10:	9b05      	ldr	r3, [sp, #20]
 8008f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	eba2 0901 	sub.w	r9, r2, r1
 8008f1a:	4599      	cmp	r9, r3
 8008f1c:	bfa8      	it	ge
 8008f1e:	4699      	movge	r9, r3
 8008f20:	f1b9 0f00 	cmp.w	r9, #0
 8008f24:	dc35      	bgt.n	8008f92 <_printf_float+0x3ae>
 8008f26:	f04f 0800 	mov.w	r8, #0
 8008f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f2e:	f104 0a1a 	add.w	sl, r4, #26
 8008f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	eba3 0309 	sub.w	r3, r3, r9
 8008f3c:	4543      	cmp	r3, r8
 8008f3e:	f77f af79 	ble.w	8008e34 <_printf_float+0x250>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4652      	mov	r2, sl
 8008f46:	4631      	mov	r1, r6
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b8      	blx	r7
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	f43f aeaa 	beq.w	8008ca6 <_printf_float+0xc2>
 8008f52:	f108 0801 	add.w	r8, r8, #1
 8008f56:	e7ec      	b.n	8008f32 <_printf_float+0x34e>
 8008f58:	4613      	mov	r3, r2
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	d1c0      	bne.n	8008ee8 <_printf_float+0x304>
 8008f66:	e69e      	b.n	8008ca6 <_printf_float+0xc2>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	9205      	str	r2, [sp, #20]
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	f43f ae97 	beq.w	8008ca6 <_printf_float+0xc2>
 8008f78:	9a05      	ldr	r2, [sp, #20]
 8008f7a:	f10b 0b01 	add.w	fp, fp, #1
 8008f7e:	e7b9      	b.n	8008ef4 <_printf_float+0x310>
 8008f80:	ee18 3a10 	vmov	r3, s16
 8008f84:	4652      	mov	r2, sl
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d1be      	bne.n	8008f0e <_printf_float+0x32a>
 8008f90:	e689      	b.n	8008ca6 <_printf_float+0xc2>
 8008f92:	9a05      	ldr	r2, [sp, #20]
 8008f94:	464b      	mov	r3, r9
 8008f96:	4442      	add	r2, r8
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d1c1      	bne.n	8008f26 <_printf_float+0x342>
 8008fa2:	e680      	b.n	8008ca6 <_printf_float+0xc2>
 8008fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fa6:	2a01      	cmp	r2, #1
 8008fa8:	dc01      	bgt.n	8008fae <_printf_float+0x3ca>
 8008faa:	07db      	lsls	r3, r3, #31
 8008fac:	d538      	bpl.n	8009020 <_printf_float+0x43c>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f43f ae74 	beq.w	8008ca6 <_printf_float+0xc2>
 8008fbe:	ee18 3a10 	vmov	r3, s16
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b8      	blx	r7
 8008fca:	3001      	adds	r0, #1
 8008fcc:	f43f ae6b 	beq.w	8008ca6 <_printf_float+0xc2>
 8008fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f7f7 fd7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fdc:	b9d8      	cbnz	r0, 8009016 <_printf_float+0x432>
 8008fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe0:	f108 0201 	add.w	r2, r8, #1
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	d10e      	bne.n	800900e <_printf_float+0x42a>
 8008ff0:	e659      	b.n	8008ca6 <_printf_float+0xc2>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4652      	mov	r2, sl
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	f43f ae52 	beq.w	8008ca6 <_printf_float+0xc2>
 8009002:	f108 0801 	add.w	r8, r8, #1
 8009006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009008:	3b01      	subs	r3, #1
 800900a:	4543      	cmp	r3, r8
 800900c:	dcf1      	bgt.n	8008ff2 <_printf_float+0x40e>
 800900e:	464b      	mov	r3, r9
 8009010:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009014:	e6dc      	b.n	8008dd0 <_printf_float+0x1ec>
 8009016:	f04f 0800 	mov.w	r8, #0
 800901a:	f104 0a1a 	add.w	sl, r4, #26
 800901e:	e7f2      	b.n	8009006 <_printf_float+0x422>
 8009020:	2301      	movs	r3, #1
 8009022:	4642      	mov	r2, r8
 8009024:	e7df      	b.n	8008fe6 <_printf_float+0x402>
 8009026:	2301      	movs	r3, #1
 8009028:	464a      	mov	r2, r9
 800902a:	4631      	mov	r1, r6
 800902c:	4628      	mov	r0, r5
 800902e:	47b8      	blx	r7
 8009030:	3001      	adds	r0, #1
 8009032:	f43f ae38 	beq.w	8008ca6 <_printf_float+0xc2>
 8009036:	f108 0801 	add.w	r8, r8, #1
 800903a:	68e3      	ldr	r3, [r4, #12]
 800903c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800903e:	1a5b      	subs	r3, r3, r1
 8009040:	4543      	cmp	r3, r8
 8009042:	dcf0      	bgt.n	8009026 <_printf_float+0x442>
 8009044:	e6fa      	b.n	8008e3c <_printf_float+0x258>
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	f104 0919 	add.w	r9, r4, #25
 800904e:	e7f4      	b.n	800903a <_printf_float+0x456>

08009050 <_printf_common>:
 8009050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009054:	4616      	mov	r6, r2
 8009056:	4699      	mov	r9, r3
 8009058:	688a      	ldr	r2, [r1, #8]
 800905a:	690b      	ldr	r3, [r1, #16]
 800905c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009060:	4293      	cmp	r3, r2
 8009062:	bfb8      	it	lt
 8009064:	4613      	movlt	r3, r2
 8009066:	6033      	str	r3, [r6, #0]
 8009068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800906c:	4607      	mov	r7, r0
 800906e:	460c      	mov	r4, r1
 8009070:	b10a      	cbz	r2, 8009076 <_printf_common+0x26>
 8009072:	3301      	adds	r3, #1
 8009074:	6033      	str	r3, [r6, #0]
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	0699      	lsls	r1, r3, #26
 800907a:	bf42      	ittt	mi
 800907c:	6833      	ldrmi	r3, [r6, #0]
 800907e:	3302      	addmi	r3, #2
 8009080:	6033      	strmi	r3, [r6, #0]
 8009082:	6825      	ldr	r5, [r4, #0]
 8009084:	f015 0506 	ands.w	r5, r5, #6
 8009088:	d106      	bne.n	8009098 <_printf_common+0x48>
 800908a:	f104 0a19 	add.w	sl, r4, #25
 800908e:	68e3      	ldr	r3, [r4, #12]
 8009090:	6832      	ldr	r2, [r6, #0]
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	42ab      	cmp	r3, r5
 8009096:	dc26      	bgt.n	80090e6 <_printf_common+0x96>
 8009098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800909c:	1e13      	subs	r3, r2, #0
 800909e:	6822      	ldr	r2, [r4, #0]
 80090a0:	bf18      	it	ne
 80090a2:	2301      	movne	r3, #1
 80090a4:	0692      	lsls	r2, r2, #26
 80090a6:	d42b      	bmi.n	8009100 <_printf_common+0xb0>
 80090a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090ac:	4649      	mov	r1, r9
 80090ae:	4638      	mov	r0, r7
 80090b0:	47c0      	blx	r8
 80090b2:	3001      	adds	r0, #1
 80090b4:	d01e      	beq.n	80090f4 <_printf_common+0xa4>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	68e5      	ldr	r5, [r4, #12]
 80090ba:	6832      	ldr	r2, [r6, #0]
 80090bc:	f003 0306 	and.w	r3, r3, #6
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	bf08      	it	eq
 80090c4:	1aad      	subeq	r5, r5, r2
 80090c6:	68a3      	ldr	r3, [r4, #8]
 80090c8:	6922      	ldr	r2, [r4, #16]
 80090ca:	bf0c      	ite	eq
 80090cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090d0:	2500      	movne	r5, #0
 80090d2:	4293      	cmp	r3, r2
 80090d4:	bfc4      	itt	gt
 80090d6:	1a9b      	subgt	r3, r3, r2
 80090d8:	18ed      	addgt	r5, r5, r3
 80090da:	2600      	movs	r6, #0
 80090dc:	341a      	adds	r4, #26
 80090de:	42b5      	cmp	r5, r6
 80090e0:	d11a      	bne.n	8009118 <_printf_common+0xc8>
 80090e2:	2000      	movs	r0, #0
 80090e4:	e008      	b.n	80090f8 <_printf_common+0xa8>
 80090e6:	2301      	movs	r3, #1
 80090e8:	4652      	mov	r2, sl
 80090ea:	4649      	mov	r1, r9
 80090ec:	4638      	mov	r0, r7
 80090ee:	47c0      	blx	r8
 80090f0:	3001      	adds	r0, #1
 80090f2:	d103      	bne.n	80090fc <_printf_common+0xac>
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	3501      	adds	r5, #1
 80090fe:	e7c6      	b.n	800908e <_printf_common+0x3e>
 8009100:	18e1      	adds	r1, r4, r3
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	2030      	movs	r0, #48	; 0x30
 8009106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800910a:	4422      	add	r2, r4
 800910c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009114:	3302      	adds	r3, #2
 8009116:	e7c7      	b.n	80090a8 <_printf_common+0x58>
 8009118:	2301      	movs	r3, #1
 800911a:	4622      	mov	r2, r4
 800911c:	4649      	mov	r1, r9
 800911e:	4638      	mov	r0, r7
 8009120:	47c0      	blx	r8
 8009122:	3001      	adds	r0, #1
 8009124:	d0e6      	beq.n	80090f4 <_printf_common+0xa4>
 8009126:	3601      	adds	r6, #1
 8009128:	e7d9      	b.n	80090de <_printf_common+0x8e>
	...

0800912c <_printf_i>:
 800912c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	460c      	mov	r4, r1
 8009132:	4691      	mov	r9, r2
 8009134:	7e27      	ldrb	r7, [r4, #24]
 8009136:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009138:	2f78      	cmp	r7, #120	; 0x78
 800913a:	4680      	mov	r8, r0
 800913c:	469a      	mov	sl, r3
 800913e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009142:	d807      	bhi.n	8009154 <_printf_i+0x28>
 8009144:	2f62      	cmp	r7, #98	; 0x62
 8009146:	d80a      	bhi.n	800915e <_printf_i+0x32>
 8009148:	2f00      	cmp	r7, #0
 800914a:	f000 80d8 	beq.w	80092fe <_printf_i+0x1d2>
 800914e:	2f58      	cmp	r7, #88	; 0x58
 8009150:	f000 80a3 	beq.w	800929a <_printf_i+0x16e>
 8009154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800915c:	e03a      	b.n	80091d4 <_printf_i+0xa8>
 800915e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009162:	2b15      	cmp	r3, #21
 8009164:	d8f6      	bhi.n	8009154 <_printf_i+0x28>
 8009166:	a001      	add	r0, pc, #4	; (adr r0, 800916c <_printf_i+0x40>)
 8009168:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800916c:	080091c5 	.word	0x080091c5
 8009170:	080091d9 	.word	0x080091d9
 8009174:	08009155 	.word	0x08009155
 8009178:	08009155 	.word	0x08009155
 800917c:	08009155 	.word	0x08009155
 8009180:	08009155 	.word	0x08009155
 8009184:	080091d9 	.word	0x080091d9
 8009188:	08009155 	.word	0x08009155
 800918c:	08009155 	.word	0x08009155
 8009190:	08009155 	.word	0x08009155
 8009194:	08009155 	.word	0x08009155
 8009198:	080092e5 	.word	0x080092e5
 800919c:	08009209 	.word	0x08009209
 80091a0:	080092c7 	.word	0x080092c7
 80091a4:	08009155 	.word	0x08009155
 80091a8:	08009155 	.word	0x08009155
 80091ac:	08009307 	.word	0x08009307
 80091b0:	08009155 	.word	0x08009155
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009155 	.word	0x08009155
 80091bc:	08009155 	.word	0x08009155
 80091c0:	080092cf 	.word	0x080092cf
 80091c4:	680b      	ldr	r3, [r1, #0]
 80091c6:	1d1a      	adds	r2, r3, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	600a      	str	r2, [r1, #0]
 80091cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091d4:	2301      	movs	r3, #1
 80091d6:	e0a3      	b.n	8009320 <_printf_i+0x1f4>
 80091d8:	6825      	ldr	r5, [r4, #0]
 80091da:	6808      	ldr	r0, [r1, #0]
 80091dc:	062e      	lsls	r6, r5, #24
 80091de:	f100 0304 	add.w	r3, r0, #4
 80091e2:	d50a      	bpl.n	80091fa <_printf_i+0xce>
 80091e4:	6805      	ldr	r5, [r0, #0]
 80091e6:	600b      	str	r3, [r1, #0]
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	da03      	bge.n	80091f4 <_printf_i+0xc8>
 80091ec:	232d      	movs	r3, #45	; 0x2d
 80091ee:	426d      	negs	r5, r5
 80091f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f4:	485e      	ldr	r0, [pc, #376]	; (8009370 <_printf_i+0x244>)
 80091f6:	230a      	movs	r3, #10
 80091f8:	e019      	b.n	800922e <_printf_i+0x102>
 80091fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80091fe:	6805      	ldr	r5, [r0, #0]
 8009200:	600b      	str	r3, [r1, #0]
 8009202:	bf18      	it	ne
 8009204:	b22d      	sxthne	r5, r5
 8009206:	e7ef      	b.n	80091e8 <_printf_i+0xbc>
 8009208:	680b      	ldr	r3, [r1, #0]
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	1d18      	adds	r0, r3, #4
 800920e:	6008      	str	r0, [r1, #0]
 8009210:	0628      	lsls	r0, r5, #24
 8009212:	d501      	bpl.n	8009218 <_printf_i+0xec>
 8009214:	681d      	ldr	r5, [r3, #0]
 8009216:	e002      	b.n	800921e <_printf_i+0xf2>
 8009218:	0669      	lsls	r1, r5, #25
 800921a:	d5fb      	bpl.n	8009214 <_printf_i+0xe8>
 800921c:	881d      	ldrh	r5, [r3, #0]
 800921e:	4854      	ldr	r0, [pc, #336]	; (8009370 <_printf_i+0x244>)
 8009220:	2f6f      	cmp	r7, #111	; 0x6f
 8009222:	bf0c      	ite	eq
 8009224:	2308      	moveq	r3, #8
 8009226:	230a      	movne	r3, #10
 8009228:	2100      	movs	r1, #0
 800922a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800922e:	6866      	ldr	r6, [r4, #4]
 8009230:	60a6      	str	r6, [r4, #8]
 8009232:	2e00      	cmp	r6, #0
 8009234:	bfa2      	ittt	ge
 8009236:	6821      	ldrge	r1, [r4, #0]
 8009238:	f021 0104 	bicge.w	r1, r1, #4
 800923c:	6021      	strge	r1, [r4, #0]
 800923e:	b90d      	cbnz	r5, 8009244 <_printf_i+0x118>
 8009240:	2e00      	cmp	r6, #0
 8009242:	d04d      	beq.n	80092e0 <_printf_i+0x1b4>
 8009244:	4616      	mov	r6, r2
 8009246:	fbb5 f1f3 	udiv	r1, r5, r3
 800924a:	fb03 5711 	mls	r7, r3, r1, r5
 800924e:	5dc7      	ldrb	r7, [r0, r7]
 8009250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009254:	462f      	mov	r7, r5
 8009256:	42bb      	cmp	r3, r7
 8009258:	460d      	mov	r5, r1
 800925a:	d9f4      	bls.n	8009246 <_printf_i+0x11a>
 800925c:	2b08      	cmp	r3, #8
 800925e:	d10b      	bne.n	8009278 <_printf_i+0x14c>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	07df      	lsls	r7, r3, #31
 8009264:	d508      	bpl.n	8009278 <_printf_i+0x14c>
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	6861      	ldr	r1, [r4, #4]
 800926a:	4299      	cmp	r1, r3
 800926c:	bfde      	ittt	le
 800926e:	2330      	movle	r3, #48	; 0x30
 8009270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009274:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009278:	1b92      	subs	r2, r2, r6
 800927a:	6122      	str	r2, [r4, #16]
 800927c:	f8cd a000 	str.w	sl, [sp]
 8009280:	464b      	mov	r3, r9
 8009282:	aa03      	add	r2, sp, #12
 8009284:	4621      	mov	r1, r4
 8009286:	4640      	mov	r0, r8
 8009288:	f7ff fee2 	bl	8009050 <_printf_common>
 800928c:	3001      	adds	r0, #1
 800928e:	d14c      	bne.n	800932a <_printf_i+0x1fe>
 8009290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009294:	b004      	add	sp, #16
 8009296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929a:	4835      	ldr	r0, [pc, #212]	; (8009370 <_printf_i+0x244>)
 800929c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	680e      	ldr	r6, [r1, #0]
 80092a4:	061f      	lsls	r7, r3, #24
 80092a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80092aa:	600e      	str	r6, [r1, #0]
 80092ac:	d514      	bpl.n	80092d8 <_printf_i+0x1ac>
 80092ae:	07d9      	lsls	r1, r3, #31
 80092b0:	bf44      	itt	mi
 80092b2:	f043 0320 	orrmi.w	r3, r3, #32
 80092b6:	6023      	strmi	r3, [r4, #0]
 80092b8:	b91d      	cbnz	r5, 80092c2 <_printf_i+0x196>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	f023 0320 	bic.w	r3, r3, #32
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	2310      	movs	r3, #16
 80092c4:	e7b0      	b.n	8009228 <_printf_i+0xfc>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	f043 0320 	orr.w	r3, r3, #32
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	2378      	movs	r3, #120	; 0x78
 80092d0:	4828      	ldr	r0, [pc, #160]	; (8009374 <_printf_i+0x248>)
 80092d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092d6:	e7e3      	b.n	80092a0 <_printf_i+0x174>
 80092d8:	065e      	lsls	r6, r3, #25
 80092da:	bf48      	it	mi
 80092dc:	b2ad      	uxthmi	r5, r5
 80092de:	e7e6      	b.n	80092ae <_printf_i+0x182>
 80092e0:	4616      	mov	r6, r2
 80092e2:	e7bb      	b.n	800925c <_printf_i+0x130>
 80092e4:	680b      	ldr	r3, [r1, #0]
 80092e6:	6826      	ldr	r6, [r4, #0]
 80092e8:	6960      	ldr	r0, [r4, #20]
 80092ea:	1d1d      	adds	r5, r3, #4
 80092ec:	600d      	str	r5, [r1, #0]
 80092ee:	0635      	lsls	r5, r6, #24
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	d501      	bpl.n	80092f8 <_printf_i+0x1cc>
 80092f4:	6018      	str	r0, [r3, #0]
 80092f6:	e002      	b.n	80092fe <_printf_i+0x1d2>
 80092f8:	0671      	lsls	r1, r6, #25
 80092fa:	d5fb      	bpl.n	80092f4 <_printf_i+0x1c8>
 80092fc:	8018      	strh	r0, [r3, #0]
 80092fe:	2300      	movs	r3, #0
 8009300:	6123      	str	r3, [r4, #16]
 8009302:	4616      	mov	r6, r2
 8009304:	e7ba      	b.n	800927c <_printf_i+0x150>
 8009306:	680b      	ldr	r3, [r1, #0]
 8009308:	1d1a      	adds	r2, r3, #4
 800930a:	600a      	str	r2, [r1, #0]
 800930c:	681e      	ldr	r6, [r3, #0]
 800930e:	6862      	ldr	r2, [r4, #4]
 8009310:	2100      	movs	r1, #0
 8009312:	4630      	mov	r0, r6
 8009314:	f7f6 ff6c 	bl	80001f0 <memchr>
 8009318:	b108      	cbz	r0, 800931e <_printf_i+0x1f2>
 800931a:	1b80      	subs	r0, r0, r6
 800931c:	6060      	str	r0, [r4, #4]
 800931e:	6863      	ldr	r3, [r4, #4]
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	2300      	movs	r3, #0
 8009324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009328:	e7a8      	b.n	800927c <_printf_i+0x150>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	4632      	mov	r2, r6
 800932e:	4649      	mov	r1, r9
 8009330:	4640      	mov	r0, r8
 8009332:	47d0      	blx	sl
 8009334:	3001      	adds	r0, #1
 8009336:	d0ab      	beq.n	8009290 <_printf_i+0x164>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	079b      	lsls	r3, r3, #30
 800933c:	d413      	bmi.n	8009366 <_printf_i+0x23a>
 800933e:	68e0      	ldr	r0, [r4, #12]
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	4298      	cmp	r0, r3
 8009344:	bfb8      	it	lt
 8009346:	4618      	movlt	r0, r3
 8009348:	e7a4      	b.n	8009294 <_printf_i+0x168>
 800934a:	2301      	movs	r3, #1
 800934c:	4632      	mov	r2, r6
 800934e:	4649      	mov	r1, r9
 8009350:	4640      	mov	r0, r8
 8009352:	47d0      	blx	sl
 8009354:	3001      	adds	r0, #1
 8009356:	d09b      	beq.n	8009290 <_printf_i+0x164>
 8009358:	3501      	adds	r5, #1
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	9903      	ldr	r1, [sp, #12]
 800935e:	1a5b      	subs	r3, r3, r1
 8009360:	42ab      	cmp	r3, r5
 8009362:	dcf2      	bgt.n	800934a <_printf_i+0x21e>
 8009364:	e7eb      	b.n	800933e <_printf_i+0x212>
 8009366:	2500      	movs	r5, #0
 8009368:	f104 0619 	add.w	r6, r4, #25
 800936c:	e7f5      	b.n	800935a <_printf_i+0x22e>
 800936e:	bf00      	nop
 8009370:	0800bf5a 	.word	0x0800bf5a
 8009374:	0800bf6b 	.word	0x0800bf6b

08009378 <iprintf>:
 8009378:	b40f      	push	{r0, r1, r2, r3}
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <iprintf+0x2c>)
 800937c:	b513      	push	{r0, r1, r4, lr}
 800937e:	681c      	ldr	r4, [r3, #0]
 8009380:	b124      	cbz	r4, 800938c <iprintf+0x14>
 8009382:	69a3      	ldr	r3, [r4, #24]
 8009384:	b913      	cbnz	r3, 800938c <iprintf+0x14>
 8009386:	4620      	mov	r0, r4
 8009388:	f7ff fa06 	bl	8008798 <__sinit>
 800938c:	ab05      	add	r3, sp, #20
 800938e:	9a04      	ldr	r2, [sp, #16]
 8009390:	68a1      	ldr	r1, [r4, #8]
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	4620      	mov	r0, r4
 8009396:	f001 fecd 	bl	800b134 <_vfiprintf_r>
 800939a:	b002      	add	sp, #8
 800939c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a0:	b004      	add	sp, #16
 80093a2:	4770      	bx	lr
 80093a4:	20000010 	.word	0x20000010

080093a8 <_puts_r>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	460e      	mov	r6, r1
 80093ac:	4605      	mov	r5, r0
 80093ae:	b118      	cbz	r0, 80093b8 <_puts_r+0x10>
 80093b0:	6983      	ldr	r3, [r0, #24]
 80093b2:	b90b      	cbnz	r3, 80093b8 <_puts_r+0x10>
 80093b4:	f7ff f9f0 	bl	8008798 <__sinit>
 80093b8:	69ab      	ldr	r3, [r5, #24]
 80093ba:	68ac      	ldr	r4, [r5, #8]
 80093bc:	b913      	cbnz	r3, 80093c4 <_puts_r+0x1c>
 80093be:	4628      	mov	r0, r5
 80093c0:	f7ff f9ea 	bl	8008798 <__sinit>
 80093c4:	4b2c      	ldr	r3, [pc, #176]	; (8009478 <_puts_r+0xd0>)
 80093c6:	429c      	cmp	r4, r3
 80093c8:	d120      	bne.n	800940c <_puts_r+0x64>
 80093ca:	686c      	ldr	r4, [r5, #4]
 80093cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093ce:	07db      	lsls	r3, r3, #31
 80093d0:	d405      	bmi.n	80093de <_puts_r+0x36>
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	0598      	lsls	r0, r3, #22
 80093d6:	d402      	bmi.n	80093de <_puts_r+0x36>
 80093d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093da:	f7ff faa0 	bl	800891e <__retarget_lock_acquire_recursive>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	0719      	lsls	r1, r3, #28
 80093e2:	d51d      	bpl.n	8009420 <_puts_r+0x78>
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	b1db      	cbz	r3, 8009420 <_puts_r+0x78>
 80093e8:	3e01      	subs	r6, #1
 80093ea:	68a3      	ldr	r3, [r4, #8]
 80093ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093f0:	3b01      	subs	r3, #1
 80093f2:	60a3      	str	r3, [r4, #8]
 80093f4:	bb39      	cbnz	r1, 8009446 <_puts_r+0x9e>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	da38      	bge.n	800946c <_puts_r+0xc4>
 80093fa:	4622      	mov	r2, r4
 80093fc:	210a      	movs	r1, #10
 80093fe:	4628      	mov	r0, r5
 8009400:	f000 f982 	bl	8009708 <__swbuf_r>
 8009404:	3001      	adds	r0, #1
 8009406:	d011      	beq.n	800942c <_puts_r+0x84>
 8009408:	250a      	movs	r5, #10
 800940a:	e011      	b.n	8009430 <_puts_r+0x88>
 800940c:	4b1b      	ldr	r3, [pc, #108]	; (800947c <_puts_r+0xd4>)
 800940e:	429c      	cmp	r4, r3
 8009410:	d101      	bne.n	8009416 <_puts_r+0x6e>
 8009412:	68ac      	ldr	r4, [r5, #8]
 8009414:	e7da      	b.n	80093cc <_puts_r+0x24>
 8009416:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <_puts_r+0xd8>)
 8009418:	429c      	cmp	r4, r3
 800941a:	bf08      	it	eq
 800941c:	68ec      	ldreq	r4, [r5, #12]
 800941e:	e7d5      	b.n	80093cc <_puts_r+0x24>
 8009420:	4621      	mov	r1, r4
 8009422:	4628      	mov	r0, r5
 8009424:	f000 f9d4 	bl	80097d0 <__swsetup_r>
 8009428:	2800      	cmp	r0, #0
 800942a:	d0dd      	beq.n	80093e8 <_puts_r+0x40>
 800942c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009432:	07da      	lsls	r2, r3, #31
 8009434:	d405      	bmi.n	8009442 <_puts_r+0x9a>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	059b      	lsls	r3, r3, #22
 800943a:	d402      	bmi.n	8009442 <_puts_r+0x9a>
 800943c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800943e:	f7ff fa6f 	bl	8008920 <__retarget_lock_release_recursive>
 8009442:	4628      	mov	r0, r5
 8009444:	bd70      	pop	{r4, r5, r6, pc}
 8009446:	2b00      	cmp	r3, #0
 8009448:	da04      	bge.n	8009454 <_puts_r+0xac>
 800944a:	69a2      	ldr	r2, [r4, #24]
 800944c:	429a      	cmp	r2, r3
 800944e:	dc06      	bgt.n	800945e <_puts_r+0xb6>
 8009450:	290a      	cmp	r1, #10
 8009452:	d004      	beq.n	800945e <_puts_r+0xb6>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	6022      	str	r2, [r4, #0]
 800945a:	7019      	strb	r1, [r3, #0]
 800945c:	e7c5      	b.n	80093ea <_puts_r+0x42>
 800945e:	4622      	mov	r2, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f951 	bl	8009708 <__swbuf_r>
 8009466:	3001      	adds	r0, #1
 8009468:	d1bf      	bne.n	80093ea <_puts_r+0x42>
 800946a:	e7df      	b.n	800942c <_puts_r+0x84>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	250a      	movs	r5, #10
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	701d      	strb	r5, [r3, #0]
 8009476:	e7db      	b.n	8009430 <_puts_r+0x88>
 8009478:	0800bf04 	.word	0x0800bf04
 800947c:	0800bf24 	.word	0x0800bf24
 8009480:	0800bee4 	.word	0x0800bee4

08009484 <puts>:
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <puts+0xc>)
 8009486:	4601      	mov	r1, r0
 8009488:	6818      	ldr	r0, [r3, #0]
 800948a:	f7ff bf8d 	b.w	80093a8 <_puts_r>
 800948e:	bf00      	nop
 8009490:	20000010 	.word	0x20000010

08009494 <_sbrk_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_sbrk_r+0x1c>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7f8 ff2e 	bl	8002300 <_sbrk>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_sbrk_r+0x1a>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_sbrk_r+0x1a>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	2000c320 	.word	0x2000c320

080094b4 <siprintf>:
 80094b4:	b40e      	push	{r1, r2, r3}
 80094b6:	b500      	push	{lr}
 80094b8:	b09c      	sub	sp, #112	; 0x70
 80094ba:	ab1d      	add	r3, sp, #116	; 0x74
 80094bc:	9002      	str	r0, [sp, #8]
 80094be:	9006      	str	r0, [sp, #24]
 80094c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094c4:	4809      	ldr	r0, [pc, #36]	; (80094ec <siprintf+0x38>)
 80094c6:	9107      	str	r1, [sp, #28]
 80094c8:	9104      	str	r1, [sp, #16]
 80094ca:	4909      	ldr	r1, [pc, #36]	; (80094f0 <siprintf+0x3c>)
 80094cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d0:	9105      	str	r1, [sp, #20]
 80094d2:	6800      	ldr	r0, [r0, #0]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	a902      	add	r1, sp, #8
 80094d8:	f001 fd02 	bl	800aee0 <_svfiprintf_r>
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	b01c      	add	sp, #112	; 0x70
 80094e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e8:	b003      	add	sp, #12
 80094ea:	4770      	bx	lr
 80094ec:	20000010 	.word	0x20000010
 80094f0:	ffff0208 	.word	0xffff0208

080094f4 <__sread>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f001 ff4a 	bl	800b394 <_read_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	bfab      	itete	ge
 8009504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009506:	89a3      	ldrhlt	r3, [r4, #12]
 8009508:	181b      	addge	r3, r3, r0
 800950a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950e:	bfac      	ite	ge
 8009510:	6563      	strge	r3, [r4, #84]	; 0x54
 8009512:	81a3      	strhlt	r3, [r4, #12]
 8009514:	bd10      	pop	{r4, pc}

08009516 <__swrite>:
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	461f      	mov	r7, r3
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	05db      	lsls	r3, r3, #23
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4616      	mov	r6, r2
 8009526:	d505      	bpl.n	8009534 <__swrite+0x1e>
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	2302      	movs	r3, #2
 800952e:	2200      	movs	r2, #0
 8009530:	f001 f84a 	bl	800a5c8 <_lseek_r>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	f000 b92f 	b.w	80097ac <_write_r>

0800954e <__sseek>:
 800954e:	b510      	push	{r4, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009556:	f001 f837 	bl	800a5c8 <_lseek_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	bf15      	itete	ne
 8009560:	6560      	strne	r0, [r4, #84]	; 0x54
 8009562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800956a:	81a3      	strheq	r3, [r4, #12]
 800956c:	bf18      	it	ne
 800956e:	81a3      	strhne	r3, [r4, #12]
 8009570:	bd10      	pop	{r4, pc}

08009572 <__sclose>:
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 b999 	b.w	80098ac <_close_r>

0800957a <strnstr>:
 800957a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800957c:	460c      	mov	r4, r1
 800957e:	4605      	mov	r5, r0
 8009580:	4611      	mov	r1, r2
 8009582:	4620      	mov	r0, r4
 8009584:	9201      	str	r2, [sp, #4]
 8009586:	f001 ff17 	bl	800b3b8 <strnlen>
 800958a:	9901      	ldr	r1, [sp, #4]
 800958c:	4281      	cmp	r1, r0
 800958e:	d805      	bhi.n	800959c <strnstr+0x22>
 8009590:	5c23      	ldrb	r3, [r4, r0]
 8009592:	b11b      	cbz	r3, 800959c <strnstr+0x22>
 8009594:	2400      	movs	r4, #0
 8009596:	4620      	mov	r0, r4
 8009598:	b003      	add	sp, #12
 800959a:	bd30      	pop	{r4, r5, pc}
 800959c:	4603      	mov	r3, r0
 800959e:	4622      	mov	r2, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	f001 f88f 	bl	800a6c4 <memmem>
 80095a6:	4604      	mov	r4, r0
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d0f3      	beq.n	8009594 <strnstr+0x1a>
 80095ac:	1b42      	subs	r2, r0, r5
 80095ae:	2100      	movs	r1, #0
 80095b0:	4628      	mov	r0, r5
 80095b2:	f7f6 fe1d 	bl	80001f0 <memchr>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d1ec      	bne.n	8009594 <strnstr+0x1a>
 80095ba:	e7ec      	b.n	8009596 <strnstr+0x1c>

080095bc <strstr>:
 80095bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095be:	780c      	ldrb	r4, [r1, #0]
 80095c0:	b164      	cbz	r4, 80095dc <strstr+0x20>
 80095c2:	4603      	mov	r3, r0
 80095c4:	781a      	ldrb	r2, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	1c5e      	adds	r6, r3, #1
 80095ca:	b90a      	cbnz	r2, 80095d0 <strstr+0x14>
 80095cc:	4610      	mov	r0, r2
 80095ce:	e005      	b.n	80095dc <strstr+0x20>
 80095d0:	4294      	cmp	r4, r2
 80095d2:	d108      	bne.n	80095e6 <strstr+0x2a>
 80095d4:	460d      	mov	r5, r1
 80095d6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80095da:	b902      	cbnz	r2, 80095de <strstr+0x22>
 80095dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095de:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80095e2:	4297      	cmp	r7, r2
 80095e4:	d0f7      	beq.n	80095d6 <strstr+0x1a>
 80095e6:	4633      	mov	r3, r6
 80095e8:	e7ec      	b.n	80095c4 <strstr+0x8>
	...

080095ec <_strtol_l.isra.0>:
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f2:	d001      	beq.n	80095f8 <_strtol_l.isra.0+0xc>
 80095f4:	2b24      	cmp	r3, #36	; 0x24
 80095f6:	d906      	bls.n	8009606 <_strtol_l.isra.0+0x1a>
 80095f8:	f7fe ff9c 	bl	8008534 <__errno>
 80095fc:	2316      	movs	r3, #22
 80095fe:	6003      	str	r3, [r0, #0]
 8009600:	2000      	movs	r0, #0
 8009602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009606:	4f3a      	ldr	r7, [pc, #232]	; (80096f0 <_strtol_l.isra.0+0x104>)
 8009608:	468e      	mov	lr, r1
 800960a:	4676      	mov	r6, lr
 800960c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009610:	5de5      	ldrb	r5, [r4, r7]
 8009612:	f015 0508 	ands.w	r5, r5, #8
 8009616:	d1f8      	bne.n	800960a <_strtol_l.isra.0+0x1e>
 8009618:	2c2d      	cmp	r4, #45	; 0x2d
 800961a:	d134      	bne.n	8009686 <_strtol_l.isra.0+0x9a>
 800961c:	f89e 4000 	ldrb.w	r4, [lr]
 8009620:	f04f 0801 	mov.w	r8, #1
 8009624:	f106 0e02 	add.w	lr, r6, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d05c      	beq.n	80096e6 <_strtol_l.isra.0+0xfa>
 800962c:	2b10      	cmp	r3, #16
 800962e:	d10c      	bne.n	800964a <_strtol_l.isra.0+0x5e>
 8009630:	2c30      	cmp	r4, #48	; 0x30
 8009632:	d10a      	bne.n	800964a <_strtol_l.isra.0+0x5e>
 8009634:	f89e 4000 	ldrb.w	r4, [lr]
 8009638:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800963c:	2c58      	cmp	r4, #88	; 0x58
 800963e:	d14d      	bne.n	80096dc <_strtol_l.isra.0+0xf0>
 8009640:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009644:	2310      	movs	r3, #16
 8009646:	f10e 0e02 	add.w	lr, lr, #2
 800964a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800964e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009652:	2600      	movs	r6, #0
 8009654:	fbbc f9f3 	udiv	r9, ip, r3
 8009658:	4635      	mov	r5, r6
 800965a:	fb03 ca19 	mls	sl, r3, r9, ip
 800965e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009662:	2f09      	cmp	r7, #9
 8009664:	d818      	bhi.n	8009698 <_strtol_l.isra.0+0xac>
 8009666:	463c      	mov	r4, r7
 8009668:	42a3      	cmp	r3, r4
 800966a:	dd24      	ble.n	80096b6 <_strtol_l.isra.0+0xca>
 800966c:	2e00      	cmp	r6, #0
 800966e:	db1f      	blt.n	80096b0 <_strtol_l.isra.0+0xc4>
 8009670:	45a9      	cmp	r9, r5
 8009672:	d31d      	bcc.n	80096b0 <_strtol_l.isra.0+0xc4>
 8009674:	d101      	bne.n	800967a <_strtol_l.isra.0+0x8e>
 8009676:	45a2      	cmp	sl, r4
 8009678:	db1a      	blt.n	80096b0 <_strtol_l.isra.0+0xc4>
 800967a:	fb05 4503 	mla	r5, r5, r3, r4
 800967e:	2601      	movs	r6, #1
 8009680:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009684:	e7eb      	b.n	800965e <_strtol_l.isra.0+0x72>
 8009686:	2c2b      	cmp	r4, #43	; 0x2b
 8009688:	bf08      	it	eq
 800968a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800968e:	46a8      	mov	r8, r5
 8009690:	bf08      	it	eq
 8009692:	f106 0e02 	addeq.w	lr, r6, #2
 8009696:	e7c7      	b.n	8009628 <_strtol_l.isra.0+0x3c>
 8009698:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800969c:	2f19      	cmp	r7, #25
 800969e:	d801      	bhi.n	80096a4 <_strtol_l.isra.0+0xb8>
 80096a0:	3c37      	subs	r4, #55	; 0x37
 80096a2:	e7e1      	b.n	8009668 <_strtol_l.isra.0+0x7c>
 80096a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80096a8:	2f19      	cmp	r7, #25
 80096aa:	d804      	bhi.n	80096b6 <_strtol_l.isra.0+0xca>
 80096ac:	3c57      	subs	r4, #87	; 0x57
 80096ae:	e7db      	b.n	8009668 <_strtol_l.isra.0+0x7c>
 80096b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80096b4:	e7e4      	b.n	8009680 <_strtol_l.isra.0+0x94>
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	da05      	bge.n	80096c6 <_strtol_l.isra.0+0xda>
 80096ba:	2322      	movs	r3, #34	; 0x22
 80096bc:	6003      	str	r3, [r0, #0]
 80096be:	4665      	mov	r5, ip
 80096c0:	b942      	cbnz	r2, 80096d4 <_strtol_l.isra.0+0xe8>
 80096c2:	4628      	mov	r0, r5
 80096c4:	e79d      	b.n	8009602 <_strtol_l.isra.0+0x16>
 80096c6:	f1b8 0f00 	cmp.w	r8, #0
 80096ca:	d000      	beq.n	80096ce <_strtol_l.isra.0+0xe2>
 80096cc:	426d      	negs	r5, r5
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	d0f7      	beq.n	80096c2 <_strtol_l.isra.0+0xd6>
 80096d2:	b10e      	cbz	r6, 80096d8 <_strtol_l.isra.0+0xec>
 80096d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80096d8:	6011      	str	r1, [r2, #0]
 80096da:	e7f2      	b.n	80096c2 <_strtol_l.isra.0+0xd6>
 80096dc:	2430      	movs	r4, #48	; 0x30
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1b3      	bne.n	800964a <_strtol_l.isra.0+0x5e>
 80096e2:	2308      	movs	r3, #8
 80096e4:	e7b1      	b.n	800964a <_strtol_l.isra.0+0x5e>
 80096e6:	2c30      	cmp	r4, #48	; 0x30
 80096e8:	d0a4      	beq.n	8009634 <_strtol_l.isra.0+0x48>
 80096ea:	230a      	movs	r3, #10
 80096ec:	e7ad      	b.n	800964a <_strtol_l.isra.0+0x5e>
 80096ee:	bf00      	nop
 80096f0:	0800bf7d 	.word	0x0800bf7d

080096f4 <strtol>:
 80096f4:	4613      	mov	r3, r2
 80096f6:	460a      	mov	r2, r1
 80096f8:	4601      	mov	r1, r0
 80096fa:	4802      	ldr	r0, [pc, #8]	; (8009704 <strtol+0x10>)
 80096fc:	6800      	ldr	r0, [r0, #0]
 80096fe:	f7ff bf75 	b.w	80095ec <_strtol_l.isra.0>
 8009702:	bf00      	nop
 8009704:	20000010 	.word	0x20000010

08009708 <__swbuf_r>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	460e      	mov	r6, r1
 800970c:	4614      	mov	r4, r2
 800970e:	4605      	mov	r5, r0
 8009710:	b118      	cbz	r0, 800971a <__swbuf_r+0x12>
 8009712:	6983      	ldr	r3, [r0, #24]
 8009714:	b90b      	cbnz	r3, 800971a <__swbuf_r+0x12>
 8009716:	f7ff f83f 	bl	8008798 <__sinit>
 800971a:	4b21      	ldr	r3, [pc, #132]	; (80097a0 <__swbuf_r+0x98>)
 800971c:	429c      	cmp	r4, r3
 800971e:	d12b      	bne.n	8009778 <__swbuf_r+0x70>
 8009720:	686c      	ldr	r4, [r5, #4]
 8009722:	69a3      	ldr	r3, [r4, #24]
 8009724:	60a3      	str	r3, [r4, #8]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	071a      	lsls	r2, r3, #28
 800972a:	d52f      	bpl.n	800978c <__swbuf_r+0x84>
 800972c:	6923      	ldr	r3, [r4, #16]
 800972e:	b36b      	cbz	r3, 800978c <__swbuf_r+0x84>
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	6820      	ldr	r0, [r4, #0]
 8009734:	1ac0      	subs	r0, r0, r3
 8009736:	6963      	ldr	r3, [r4, #20]
 8009738:	b2f6      	uxtb	r6, r6
 800973a:	4283      	cmp	r3, r0
 800973c:	4637      	mov	r7, r6
 800973e:	dc04      	bgt.n	800974a <__swbuf_r+0x42>
 8009740:	4621      	mov	r1, r4
 8009742:	4628      	mov	r0, r5
 8009744:	f7fe ff82 	bl	800864c <_fflush_r>
 8009748:	bb30      	cbnz	r0, 8009798 <__swbuf_r+0x90>
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	3b01      	subs	r3, #1
 800974e:	60a3      	str	r3, [r4, #8]
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	6022      	str	r2, [r4, #0]
 8009756:	701e      	strb	r6, [r3, #0]
 8009758:	6963      	ldr	r3, [r4, #20]
 800975a:	3001      	adds	r0, #1
 800975c:	4283      	cmp	r3, r0
 800975e:	d004      	beq.n	800976a <__swbuf_r+0x62>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	07db      	lsls	r3, r3, #31
 8009764:	d506      	bpl.n	8009774 <__swbuf_r+0x6c>
 8009766:	2e0a      	cmp	r6, #10
 8009768:	d104      	bne.n	8009774 <__swbuf_r+0x6c>
 800976a:	4621      	mov	r1, r4
 800976c:	4628      	mov	r0, r5
 800976e:	f7fe ff6d 	bl	800864c <_fflush_r>
 8009772:	b988      	cbnz	r0, 8009798 <__swbuf_r+0x90>
 8009774:	4638      	mov	r0, r7
 8009776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <__swbuf_r+0x9c>)
 800977a:	429c      	cmp	r4, r3
 800977c:	d101      	bne.n	8009782 <__swbuf_r+0x7a>
 800977e:	68ac      	ldr	r4, [r5, #8]
 8009780:	e7cf      	b.n	8009722 <__swbuf_r+0x1a>
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <__swbuf_r+0xa0>)
 8009784:	429c      	cmp	r4, r3
 8009786:	bf08      	it	eq
 8009788:	68ec      	ldreq	r4, [r5, #12]
 800978a:	e7ca      	b.n	8009722 <__swbuf_r+0x1a>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f81e 	bl	80097d0 <__swsetup_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	d0cb      	beq.n	8009730 <__swbuf_r+0x28>
 8009798:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800979c:	e7ea      	b.n	8009774 <__swbuf_r+0x6c>
 800979e:	bf00      	nop
 80097a0:	0800bf04 	.word	0x0800bf04
 80097a4:	0800bf24 	.word	0x0800bf24
 80097a8:	0800bee4 	.word	0x0800bee4

080097ac <_write_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d07      	ldr	r5, [pc, #28]	; (80097cc <_write_r+0x20>)
 80097b0:	4604      	mov	r4, r0
 80097b2:	4608      	mov	r0, r1
 80097b4:	4611      	mov	r1, r2
 80097b6:	2200      	movs	r2, #0
 80097b8:	602a      	str	r2, [r5, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	f7f8 fde8 	bl	8002390 <_write>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d102      	bne.n	80097ca <_write_r+0x1e>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	b103      	cbz	r3, 80097ca <_write_r+0x1e>
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	2000c320 	.word	0x2000c320

080097d0 <__swsetup_r>:
 80097d0:	4b32      	ldr	r3, [pc, #200]	; (800989c <__swsetup_r+0xcc>)
 80097d2:	b570      	push	{r4, r5, r6, lr}
 80097d4:	681d      	ldr	r5, [r3, #0]
 80097d6:	4606      	mov	r6, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	b125      	cbz	r5, 80097e6 <__swsetup_r+0x16>
 80097dc:	69ab      	ldr	r3, [r5, #24]
 80097de:	b913      	cbnz	r3, 80097e6 <__swsetup_r+0x16>
 80097e0:	4628      	mov	r0, r5
 80097e2:	f7fe ffd9 	bl	8008798 <__sinit>
 80097e6:	4b2e      	ldr	r3, [pc, #184]	; (80098a0 <__swsetup_r+0xd0>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d10f      	bne.n	800980c <__swsetup_r+0x3c>
 80097ec:	686c      	ldr	r4, [r5, #4]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097f4:	0719      	lsls	r1, r3, #28
 80097f6:	d42c      	bmi.n	8009852 <__swsetup_r+0x82>
 80097f8:	06dd      	lsls	r5, r3, #27
 80097fa:	d411      	bmi.n	8009820 <__swsetup_r+0x50>
 80097fc:	2309      	movs	r3, #9
 80097fe:	6033      	str	r3, [r6, #0]
 8009800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800980a:	e03e      	b.n	800988a <__swsetup_r+0xba>
 800980c:	4b25      	ldr	r3, [pc, #148]	; (80098a4 <__swsetup_r+0xd4>)
 800980e:	429c      	cmp	r4, r3
 8009810:	d101      	bne.n	8009816 <__swsetup_r+0x46>
 8009812:	68ac      	ldr	r4, [r5, #8]
 8009814:	e7eb      	b.n	80097ee <__swsetup_r+0x1e>
 8009816:	4b24      	ldr	r3, [pc, #144]	; (80098a8 <__swsetup_r+0xd8>)
 8009818:	429c      	cmp	r4, r3
 800981a:	bf08      	it	eq
 800981c:	68ec      	ldreq	r4, [r5, #12]
 800981e:	e7e6      	b.n	80097ee <__swsetup_r+0x1e>
 8009820:	0758      	lsls	r0, r3, #29
 8009822:	d512      	bpl.n	800984a <__swsetup_r+0x7a>
 8009824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009826:	b141      	cbz	r1, 800983a <__swsetup_r+0x6a>
 8009828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800982c:	4299      	cmp	r1, r3
 800982e:	d002      	beq.n	8009836 <__swsetup_r+0x66>
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff f88d 	bl	8008950 <_free_r>
 8009836:	2300      	movs	r3, #0
 8009838:	6363      	str	r3, [r4, #52]	; 0x34
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	2300      	movs	r3, #0
 8009844:	6063      	str	r3, [r4, #4]
 8009846:	6923      	ldr	r3, [r4, #16]
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	f043 0308 	orr.w	r3, r3, #8
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	6923      	ldr	r3, [r4, #16]
 8009854:	b94b      	cbnz	r3, 800986a <__swsetup_r+0x9a>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800985c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009860:	d003      	beq.n	800986a <__swsetup_r+0x9a>
 8009862:	4621      	mov	r1, r4
 8009864:	4630      	mov	r0, r6
 8009866:	f000 fee5 	bl	800a634 <__smakebuf_r>
 800986a:	89a0      	ldrh	r0, [r4, #12]
 800986c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009870:	f010 0301 	ands.w	r3, r0, #1
 8009874:	d00a      	beq.n	800988c <__swsetup_r+0xbc>
 8009876:	2300      	movs	r3, #0
 8009878:	60a3      	str	r3, [r4, #8]
 800987a:	6963      	ldr	r3, [r4, #20]
 800987c:	425b      	negs	r3, r3
 800987e:	61a3      	str	r3, [r4, #24]
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	b943      	cbnz	r3, 8009896 <__swsetup_r+0xc6>
 8009884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009888:	d1ba      	bne.n	8009800 <__swsetup_r+0x30>
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	0781      	lsls	r1, r0, #30
 800988e:	bf58      	it	pl
 8009890:	6963      	ldrpl	r3, [r4, #20]
 8009892:	60a3      	str	r3, [r4, #8]
 8009894:	e7f4      	b.n	8009880 <__swsetup_r+0xb0>
 8009896:	2000      	movs	r0, #0
 8009898:	e7f7      	b.n	800988a <__swsetup_r+0xba>
 800989a:	bf00      	nop
 800989c:	20000010 	.word	0x20000010
 80098a0:	0800bf04 	.word	0x0800bf04
 80098a4:	0800bf24 	.word	0x0800bf24
 80098a8:	0800bee4 	.word	0x0800bee4

080098ac <_close_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d06      	ldr	r5, [pc, #24]	; (80098c8 <_close_r+0x1c>)
 80098b0:	2300      	movs	r3, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	f7f8 fced 	bl	8002296 <_close>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_close_r+0x1a>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_close_r+0x1a>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	2000c320 	.word	0x2000c320

080098cc <quorem>:
 80098cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	6903      	ldr	r3, [r0, #16]
 80098d2:	690c      	ldr	r4, [r1, #16]
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	4607      	mov	r7, r0
 80098d8:	f2c0 8081 	blt.w	80099de <quorem+0x112>
 80098dc:	3c01      	subs	r4, #1
 80098de:	f101 0814 	add.w	r8, r1, #20
 80098e2:	f100 0514 	add.w	r5, r0, #20
 80098e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098f4:	3301      	adds	r3, #1
 80098f6:	429a      	cmp	r2, r3
 80098f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009900:	fbb2 f6f3 	udiv	r6, r2, r3
 8009904:	d331      	bcc.n	800996a <quorem+0x9e>
 8009906:	f04f 0e00 	mov.w	lr, #0
 800990a:	4640      	mov	r0, r8
 800990c:	46ac      	mov	ip, r5
 800990e:	46f2      	mov	sl, lr
 8009910:	f850 2b04 	ldr.w	r2, [r0], #4
 8009914:	b293      	uxth	r3, r2
 8009916:	fb06 e303 	mla	r3, r6, r3, lr
 800991a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800991e:	b29b      	uxth	r3, r3
 8009920:	ebaa 0303 	sub.w	r3, sl, r3
 8009924:	0c12      	lsrs	r2, r2, #16
 8009926:	f8dc a000 	ldr.w	sl, [ip]
 800992a:	fb06 e202 	mla	r2, r6, r2, lr
 800992e:	fa13 f38a 	uxtah	r3, r3, sl
 8009932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009936:	fa1f fa82 	uxth.w	sl, r2
 800993a:	f8dc 2000 	ldr.w	r2, [ip]
 800993e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009942:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994c:	4581      	cmp	r9, r0
 800994e:	f84c 3b04 	str.w	r3, [ip], #4
 8009952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009956:	d2db      	bcs.n	8009910 <quorem+0x44>
 8009958:	f855 300b 	ldr.w	r3, [r5, fp]
 800995c:	b92b      	cbnz	r3, 800996a <quorem+0x9e>
 800995e:	9b01      	ldr	r3, [sp, #4]
 8009960:	3b04      	subs	r3, #4
 8009962:	429d      	cmp	r5, r3
 8009964:	461a      	mov	r2, r3
 8009966:	d32e      	bcc.n	80099c6 <quorem+0xfa>
 8009968:	613c      	str	r4, [r7, #16]
 800996a:	4638      	mov	r0, r7
 800996c:	f001 f94e 	bl	800ac0c <__mcmp>
 8009970:	2800      	cmp	r0, #0
 8009972:	db24      	blt.n	80099be <quorem+0xf2>
 8009974:	3601      	adds	r6, #1
 8009976:	4628      	mov	r0, r5
 8009978:	f04f 0c00 	mov.w	ip, #0
 800997c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009980:	f8d0 e000 	ldr.w	lr, [r0]
 8009984:	b293      	uxth	r3, r2
 8009986:	ebac 0303 	sub.w	r3, ip, r3
 800998a:	0c12      	lsrs	r2, r2, #16
 800998c:	fa13 f38e 	uxtah	r3, r3, lr
 8009990:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009998:	b29b      	uxth	r3, r3
 800999a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800999e:	45c1      	cmp	r9, r8
 80099a0:	f840 3b04 	str.w	r3, [r0], #4
 80099a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099a8:	d2e8      	bcs.n	800997c <quorem+0xb0>
 80099aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099b2:	b922      	cbnz	r2, 80099be <quorem+0xf2>
 80099b4:	3b04      	subs	r3, #4
 80099b6:	429d      	cmp	r5, r3
 80099b8:	461a      	mov	r2, r3
 80099ba:	d30a      	bcc.n	80099d2 <quorem+0x106>
 80099bc:	613c      	str	r4, [r7, #16]
 80099be:	4630      	mov	r0, r6
 80099c0:	b003      	add	sp, #12
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	3b04      	subs	r3, #4
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	d1cc      	bne.n	8009968 <quorem+0x9c>
 80099ce:	3c01      	subs	r4, #1
 80099d0:	e7c7      	b.n	8009962 <quorem+0x96>
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	3b04      	subs	r3, #4
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	d1f0      	bne.n	80099bc <quorem+0xf0>
 80099da:	3c01      	subs	r4, #1
 80099dc:	e7eb      	b.n	80099b6 <quorem+0xea>
 80099de:	2000      	movs	r0, #0
 80099e0:	e7ee      	b.n	80099c0 <quorem+0xf4>
 80099e2:	0000      	movs	r0, r0
 80099e4:	0000      	movs	r0, r0
	...

080099e8 <_dtoa_r>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	ed2d 8b02 	vpush	{d8}
 80099f0:	ec57 6b10 	vmov	r6, r7, d0
 80099f4:	b095      	sub	sp, #84	; 0x54
 80099f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099fc:	9105      	str	r1, [sp, #20]
 80099fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009a02:	4604      	mov	r4, r0
 8009a04:	9209      	str	r2, [sp, #36]	; 0x24
 8009a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a08:	b975      	cbnz	r5, 8009a28 <_dtoa_r+0x40>
 8009a0a:	2010      	movs	r0, #16
 8009a0c:	f000 fe52 	bl	800a6b4 <malloc>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6260      	str	r0, [r4, #36]	; 0x24
 8009a14:	b920      	cbnz	r0, 8009a20 <_dtoa_r+0x38>
 8009a16:	4bb2      	ldr	r3, [pc, #712]	; (8009ce0 <_dtoa_r+0x2f8>)
 8009a18:	21ea      	movs	r1, #234	; 0xea
 8009a1a:	48b2      	ldr	r0, [pc, #712]	; (8009ce4 <_dtoa_r+0x2fc>)
 8009a1c:	f001 fcda 	bl	800b3d4 <__assert_func>
 8009a20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a24:	6005      	str	r5, [r0, #0]
 8009a26:	60c5      	str	r5, [r0, #12]
 8009a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a2a:	6819      	ldr	r1, [r3, #0]
 8009a2c:	b151      	cbz	r1, 8009a44 <_dtoa_r+0x5c>
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	604a      	str	r2, [r1, #4]
 8009a32:	2301      	movs	r3, #1
 8009a34:	4093      	lsls	r3, r2
 8009a36:	608b      	str	r3, [r1, #8]
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 fea9 	bl	800a790 <_Bfree>
 8009a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	1e3b      	subs	r3, r7, #0
 8009a46:	bfb9      	ittee	lt
 8009a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a4c:	9303      	strlt	r3, [sp, #12]
 8009a4e:	2300      	movge	r3, #0
 8009a50:	f8c8 3000 	strge.w	r3, [r8]
 8009a54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009a58:	4ba3      	ldr	r3, [pc, #652]	; (8009ce8 <_dtoa_r+0x300>)
 8009a5a:	bfbc      	itt	lt
 8009a5c:	2201      	movlt	r2, #1
 8009a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8009a62:	ea33 0309 	bics.w	r3, r3, r9
 8009a66:	d11b      	bne.n	8009aa0 <_dtoa_r+0xb8>
 8009a68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a74:	4333      	orrs	r3, r6
 8009a76:	f000 857a 	beq.w	800a56e <_dtoa_r+0xb86>
 8009a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a7c:	b963      	cbnz	r3, 8009a98 <_dtoa_r+0xb0>
 8009a7e:	4b9b      	ldr	r3, [pc, #620]	; (8009cec <_dtoa_r+0x304>)
 8009a80:	e024      	b.n	8009acc <_dtoa_r+0xe4>
 8009a82:	4b9b      	ldr	r3, [pc, #620]	; (8009cf0 <_dtoa_r+0x308>)
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	9800      	ldr	r0, [sp, #0]
 8009a8e:	b015      	add	sp, #84	; 0x54
 8009a90:	ecbd 8b02 	vpop	{d8}
 8009a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a98:	4b94      	ldr	r3, [pc, #592]	; (8009cec <_dtoa_r+0x304>)
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	3303      	adds	r3, #3
 8009a9e:	e7f3      	b.n	8009a88 <_dtoa_r+0xa0>
 8009aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	ec51 0b17 	vmov	r0, r1, d7
 8009aaa:	2300      	movs	r3, #0
 8009aac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009ab0:	f7f7 f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	b158      	cbz	r0, 8009ad0 <_dtoa_r+0xe8>
 8009ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aba:	2301      	movs	r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 8551 	beq.w	800a568 <_dtoa_r+0xb80>
 8009ac6:	488b      	ldr	r0, [pc, #556]	; (8009cf4 <_dtoa_r+0x30c>)
 8009ac8:	6018      	str	r0, [r3, #0]
 8009aca:	1e43      	subs	r3, r0, #1
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	e7dd      	b.n	8009a8c <_dtoa_r+0xa4>
 8009ad0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009ad4:	aa12      	add	r2, sp, #72	; 0x48
 8009ad6:	a913      	add	r1, sp, #76	; 0x4c
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f001 f93b 	bl	800ad54 <__d2b>
 8009ade:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ae2:	4683      	mov	fp, r0
 8009ae4:	2d00      	cmp	r5, #0
 8009ae6:	d07c      	beq.n	8009be2 <_dtoa_r+0x1fa>
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009af2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009af6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009afa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b02:	4b7d      	ldr	r3, [pc, #500]	; (8009cf8 <_dtoa_r+0x310>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 fbc5 	bl	8000298 <__aeabi_dsub>
 8009b0e:	a36e      	add	r3, pc, #440	; (adr r3, 8009cc8 <_dtoa_r+0x2e0>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fd78 	bl	8000608 <__aeabi_dmul>
 8009b18:	a36d      	add	r3, pc, #436	; (adr r3, 8009cd0 <_dtoa_r+0x2e8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fbbd 	bl	800029c <__adddf3>
 8009b22:	4606      	mov	r6, r0
 8009b24:	4628      	mov	r0, r5
 8009b26:	460f      	mov	r7, r1
 8009b28:	f7f6 fd04 	bl	8000534 <__aeabi_i2d>
 8009b2c:	a36a      	add	r3, pc, #424	; (adr r3, 8009cd8 <_dtoa_r+0x2f0>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7f6 fd69 	bl	8000608 <__aeabi_dmul>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	f7f6 fbad 	bl	800029c <__adddf3>
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	f7f7 f80f 	bl	8000b68 <__aeabi_d2iz>
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4630      	mov	r0, r6
 8009b52:	4639      	mov	r1, r7
 8009b54:	f7f6 ffca 	bl	8000aec <__aeabi_dcmplt>
 8009b58:	b148      	cbz	r0, 8009b6e <_dtoa_r+0x186>
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	f7f6 fcea 	bl	8000534 <__aeabi_i2d>
 8009b60:	4632      	mov	r2, r6
 8009b62:	463b      	mov	r3, r7
 8009b64:	f7f6 ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b68:	b908      	cbnz	r0, 8009b6e <_dtoa_r+0x186>
 8009b6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b6e:	f1ba 0f16 	cmp.w	sl, #22
 8009b72:	d854      	bhi.n	8009c1e <_dtoa_r+0x236>
 8009b74:	4b61      	ldr	r3, [pc, #388]	; (8009cfc <_dtoa_r+0x314>)
 8009b76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b82:	f7f6 ffb3 	bl	8000aec <__aeabi_dcmplt>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d04b      	beq.n	8009c22 <_dtoa_r+0x23a>
 8009b8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b8e:	2300      	movs	r3, #0
 8009b90:	930e      	str	r3, [sp, #56]	; 0x38
 8009b92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b94:	1b5d      	subs	r5, r3, r5
 8009b96:	1e6b      	subs	r3, r5, #1
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	bf43      	ittte	mi
 8009b9c:	2300      	movmi	r3, #0
 8009b9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009ba2:	9304      	strmi	r3, [sp, #16]
 8009ba4:	f04f 0800 	movpl.w	r8, #0
 8009ba8:	f1ba 0f00 	cmp.w	sl, #0
 8009bac:	db3b      	blt.n	8009c26 <_dtoa_r+0x23e>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009bb4:	4453      	add	r3, sl
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9306      	str	r3, [sp, #24]
 8009bbc:	9b05      	ldr	r3, [sp, #20]
 8009bbe:	2b09      	cmp	r3, #9
 8009bc0:	d869      	bhi.n	8009c96 <_dtoa_r+0x2ae>
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	bfc4      	itt	gt
 8009bc6:	3b04      	subgt	r3, #4
 8009bc8:	9305      	strgt	r3, [sp, #20]
 8009bca:	9b05      	ldr	r3, [sp, #20]
 8009bcc:	f1a3 0302 	sub.w	r3, r3, #2
 8009bd0:	bfcc      	ite	gt
 8009bd2:	2500      	movgt	r5, #0
 8009bd4:	2501      	movle	r5, #1
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d869      	bhi.n	8009cae <_dtoa_r+0x2c6>
 8009bda:	e8df f003 	tbb	[pc, r3]
 8009bde:	4e2c      	.short	0x4e2c
 8009be0:	5a4c      	.short	0x5a4c
 8009be2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009be6:	441d      	add	r5, r3
 8009be8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	bfc1      	itttt	gt
 8009bf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bf4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bf8:	fa09 f303 	lslgt.w	r3, r9, r3
 8009bfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c00:	bfda      	itte	le
 8009c02:	f1c3 0320 	rsble	r3, r3, #32
 8009c06:	fa06 f003 	lslle.w	r0, r6, r3
 8009c0a:	4318      	orrgt	r0, r3
 8009c0c:	f7f6 fc82 	bl	8000514 <__aeabi_ui2d>
 8009c10:	2301      	movs	r3, #1
 8009c12:	4606      	mov	r6, r0
 8009c14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c18:	3d01      	subs	r5, #1
 8009c1a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c1c:	e771      	b.n	8009b02 <_dtoa_r+0x11a>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e7b6      	b.n	8009b90 <_dtoa_r+0x1a8>
 8009c22:	900e      	str	r0, [sp, #56]	; 0x38
 8009c24:	e7b5      	b.n	8009b92 <_dtoa_r+0x1aa>
 8009c26:	f1ca 0300 	rsb	r3, sl, #0
 8009c2a:	9306      	str	r3, [sp, #24]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	eba8 080a 	sub.w	r8, r8, sl
 8009c32:	930d      	str	r3, [sp, #52]	; 0x34
 8009c34:	e7c2      	b.n	8009bbc <_dtoa_r+0x1d4>
 8009c36:	2300      	movs	r3, #0
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dc39      	bgt.n	8009cb4 <_dtoa_r+0x2cc>
 8009c40:	f04f 0901 	mov.w	r9, #1
 8009c44:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c48:	464b      	mov	r3, r9
 8009c4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c50:	2200      	movs	r2, #0
 8009c52:	6042      	str	r2, [r0, #4]
 8009c54:	2204      	movs	r2, #4
 8009c56:	f102 0614 	add.w	r6, r2, #20
 8009c5a:	429e      	cmp	r6, r3
 8009c5c:	6841      	ldr	r1, [r0, #4]
 8009c5e:	d92f      	bls.n	8009cc0 <_dtoa_r+0x2d8>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fd55 	bl	800a710 <_Balloc>
 8009c66:	9000      	str	r0, [sp, #0]
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d14b      	bne.n	8009d04 <_dtoa_r+0x31c>
 8009c6c:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <_dtoa_r+0x318>)
 8009c6e:	4602      	mov	r2, r0
 8009c70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c74:	e6d1      	b.n	8009a1a <_dtoa_r+0x32>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e7de      	b.n	8009c38 <_dtoa_r+0x250>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9308      	str	r3, [sp, #32]
 8009c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c80:	eb0a 0903 	add.w	r9, sl, r3
 8009c84:	f109 0301 	add.w	r3, r9, #1
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	bfb8      	it	lt
 8009c8e:	2301      	movlt	r3, #1
 8009c90:	e7dd      	b.n	8009c4e <_dtoa_r+0x266>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7f2      	b.n	8009c7c <_dtoa_r+0x294>
 8009c96:	2501      	movs	r5, #1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	9508      	str	r5, [sp, #32]
 8009c9e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ca8:	2312      	movs	r3, #18
 8009caa:	9209      	str	r2, [sp, #36]	; 0x24
 8009cac:	e7cf      	b.n	8009c4e <_dtoa_r+0x266>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	9308      	str	r3, [sp, #32]
 8009cb2:	e7f4      	b.n	8009c9e <_dtoa_r+0x2b6>
 8009cb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009cb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	e7c6      	b.n	8009c4e <_dtoa_r+0x266>
 8009cc0:	3101      	adds	r1, #1
 8009cc2:	6041      	str	r1, [r0, #4]
 8009cc4:	0052      	lsls	r2, r2, #1
 8009cc6:	e7c6      	b.n	8009c56 <_dtoa_r+0x26e>
 8009cc8:	636f4361 	.word	0x636f4361
 8009ccc:	3fd287a7 	.word	0x3fd287a7
 8009cd0:	8b60c8b3 	.word	0x8b60c8b3
 8009cd4:	3fc68a28 	.word	0x3fc68a28
 8009cd8:	509f79fb 	.word	0x509f79fb
 8009cdc:	3fd34413 	.word	0x3fd34413
 8009ce0:	0800c08a 	.word	0x0800c08a
 8009ce4:	0800c0a1 	.word	0x0800c0a1
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	0800c086 	.word	0x0800c086
 8009cf0:	0800c07d 	.word	0x0800c07d
 8009cf4:	0800bf59 	.word	0x0800bf59
 8009cf8:	3ff80000 	.word	0x3ff80000
 8009cfc:	0800c1a0 	.word	0x0800c1a0
 8009d00:	0800c100 	.word	0x0800c100
 8009d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d06:	9a00      	ldr	r2, [sp, #0]
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	9b01      	ldr	r3, [sp, #4]
 8009d0c:	2b0e      	cmp	r3, #14
 8009d0e:	f200 80ad 	bhi.w	8009e6c <_dtoa_r+0x484>
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	f000 80aa 	beq.w	8009e6c <_dtoa_r+0x484>
 8009d18:	f1ba 0f00 	cmp.w	sl, #0
 8009d1c:	dd36      	ble.n	8009d8c <_dtoa_r+0x3a4>
 8009d1e:	4ac3      	ldr	r2, [pc, #780]	; (800a02c <_dtoa_r+0x644>)
 8009d20:	f00a 030f 	and.w	r3, sl, #15
 8009d24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d28:	ed93 7b00 	vldr	d7, [r3]
 8009d2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009d30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009d34:	eeb0 8a47 	vmov.f32	s16, s14
 8009d38:	eef0 8a67 	vmov.f32	s17, s15
 8009d3c:	d016      	beq.n	8009d6c <_dtoa_r+0x384>
 8009d3e:	4bbc      	ldr	r3, [pc, #752]	; (800a030 <_dtoa_r+0x648>)
 8009d40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d48:	f7f6 fd88 	bl	800085c <__aeabi_ddiv>
 8009d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d50:	f007 070f 	and.w	r7, r7, #15
 8009d54:	2503      	movs	r5, #3
 8009d56:	4eb6      	ldr	r6, [pc, #728]	; (800a030 <_dtoa_r+0x648>)
 8009d58:	b957      	cbnz	r7, 8009d70 <_dtoa_r+0x388>
 8009d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5e:	ec53 2b18 	vmov	r2, r3, d8
 8009d62:	f7f6 fd7b 	bl	800085c <__aeabi_ddiv>
 8009d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6a:	e029      	b.n	8009dc0 <_dtoa_r+0x3d8>
 8009d6c:	2502      	movs	r5, #2
 8009d6e:	e7f2      	b.n	8009d56 <_dtoa_r+0x36e>
 8009d70:	07f9      	lsls	r1, r7, #31
 8009d72:	d508      	bpl.n	8009d86 <_dtoa_r+0x39e>
 8009d74:	ec51 0b18 	vmov	r0, r1, d8
 8009d78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d7c:	f7f6 fc44 	bl	8000608 <__aeabi_dmul>
 8009d80:	ec41 0b18 	vmov	d8, r0, r1
 8009d84:	3501      	adds	r5, #1
 8009d86:	107f      	asrs	r7, r7, #1
 8009d88:	3608      	adds	r6, #8
 8009d8a:	e7e5      	b.n	8009d58 <_dtoa_r+0x370>
 8009d8c:	f000 80a6 	beq.w	8009edc <_dtoa_r+0x4f4>
 8009d90:	f1ca 0600 	rsb	r6, sl, #0
 8009d94:	4ba5      	ldr	r3, [pc, #660]	; (800a02c <_dtoa_r+0x644>)
 8009d96:	4fa6      	ldr	r7, [pc, #664]	; (800a030 <_dtoa_r+0x648>)
 8009d98:	f006 020f 	and.w	r2, r6, #15
 8009d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009da8:	f7f6 fc2e 	bl	8000608 <__aeabi_dmul>
 8009dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db0:	1136      	asrs	r6, r6, #4
 8009db2:	2300      	movs	r3, #0
 8009db4:	2502      	movs	r5, #2
 8009db6:	2e00      	cmp	r6, #0
 8009db8:	f040 8085 	bne.w	8009ec6 <_dtoa_r+0x4de>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1d2      	bne.n	8009d66 <_dtoa_r+0x37e>
 8009dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 808c 	beq.w	8009ee0 <_dtoa_r+0x4f8>
 8009dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009dcc:	4b99      	ldr	r3, [pc, #612]	; (800a034 <_dtoa_r+0x64c>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fe8a 	bl	8000aec <__aeabi_dcmplt>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	f000 8081 	beq.w	8009ee0 <_dtoa_r+0x4f8>
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d07d      	beq.n	8009ee0 <_dtoa_r+0x4f8>
 8009de4:	f1b9 0f00 	cmp.w	r9, #0
 8009de8:	dd3c      	ble.n	8009e64 <_dtoa_r+0x47c>
 8009dea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	2200      	movs	r2, #0
 8009df2:	4b91      	ldr	r3, [pc, #580]	; (800a038 <_dtoa_r+0x650>)
 8009df4:	4630      	mov	r0, r6
 8009df6:	4639      	mov	r1, r7
 8009df8:	f7f6 fc06 	bl	8000608 <__aeabi_dmul>
 8009dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e00:	3501      	adds	r5, #1
 8009e02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009e06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f7f6 fb92 	bl	8000534 <__aeabi_i2d>
 8009e10:	4632      	mov	r2, r6
 8009e12:	463b      	mov	r3, r7
 8009e14:	f7f6 fbf8 	bl	8000608 <__aeabi_dmul>
 8009e18:	4b88      	ldr	r3, [pc, #544]	; (800a03c <_dtoa_r+0x654>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7f6 fa3e 	bl	800029c <__adddf3>
 8009e20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d15c      	bne.n	8009eea <_dtoa_r+0x502>
 8009e30:	4b83      	ldr	r3, [pc, #524]	; (800a040 <_dtoa_r+0x658>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fa2e 	bl	8000298 <__aeabi_dsub>
 8009e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	f7f6 fe70 	bl	8000b28 <__aeabi_dcmpgt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f040 8296 	bne.w	800a37a <_dtoa_r+0x992>
 8009e4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e52:	4630      	mov	r0, r6
 8009e54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fe47 	bl	8000aec <__aeabi_dcmplt>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	f040 8288 	bne.w	800a374 <_dtoa_r+0x98c>
 8009e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f2c0 8158 	blt.w	800a124 <_dtoa_r+0x73c>
 8009e74:	f1ba 0f0e 	cmp.w	sl, #14
 8009e78:	f300 8154 	bgt.w	800a124 <_dtoa_r+0x73c>
 8009e7c:	4b6b      	ldr	r3, [pc, #428]	; (800a02c <_dtoa_r+0x644>)
 8009e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f280 80e3 	bge.w	800a054 <_dtoa_r+0x66c>
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f300 80df 	bgt.w	800a054 <_dtoa_r+0x66c>
 8009e96:	f040 826d 	bne.w	800a374 <_dtoa_r+0x98c>
 8009e9a:	4b69      	ldr	r3, [pc, #420]	; (800a040 <_dtoa_r+0x658>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	f7f6 fbb1 	bl	8000608 <__aeabi_dmul>
 8009ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eaa:	f7f6 fe33 	bl	8000b14 <__aeabi_dcmpge>
 8009eae:	9e01      	ldr	r6, [sp, #4]
 8009eb0:	4637      	mov	r7, r6
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f040 8243 	bne.w	800a33e <_dtoa_r+0x956>
 8009eb8:	9d00      	ldr	r5, [sp, #0]
 8009eba:	2331      	movs	r3, #49	; 0x31
 8009ebc:	f805 3b01 	strb.w	r3, [r5], #1
 8009ec0:	f10a 0a01 	add.w	sl, sl, #1
 8009ec4:	e23f      	b.n	800a346 <_dtoa_r+0x95e>
 8009ec6:	07f2      	lsls	r2, r6, #31
 8009ec8:	d505      	bpl.n	8009ed6 <_dtoa_r+0x4ee>
 8009eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ece:	f7f6 fb9b 	bl	8000608 <__aeabi_dmul>
 8009ed2:	3501      	adds	r5, #1
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	1076      	asrs	r6, r6, #1
 8009ed8:	3708      	adds	r7, #8
 8009eda:	e76c      	b.n	8009db6 <_dtoa_r+0x3ce>
 8009edc:	2502      	movs	r5, #2
 8009ede:	e76f      	b.n	8009dc0 <_dtoa_r+0x3d8>
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ee8:	e78d      	b.n	8009e06 <_dtoa_r+0x41e>
 8009eea:	9900      	ldr	r1, [sp, #0]
 8009eec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ef0:	4b4e      	ldr	r3, [pc, #312]	; (800a02c <_dtoa_r+0x644>)
 8009ef2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ef6:	4401      	add	r1, r0
 8009ef8:	9102      	str	r1, [sp, #8]
 8009efa:	9908      	ldr	r1, [sp, #32]
 8009efc:	eeb0 8a47 	vmov.f32	s16, s14
 8009f00:	eef0 8a67 	vmov.f32	s17, s15
 8009f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d045      	beq.n	8009f9c <_dtoa_r+0x5b4>
 8009f10:	494c      	ldr	r1, [pc, #304]	; (800a044 <_dtoa_r+0x65c>)
 8009f12:	2000      	movs	r0, #0
 8009f14:	f7f6 fca2 	bl	800085c <__aeabi_ddiv>
 8009f18:	ec53 2b18 	vmov	r2, r3, d8
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	9d00      	ldr	r5, [sp, #0]
 8009f22:	ec41 0b18 	vmov	d8, r0, r1
 8009f26:	4639      	mov	r1, r7
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7f6 fe1d 	bl	8000b68 <__aeabi_d2iz>
 8009f2e:	900c      	str	r0, [sp, #48]	; 0x30
 8009f30:	f7f6 fb00 	bl	8000534 <__aeabi_i2d>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 f9ac 	bl	8000298 <__aeabi_dsub>
 8009f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f42:	3330      	adds	r3, #48	; 0x30
 8009f44:	f805 3b01 	strb.w	r3, [r5], #1
 8009f48:	ec53 2b18 	vmov	r2, r3, d8
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	f7f6 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d165      	bne.n	800a024 <_dtoa_r+0x63c>
 8009f58:	4632      	mov	r2, r6
 8009f5a:	463b      	mov	r3, r7
 8009f5c:	4935      	ldr	r1, [pc, #212]	; (800a034 <_dtoa_r+0x64c>)
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7f6 f99a 	bl	8000298 <__aeabi_dsub>
 8009f64:	ec53 2b18 	vmov	r2, r3, d8
 8009f68:	f7f6 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f040 80b9 	bne.w	800a0e4 <_dtoa_r+0x6fc>
 8009f72:	9b02      	ldr	r3, [sp, #8]
 8009f74:	429d      	cmp	r5, r3
 8009f76:	f43f af75 	beq.w	8009e64 <_dtoa_r+0x47c>
 8009f7a:	4b2f      	ldr	r3, [pc, #188]	; (800a038 <_dtoa_r+0x650>)
 8009f7c:	ec51 0b18 	vmov	r0, r1, d8
 8009f80:	2200      	movs	r2, #0
 8009f82:	f7f6 fb41 	bl	8000608 <__aeabi_dmul>
 8009f86:	4b2c      	ldr	r3, [pc, #176]	; (800a038 <_dtoa_r+0x650>)
 8009f88:	ec41 0b18 	vmov	d8, r0, r1
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 fb39 	bl	8000608 <__aeabi_dmul>
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	e7c4      	b.n	8009f26 <_dtoa_r+0x53e>
 8009f9c:	ec51 0b17 	vmov	r0, r1, d7
 8009fa0:	f7f6 fb32 	bl	8000608 <__aeabi_dmul>
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	9d00      	ldr	r5, [sp, #0]
 8009fa8:	930c      	str	r3, [sp, #48]	; 0x30
 8009faa:	ec41 0b18 	vmov	d8, r0, r1
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7f6 fdd9 	bl	8000b68 <__aeabi_d2iz>
 8009fb6:	9011      	str	r0, [sp, #68]	; 0x44
 8009fb8:	f7f6 fabc 	bl	8000534 <__aeabi_i2d>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	f7f6 f968 	bl	8000298 <__aeabi_dsub>
 8009fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fca:	3330      	adds	r3, #48	; 0x30
 8009fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	429d      	cmp	r5, r3
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	d134      	bne.n	800a048 <_dtoa_r+0x660>
 8009fde:	4b19      	ldr	r3, [pc, #100]	; (800a044 <_dtoa_r+0x65c>)
 8009fe0:	ec51 0b18 	vmov	r0, r1, d8
 8009fe4:	f7f6 f95a 	bl	800029c <__adddf3>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4630      	mov	r0, r6
 8009fee:	4639      	mov	r1, r7
 8009ff0:	f7f6 fd9a 	bl	8000b28 <__aeabi_dcmpgt>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d175      	bne.n	800a0e4 <_dtoa_r+0x6fc>
 8009ff8:	ec53 2b18 	vmov	r2, r3, d8
 8009ffc:	4911      	ldr	r1, [pc, #68]	; (800a044 <_dtoa_r+0x65c>)
 8009ffe:	2000      	movs	r0, #0
 800a000:	f7f6 f94a 	bl	8000298 <__aeabi_dsub>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4630      	mov	r0, r6
 800a00a:	4639      	mov	r1, r7
 800a00c:	f7f6 fd6e 	bl	8000aec <__aeabi_dcmplt>
 800a010:	2800      	cmp	r0, #0
 800a012:	f43f af27 	beq.w	8009e64 <_dtoa_r+0x47c>
 800a016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a018:	1e6b      	subs	r3, r5, #1
 800a01a:	930c      	str	r3, [sp, #48]	; 0x30
 800a01c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a020:	2b30      	cmp	r3, #48	; 0x30
 800a022:	d0f8      	beq.n	800a016 <_dtoa_r+0x62e>
 800a024:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a028:	e04a      	b.n	800a0c0 <_dtoa_r+0x6d8>
 800a02a:	bf00      	nop
 800a02c:	0800c1a0 	.word	0x0800c1a0
 800a030:	0800c178 	.word	0x0800c178
 800a034:	3ff00000 	.word	0x3ff00000
 800a038:	40240000 	.word	0x40240000
 800a03c:	401c0000 	.word	0x401c0000
 800a040:	40140000 	.word	0x40140000
 800a044:	3fe00000 	.word	0x3fe00000
 800a048:	4baf      	ldr	r3, [pc, #700]	; (800a308 <_dtoa_r+0x920>)
 800a04a:	f7f6 fadd 	bl	8000608 <__aeabi_dmul>
 800a04e:	4606      	mov	r6, r0
 800a050:	460f      	mov	r7, r1
 800a052:	e7ac      	b.n	8009fae <_dtoa_r+0x5c6>
 800a054:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a058:	9d00      	ldr	r5, [sp, #0]
 800a05a:	4642      	mov	r2, r8
 800a05c:	464b      	mov	r3, r9
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 fbfb 	bl	800085c <__aeabi_ddiv>
 800a066:	f7f6 fd7f 	bl	8000b68 <__aeabi_d2iz>
 800a06a:	9002      	str	r0, [sp, #8]
 800a06c:	f7f6 fa62 	bl	8000534 <__aeabi_i2d>
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	f7f6 fac8 	bl	8000608 <__aeabi_dmul>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 f90a 	bl	8000298 <__aeabi_dsub>
 800a084:	9e02      	ldr	r6, [sp, #8]
 800a086:	9f01      	ldr	r7, [sp, #4]
 800a088:	3630      	adds	r6, #48	; 0x30
 800a08a:	f805 6b01 	strb.w	r6, [r5], #1
 800a08e:	9e00      	ldr	r6, [sp, #0]
 800a090:	1bae      	subs	r6, r5, r6
 800a092:	42b7      	cmp	r7, r6
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	d137      	bne.n	800a10a <_dtoa_r+0x722>
 800a09a:	f7f6 f8ff 	bl	800029c <__adddf3>
 800a09e:	4642      	mov	r2, r8
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	f7f6 fd3f 	bl	8000b28 <__aeabi_dcmpgt>
 800a0aa:	b9c8      	cbnz	r0, 800a0e0 <_dtoa_r+0x6f8>
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b8:	b110      	cbz	r0, 800a0c0 <_dtoa_r+0x6d8>
 800a0ba:	9b02      	ldr	r3, [sp, #8]
 800a0bc:	07d9      	lsls	r1, r3, #31
 800a0be:	d40f      	bmi.n	800a0e0 <_dtoa_r+0x6f8>
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	f000 fb64 	bl	800a790 <_Bfree>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	702b      	strb	r3, [r5, #0]
 800a0cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ce:	f10a 0001 	add.w	r0, sl, #1
 800a0d2:	6018      	str	r0, [r3, #0]
 800a0d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f43f acd8 	beq.w	8009a8c <_dtoa_r+0xa4>
 800a0dc:	601d      	str	r5, [r3, #0]
 800a0de:	e4d5      	b.n	8009a8c <_dtoa_r+0xa4>
 800a0e0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	461d      	mov	r5, r3
 800a0e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ec:	2a39      	cmp	r2, #57	; 0x39
 800a0ee:	d108      	bne.n	800a102 <_dtoa_r+0x71a>
 800a0f0:	9a00      	ldr	r2, [sp, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d1f7      	bne.n	800a0e6 <_dtoa_r+0x6fe>
 800a0f6:	9a07      	ldr	r2, [sp, #28]
 800a0f8:	9900      	ldr	r1, [sp, #0]
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	9207      	str	r2, [sp, #28]
 800a0fe:	2230      	movs	r2, #48	; 0x30
 800a100:	700a      	strb	r2, [r1, #0]
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	3201      	adds	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	e78c      	b.n	800a024 <_dtoa_r+0x63c>
 800a10a:	4b7f      	ldr	r3, [pc, #508]	; (800a308 <_dtoa_r+0x920>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	f7f6 fa7b 	bl	8000608 <__aeabi_dmul>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	f7f6 fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d09b      	beq.n	800a05a <_dtoa_r+0x672>
 800a122:	e7cd      	b.n	800a0c0 <_dtoa_r+0x6d8>
 800a124:	9a08      	ldr	r2, [sp, #32]
 800a126:	2a00      	cmp	r2, #0
 800a128:	f000 80c4 	beq.w	800a2b4 <_dtoa_r+0x8cc>
 800a12c:	9a05      	ldr	r2, [sp, #20]
 800a12e:	2a01      	cmp	r2, #1
 800a130:	f300 80a8 	bgt.w	800a284 <_dtoa_r+0x89c>
 800a134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a136:	2a00      	cmp	r2, #0
 800a138:	f000 80a0 	beq.w	800a27c <_dtoa_r+0x894>
 800a13c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a140:	9e06      	ldr	r6, [sp, #24]
 800a142:	4645      	mov	r5, r8
 800a144:	9a04      	ldr	r2, [sp, #16]
 800a146:	2101      	movs	r1, #1
 800a148:	441a      	add	r2, r3
 800a14a:	4620      	mov	r0, r4
 800a14c:	4498      	add	r8, r3
 800a14e:	9204      	str	r2, [sp, #16]
 800a150:	f000 fbda 	bl	800a908 <__i2b>
 800a154:	4607      	mov	r7, r0
 800a156:	2d00      	cmp	r5, #0
 800a158:	dd0b      	ble.n	800a172 <_dtoa_r+0x78a>
 800a15a:	9b04      	ldr	r3, [sp, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd08      	ble.n	800a172 <_dtoa_r+0x78a>
 800a160:	42ab      	cmp	r3, r5
 800a162:	9a04      	ldr	r2, [sp, #16]
 800a164:	bfa8      	it	ge
 800a166:	462b      	movge	r3, r5
 800a168:	eba8 0803 	sub.w	r8, r8, r3
 800a16c:	1aed      	subs	r5, r5, r3
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	9b06      	ldr	r3, [sp, #24]
 800a174:	b1fb      	cbz	r3, 800a1b6 <_dtoa_r+0x7ce>
 800a176:	9b08      	ldr	r3, [sp, #32]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 809f 	beq.w	800a2bc <_dtoa_r+0x8d4>
 800a17e:	2e00      	cmp	r6, #0
 800a180:	dd11      	ble.n	800a1a6 <_dtoa_r+0x7be>
 800a182:	4639      	mov	r1, r7
 800a184:	4632      	mov	r2, r6
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fc7a 	bl	800aa80 <__pow5mult>
 800a18c:	465a      	mov	r2, fp
 800a18e:	4601      	mov	r1, r0
 800a190:	4607      	mov	r7, r0
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fbce 	bl	800a934 <__multiply>
 800a198:	4659      	mov	r1, fp
 800a19a:	9007      	str	r0, [sp, #28]
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 faf7 	bl	800a790 <_Bfree>
 800a1a2:	9b07      	ldr	r3, [sp, #28]
 800a1a4:	469b      	mov	fp, r3
 800a1a6:	9b06      	ldr	r3, [sp, #24]
 800a1a8:	1b9a      	subs	r2, r3, r6
 800a1aa:	d004      	beq.n	800a1b6 <_dtoa_r+0x7ce>
 800a1ac:	4659      	mov	r1, fp
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 fc66 	bl	800aa80 <__pow5mult>
 800a1b4:	4683      	mov	fp, r0
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fba5 	bl	800a908 <__i2b>
 800a1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	dd7c      	ble.n	800a2c0 <_dtoa_r+0x8d8>
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4601      	mov	r1, r0
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fc58 	bl	800aa80 <__pow5mult>
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	dd76      	ble.n	800a2c6 <_dtoa_r+0x8de>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9306      	str	r3, [sp, #24]
 800a1dc:	6933      	ldr	r3, [r6, #16]
 800a1de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1e2:	6918      	ldr	r0, [r3, #16]
 800a1e4:	f000 fb40 	bl	800a868 <__hi0bits>
 800a1e8:	f1c0 0020 	rsb	r0, r0, #32
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	4418      	add	r0, r3
 800a1f0:	f010 001f 	ands.w	r0, r0, #31
 800a1f4:	f000 8086 	beq.w	800a304 <_dtoa_r+0x91c>
 800a1f8:	f1c0 0320 	rsb	r3, r0, #32
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	dd7f      	ble.n	800a300 <_dtoa_r+0x918>
 800a200:	f1c0 001c 	rsb	r0, r0, #28
 800a204:	9b04      	ldr	r3, [sp, #16]
 800a206:	4403      	add	r3, r0
 800a208:	4480      	add	r8, r0
 800a20a:	4405      	add	r5, r0
 800a20c:	9304      	str	r3, [sp, #16]
 800a20e:	f1b8 0f00 	cmp.w	r8, #0
 800a212:	dd05      	ble.n	800a220 <_dtoa_r+0x838>
 800a214:	4659      	mov	r1, fp
 800a216:	4642      	mov	r2, r8
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fc8b 	bl	800ab34 <__lshift>
 800a21e:	4683      	mov	fp, r0
 800a220:	9b04      	ldr	r3, [sp, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	dd05      	ble.n	800a232 <_dtoa_r+0x84a>
 800a226:	4631      	mov	r1, r6
 800a228:	461a      	mov	r2, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fc82 	bl	800ab34 <__lshift>
 800a230:	4606      	mov	r6, r0
 800a232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a234:	2b00      	cmp	r3, #0
 800a236:	d069      	beq.n	800a30c <_dtoa_r+0x924>
 800a238:	4631      	mov	r1, r6
 800a23a:	4658      	mov	r0, fp
 800a23c:	f000 fce6 	bl	800ac0c <__mcmp>
 800a240:	2800      	cmp	r0, #0
 800a242:	da63      	bge.n	800a30c <_dtoa_r+0x924>
 800a244:	2300      	movs	r3, #0
 800a246:	4659      	mov	r1, fp
 800a248:	220a      	movs	r2, #10
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 fac2 	bl	800a7d4 <__multadd>
 800a250:	9b08      	ldr	r3, [sp, #32]
 800a252:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a256:	4683      	mov	fp, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 818f 	beq.w	800a57c <_dtoa_r+0xb94>
 800a25e:	4639      	mov	r1, r7
 800a260:	2300      	movs	r3, #0
 800a262:	220a      	movs	r2, #10
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fab5 	bl	800a7d4 <__multadd>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	4607      	mov	r7, r0
 800a270:	f300 808e 	bgt.w	800a390 <_dtoa_r+0x9a8>
 800a274:	9b05      	ldr	r3, [sp, #20]
 800a276:	2b02      	cmp	r3, #2
 800a278:	dc50      	bgt.n	800a31c <_dtoa_r+0x934>
 800a27a:	e089      	b.n	800a390 <_dtoa_r+0x9a8>
 800a27c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a27e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a282:	e75d      	b.n	800a140 <_dtoa_r+0x758>
 800a284:	9b01      	ldr	r3, [sp, #4]
 800a286:	1e5e      	subs	r6, r3, #1
 800a288:	9b06      	ldr	r3, [sp, #24]
 800a28a:	42b3      	cmp	r3, r6
 800a28c:	bfbf      	itttt	lt
 800a28e:	9b06      	ldrlt	r3, [sp, #24]
 800a290:	9606      	strlt	r6, [sp, #24]
 800a292:	1af2      	sublt	r2, r6, r3
 800a294:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a296:	bfb6      	itet	lt
 800a298:	189b      	addlt	r3, r3, r2
 800a29a:	1b9e      	subge	r6, r3, r6
 800a29c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	bfb8      	it	lt
 800a2a2:	2600      	movlt	r6, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb5      	itete	lt
 800a2a8:	eba8 0503 	sublt.w	r5, r8, r3
 800a2ac:	9b01      	ldrge	r3, [sp, #4]
 800a2ae:	2300      	movlt	r3, #0
 800a2b0:	4645      	movge	r5, r8
 800a2b2:	e747      	b.n	800a144 <_dtoa_r+0x75c>
 800a2b4:	9e06      	ldr	r6, [sp, #24]
 800a2b6:	9f08      	ldr	r7, [sp, #32]
 800a2b8:	4645      	mov	r5, r8
 800a2ba:	e74c      	b.n	800a156 <_dtoa_r+0x76e>
 800a2bc:	9a06      	ldr	r2, [sp, #24]
 800a2be:	e775      	b.n	800a1ac <_dtoa_r+0x7c4>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	dc18      	bgt.n	800a2f8 <_dtoa_r+0x910>
 800a2c6:	9b02      	ldr	r3, [sp, #8]
 800a2c8:	b9b3      	cbnz	r3, 800a2f8 <_dtoa_r+0x910>
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2d0:	b9a3      	cbnz	r3, 800a2fc <_dtoa_r+0x914>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d8:	0d1b      	lsrs	r3, r3, #20
 800a2da:	051b      	lsls	r3, r3, #20
 800a2dc:	b12b      	cbz	r3, 800a2ea <_dtoa_r+0x902>
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	f108 0801 	add.w	r8, r8, #1
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	9306      	str	r3, [sp, #24]
 800a2ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f47f af74 	bne.w	800a1dc <_dtoa_r+0x7f4>
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	e779      	b.n	800a1ec <_dtoa_r+0x804>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e7f6      	b.n	800a2ea <_dtoa_r+0x902>
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	e7f4      	b.n	800a2ea <_dtoa_r+0x902>
 800a300:	d085      	beq.n	800a20e <_dtoa_r+0x826>
 800a302:	4618      	mov	r0, r3
 800a304:	301c      	adds	r0, #28
 800a306:	e77d      	b.n	800a204 <_dtoa_r+0x81c>
 800a308:	40240000 	.word	0x40240000
 800a30c:	9b01      	ldr	r3, [sp, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dc38      	bgt.n	800a384 <_dtoa_r+0x99c>
 800a312:	9b05      	ldr	r3, [sp, #20]
 800a314:	2b02      	cmp	r3, #2
 800a316:	dd35      	ble.n	800a384 <_dtoa_r+0x99c>
 800a318:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a31c:	f1b9 0f00 	cmp.w	r9, #0
 800a320:	d10d      	bne.n	800a33e <_dtoa_r+0x956>
 800a322:	4631      	mov	r1, r6
 800a324:	464b      	mov	r3, r9
 800a326:	2205      	movs	r2, #5
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fa53 	bl	800a7d4 <__multadd>
 800a32e:	4601      	mov	r1, r0
 800a330:	4606      	mov	r6, r0
 800a332:	4658      	mov	r0, fp
 800a334:	f000 fc6a 	bl	800ac0c <__mcmp>
 800a338:	2800      	cmp	r0, #0
 800a33a:	f73f adbd 	bgt.w	8009eb8 <_dtoa_r+0x4d0>
 800a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a340:	9d00      	ldr	r5, [sp, #0]
 800a342:	ea6f 0a03 	mvn.w	sl, r3
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	4631      	mov	r1, r6
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 fa1f 	bl	800a790 <_Bfree>
 800a352:	2f00      	cmp	r7, #0
 800a354:	f43f aeb4 	beq.w	800a0c0 <_dtoa_r+0x6d8>
 800a358:	f1b8 0f00 	cmp.w	r8, #0
 800a35c:	d005      	beq.n	800a36a <_dtoa_r+0x982>
 800a35e:	45b8      	cmp	r8, r7
 800a360:	d003      	beq.n	800a36a <_dtoa_r+0x982>
 800a362:	4641      	mov	r1, r8
 800a364:	4620      	mov	r0, r4
 800a366:	f000 fa13 	bl	800a790 <_Bfree>
 800a36a:	4639      	mov	r1, r7
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 fa0f 	bl	800a790 <_Bfree>
 800a372:	e6a5      	b.n	800a0c0 <_dtoa_r+0x6d8>
 800a374:	2600      	movs	r6, #0
 800a376:	4637      	mov	r7, r6
 800a378:	e7e1      	b.n	800a33e <_dtoa_r+0x956>
 800a37a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a37c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a380:	4637      	mov	r7, r6
 800a382:	e599      	b.n	8009eb8 <_dtoa_r+0x4d0>
 800a384:	9b08      	ldr	r3, [sp, #32]
 800a386:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 80fd 	beq.w	800a58a <_dtoa_r+0xba2>
 800a390:	2d00      	cmp	r5, #0
 800a392:	dd05      	ble.n	800a3a0 <_dtoa_r+0x9b8>
 800a394:	4639      	mov	r1, r7
 800a396:	462a      	mov	r2, r5
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fbcb 	bl	800ab34 <__lshift>
 800a39e:	4607      	mov	r7, r0
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d05c      	beq.n	800a460 <_dtoa_r+0xa78>
 800a3a6:	6879      	ldr	r1, [r7, #4]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 f9b1 	bl	800a710 <_Balloc>
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	b928      	cbnz	r0, 800a3be <_dtoa_r+0x9d6>
 800a3b2:	4b80      	ldr	r3, [pc, #512]	; (800a5b4 <_dtoa_r+0xbcc>)
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3ba:	f7ff bb2e 	b.w	8009a1a <_dtoa_r+0x32>
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	3202      	adds	r2, #2
 800a3c2:	0092      	lsls	r2, r2, #2
 800a3c4:	f107 010c 	add.w	r1, r7, #12
 800a3c8:	300c      	adds	r0, #12
 800a3ca:	f7fe faaa 	bl	8008922 <memcpy>
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f000 fbae 	bl	800ab34 <__lshift>
 800a3d8:	9b00      	ldr	r3, [sp, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	444b      	add	r3, r9
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	9b02      	ldr	r3, [sp, #8]
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	46b8      	mov	r8, r7
 800a3ec:	9306      	str	r3, [sp, #24]
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	9302      	str	r3, [sp, #8]
 800a3fa:	f7ff fa67 	bl	80098cc <quorem>
 800a3fe:	4603      	mov	r3, r0
 800a400:	3330      	adds	r3, #48	; 0x30
 800a402:	9004      	str	r0, [sp, #16]
 800a404:	4641      	mov	r1, r8
 800a406:	4658      	mov	r0, fp
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	f000 fbff 	bl	800ac0c <__mcmp>
 800a40e:	463a      	mov	r2, r7
 800a410:	4681      	mov	r9, r0
 800a412:	4631      	mov	r1, r6
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fc15 	bl	800ac44 <__mdiff>
 800a41a:	68c2      	ldr	r2, [r0, #12]
 800a41c:	9b08      	ldr	r3, [sp, #32]
 800a41e:	4605      	mov	r5, r0
 800a420:	bb02      	cbnz	r2, 800a464 <_dtoa_r+0xa7c>
 800a422:	4601      	mov	r1, r0
 800a424:	4658      	mov	r0, fp
 800a426:	f000 fbf1 	bl	800ac0c <__mcmp>
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	4602      	mov	r2, r0
 800a42e:	4629      	mov	r1, r5
 800a430:	4620      	mov	r0, r4
 800a432:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a436:	f000 f9ab 	bl	800a790 <_Bfree>
 800a43a:	9b05      	ldr	r3, [sp, #20]
 800a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43e:	9d01      	ldr	r5, [sp, #4]
 800a440:	ea43 0102 	orr.w	r1, r3, r2
 800a444:	9b06      	ldr	r3, [sp, #24]
 800a446:	430b      	orrs	r3, r1
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	d10d      	bne.n	800a468 <_dtoa_r+0xa80>
 800a44c:	2b39      	cmp	r3, #57	; 0x39
 800a44e:	d029      	beq.n	800a4a4 <_dtoa_r+0xabc>
 800a450:	f1b9 0f00 	cmp.w	r9, #0
 800a454:	dd01      	ble.n	800a45a <_dtoa_r+0xa72>
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	3331      	adds	r3, #49	; 0x31
 800a45a:	9a02      	ldr	r2, [sp, #8]
 800a45c:	7013      	strb	r3, [r2, #0]
 800a45e:	e774      	b.n	800a34a <_dtoa_r+0x962>
 800a460:	4638      	mov	r0, r7
 800a462:	e7b9      	b.n	800a3d8 <_dtoa_r+0x9f0>
 800a464:	2201      	movs	r2, #1
 800a466:	e7e2      	b.n	800a42e <_dtoa_r+0xa46>
 800a468:	f1b9 0f00 	cmp.w	r9, #0
 800a46c:	db06      	blt.n	800a47c <_dtoa_r+0xa94>
 800a46e:	9905      	ldr	r1, [sp, #20]
 800a470:	ea41 0909 	orr.w	r9, r1, r9
 800a474:	9906      	ldr	r1, [sp, #24]
 800a476:	ea59 0101 	orrs.w	r1, r9, r1
 800a47a:	d120      	bne.n	800a4be <_dtoa_r+0xad6>
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	ddec      	ble.n	800a45a <_dtoa_r+0xa72>
 800a480:	4659      	mov	r1, fp
 800a482:	2201      	movs	r2, #1
 800a484:	4620      	mov	r0, r4
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	f000 fb54 	bl	800ab34 <__lshift>
 800a48c:	4631      	mov	r1, r6
 800a48e:	4683      	mov	fp, r0
 800a490:	f000 fbbc 	bl	800ac0c <__mcmp>
 800a494:	2800      	cmp	r0, #0
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	dc02      	bgt.n	800a4a0 <_dtoa_r+0xab8>
 800a49a:	d1de      	bne.n	800a45a <_dtoa_r+0xa72>
 800a49c:	07da      	lsls	r2, r3, #31
 800a49e:	d5dc      	bpl.n	800a45a <_dtoa_r+0xa72>
 800a4a0:	2b39      	cmp	r3, #57	; 0x39
 800a4a2:	d1d8      	bne.n	800a456 <_dtoa_r+0xa6e>
 800a4a4:	9a02      	ldr	r2, [sp, #8]
 800a4a6:	2339      	movs	r3, #57	; 0x39
 800a4a8:	7013      	strb	r3, [r2, #0]
 800a4aa:	462b      	mov	r3, r5
 800a4ac:	461d      	mov	r5, r3
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4b4:	2a39      	cmp	r2, #57	; 0x39
 800a4b6:	d050      	beq.n	800a55a <_dtoa_r+0xb72>
 800a4b8:	3201      	adds	r2, #1
 800a4ba:	701a      	strb	r2, [r3, #0]
 800a4bc:	e745      	b.n	800a34a <_dtoa_r+0x962>
 800a4be:	2a00      	cmp	r2, #0
 800a4c0:	dd03      	ble.n	800a4ca <_dtoa_r+0xae2>
 800a4c2:	2b39      	cmp	r3, #57	; 0x39
 800a4c4:	d0ee      	beq.n	800a4a4 <_dtoa_r+0xabc>
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	e7c7      	b.n	800a45a <_dtoa_r+0xa72>
 800a4ca:	9a01      	ldr	r2, [sp, #4]
 800a4cc:	9907      	ldr	r1, [sp, #28]
 800a4ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a4d2:	428a      	cmp	r2, r1
 800a4d4:	d02a      	beq.n	800a52c <_dtoa_r+0xb44>
 800a4d6:	4659      	mov	r1, fp
 800a4d8:	2300      	movs	r3, #0
 800a4da:	220a      	movs	r2, #10
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 f979 	bl	800a7d4 <__multadd>
 800a4e2:	45b8      	cmp	r8, r7
 800a4e4:	4683      	mov	fp, r0
 800a4e6:	f04f 0300 	mov.w	r3, #0
 800a4ea:	f04f 020a 	mov.w	r2, #10
 800a4ee:	4641      	mov	r1, r8
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	d107      	bne.n	800a504 <_dtoa_r+0xb1c>
 800a4f4:	f000 f96e 	bl	800a7d4 <__multadd>
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	3301      	adds	r3, #1
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	e775      	b.n	800a3f0 <_dtoa_r+0xa08>
 800a504:	f000 f966 	bl	800a7d4 <__multadd>
 800a508:	4639      	mov	r1, r7
 800a50a:	4680      	mov	r8, r0
 800a50c:	2300      	movs	r3, #0
 800a50e:	220a      	movs	r2, #10
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f95f 	bl	800a7d4 <__multadd>
 800a516:	4607      	mov	r7, r0
 800a518:	e7f0      	b.n	800a4fc <_dtoa_r+0xb14>
 800a51a:	f1b9 0f00 	cmp.w	r9, #0
 800a51e:	9a00      	ldr	r2, [sp, #0]
 800a520:	bfcc      	ite	gt
 800a522:	464d      	movgt	r5, r9
 800a524:	2501      	movle	r5, #1
 800a526:	4415      	add	r5, r2
 800a528:	f04f 0800 	mov.w	r8, #0
 800a52c:	4659      	mov	r1, fp
 800a52e:	2201      	movs	r2, #1
 800a530:	4620      	mov	r0, r4
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	f000 fafe 	bl	800ab34 <__lshift>
 800a538:	4631      	mov	r1, r6
 800a53a:	4683      	mov	fp, r0
 800a53c:	f000 fb66 	bl	800ac0c <__mcmp>
 800a540:	2800      	cmp	r0, #0
 800a542:	dcb2      	bgt.n	800a4aa <_dtoa_r+0xac2>
 800a544:	d102      	bne.n	800a54c <_dtoa_r+0xb64>
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	07db      	lsls	r3, r3, #31
 800a54a:	d4ae      	bmi.n	800a4aa <_dtoa_r+0xac2>
 800a54c:	462b      	mov	r3, r5
 800a54e:	461d      	mov	r5, r3
 800a550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a554:	2a30      	cmp	r2, #48	; 0x30
 800a556:	d0fa      	beq.n	800a54e <_dtoa_r+0xb66>
 800a558:	e6f7      	b.n	800a34a <_dtoa_r+0x962>
 800a55a:	9a00      	ldr	r2, [sp, #0]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d1a5      	bne.n	800a4ac <_dtoa_r+0xac4>
 800a560:	f10a 0a01 	add.w	sl, sl, #1
 800a564:	2331      	movs	r3, #49	; 0x31
 800a566:	e779      	b.n	800a45c <_dtoa_r+0xa74>
 800a568:	4b13      	ldr	r3, [pc, #76]	; (800a5b8 <_dtoa_r+0xbd0>)
 800a56a:	f7ff baaf 	b.w	8009acc <_dtoa_r+0xe4>
 800a56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a570:	2b00      	cmp	r3, #0
 800a572:	f47f aa86 	bne.w	8009a82 <_dtoa_r+0x9a>
 800a576:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <_dtoa_r+0xbd4>)
 800a578:	f7ff baa8 	b.w	8009acc <_dtoa_r+0xe4>
 800a57c:	f1b9 0f00 	cmp.w	r9, #0
 800a580:	dc03      	bgt.n	800a58a <_dtoa_r+0xba2>
 800a582:	9b05      	ldr	r3, [sp, #20]
 800a584:	2b02      	cmp	r3, #2
 800a586:	f73f aec9 	bgt.w	800a31c <_dtoa_r+0x934>
 800a58a:	9d00      	ldr	r5, [sp, #0]
 800a58c:	4631      	mov	r1, r6
 800a58e:	4658      	mov	r0, fp
 800a590:	f7ff f99c 	bl	80098cc <quorem>
 800a594:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a598:	f805 3b01 	strb.w	r3, [r5], #1
 800a59c:	9a00      	ldr	r2, [sp, #0]
 800a59e:	1aaa      	subs	r2, r5, r2
 800a5a0:	4591      	cmp	r9, r2
 800a5a2:	ddba      	ble.n	800a51a <_dtoa_r+0xb32>
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 f912 	bl	800a7d4 <__multadd>
 800a5b0:	4683      	mov	fp, r0
 800a5b2:	e7eb      	b.n	800a58c <_dtoa_r+0xba4>
 800a5b4:	0800c100 	.word	0x0800c100
 800a5b8:	0800bf58 	.word	0x0800bf58
 800a5bc:	0800c07d 	.word	0x0800c07d

0800a5c0 <_localeconv_r>:
 800a5c0:	4800      	ldr	r0, [pc, #0]	; (800a5c4 <_localeconv_r+0x4>)
 800a5c2:	4770      	bx	lr
 800a5c4:	20000164 	.word	0x20000164

0800a5c8 <_lseek_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_lseek_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f7 fe84 	bl	80022e4 <_lseek>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_lseek_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_lseek_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	2000c320 	.word	0x2000c320

0800a5ec <__swhatbuf_r>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	460e      	mov	r6, r1
 800a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	b096      	sub	sp, #88	; 0x58
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	461d      	mov	r5, r3
 800a5fc:	da07      	bge.n	800a60e <__swhatbuf_r+0x22>
 800a5fe:	2300      	movs	r3, #0
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	89b3      	ldrh	r3, [r6, #12]
 800a604:	061a      	lsls	r2, r3, #24
 800a606:	d410      	bmi.n	800a62a <__swhatbuf_r+0x3e>
 800a608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a60c:	e00e      	b.n	800a62c <__swhatbuf_r+0x40>
 800a60e:	466a      	mov	r2, sp
 800a610:	f000 ff10 	bl	800b434 <_fstat_r>
 800a614:	2800      	cmp	r0, #0
 800a616:	dbf2      	blt.n	800a5fe <__swhatbuf_r+0x12>
 800a618:	9a01      	ldr	r2, [sp, #4]
 800a61a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a61e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a622:	425a      	negs	r2, r3
 800a624:	415a      	adcs	r2, r3
 800a626:	602a      	str	r2, [r5, #0]
 800a628:	e7ee      	b.n	800a608 <__swhatbuf_r+0x1c>
 800a62a:	2340      	movs	r3, #64	; 0x40
 800a62c:	2000      	movs	r0, #0
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	b016      	add	sp, #88	; 0x58
 800a632:	bd70      	pop	{r4, r5, r6, pc}

0800a634 <__smakebuf_r>:
 800a634:	898b      	ldrh	r3, [r1, #12]
 800a636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a638:	079d      	lsls	r5, r3, #30
 800a63a:	4606      	mov	r6, r0
 800a63c:	460c      	mov	r4, r1
 800a63e:	d507      	bpl.n	800a650 <__smakebuf_r+0x1c>
 800a640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	6123      	str	r3, [r4, #16]
 800a648:	2301      	movs	r3, #1
 800a64a:	6163      	str	r3, [r4, #20]
 800a64c:	b002      	add	sp, #8
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	ab01      	add	r3, sp, #4
 800a652:	466a      	mov	r2, sp
 800a654:	f7ff ffca 	bl	800a5ec <__swhatbuf_r>
 800a658:	9900      	ldr	r1, [sp, #0]
 800a65a:	4605      	mov	r5, r0
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7fe f9c7 	bl	80089f0 <_malloc_r>
 800a662:	b948      	cbnz	r0, 800a678 <__smakebuf_r+0x44>
 800a664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a668:	059a      	lsls	r2, r3, #22
 800a66a:	d4ef      	bmi.n	800a64c <__smakebuf_r+0x18>
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	f043 0302 	orr.w	r3, r3, #2
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	e7e3      	b.n	800a640 <__smakebuf_r+0xc>
 800a678:	4b0d      	ldr	r3, [pc, #52]	; (800a6b0 <__smakebuf_r+0x7c>)
 800a67a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	6020      	str	r0, [r4, #0]
 800a680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	9b00      	ldr	r3, [sp, #0]
 800a688:	6163      	str	r3, [r4, #20]
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	6120      	str	r0, [r4, #16]
 800a68e:	b15b      	cbz	r3, 800a6a8 <__smakebuf_r+0x74>
 800a690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a694:	4630      	mov	r0, r6
 800a696:	f000 fedf 	bl	800b458 <_isatty_r>
 800a69a:	b128      	cbz	r0, 800a6a8 <__smakebuf_r+0x74>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f023 0303 	bic.w	r3, r3, #3
 800a6a2:	f043 0301 	orr.w	r3, r3, #1
 800a6a6:	81a3      	strh	r3, [r4, #12]
 800a6a8:	89a0      	ldrh	r0, [r4, #12]
 800a6aa:	4305      	orrs	r5, r0
 800a6ac:	81a5      	strh	r5, [r4, #12]
 800a6ae:	e7cd      	b.n	800a64c <__smakebuf_r+0x18>
 800a6b0:	08008731 	.word	0x08008731

0800a6b4 <malloc>:
 800a6b4:	4b02      	ldr	r3, [pc, #8]	; (800a6c0 <malloc+0xc>)
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	f7fe b999 	b.w	80089f0 <_malloc_r>
 800a6be:	bf00      	nop
 800a6c0:	20000010 	.word	0x20000010

0800a6c4 <memmem>:
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	b17b      	cbz	r3, 800a6e8 <memmem+0x24>
 800a6c8:	1ac9      	subs	r1, r1, r3
 800a6ca:	7816      	ldrb	r6, [r2, #0]
 800a6cc:	4401      	add	r1, r0
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	428d      	cmp	r5, r1
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	d901      	bls.n	800a6da <memmem+0x16>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e006      	b.n	800a6e8 <memmem+0x24>
 800a6da:	7804      	ldrb	r4, [r0, #0]
 800a6dc:	42b4      	cmp	r4, r6
 800a6de:	f105 0501 	add.w	r5, r5, #1
 800a6e2:	d1f5      	bne.n	800a6d0 <memmem+0xc>
 800a6e4:	1e5c      	subs	r4, r3, #1
 800a6e6:	b904      	cbnz	r4, 800a6ea <memmem+0x26>
 800a6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ea:	f810 c004 	ldrb.w	ip, [r0, r4]
 800a6ee:	5d17      	ldrb	r7, [r2, r4]
 800a6f0:	45bc      	cmp	ip, r7
 800a6f2:	d1ed      	bne.n	800a6d0 <memmem+0xc>
 800a6f4:	3c01      	subs	r4, #1
 800a6f6:	e7f6      	b.n	800a6e6 <memmem+0x22>

0800a6f8 <__malloc_lock>:
 800a6f8:	4801      	ldr	r0, [pc, #4]	; (800a700 <__malloc_lock+0x8>)
 800a6fa:	f7fe b910 	b.w	800891e <__retarget_lock_acquire_recursive>
 800a6fe:	bf00      	nop
 800a700:	2000c318 	.word	0x2000c318

0800a704 <__malloc_unlock>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__malloc_unlock+0x8>)
 800a706:	f7fe b90b 	b.w	8008920 <__retarget_lock_release_recursive>
 800a70a:	bf00      	nop
 800a70c:	2000c318 	.word	0x2000c318

0800a710 <_Balloc>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a714:	4604      	mov	r4, r0
 800a716:	460d      	mov	r5, r1
 800a718:	b976      	cbnz	r6, 800a738 <_Balloc+0x28>
 800a71a:	2010      	movs	r0, #16
 800a71c:	f7ff ffca 	bl	800a6b4 <malloc>
 800a720:	4602      	mov	r2, r0
 800a722:	6260      	str	r0, [r4, #36]	; 0x24
 800a724:	b920      	cbnz	r0, 800a730 <_Balloc+0x20>
 800a726:	4b18      	ldr	r3, [pc, #96]	; (800a788 <_Balloc+0x78>)
 800a728:	4818      	ldr	r0, [pc, #96]	; (800a78c <_Balloc+0x7c>)
 800a72a:	2166      	movs	r1, #102	; 0x66
 800a72c:	f000 fe52 	bl	800b3d4 <__assert_func>
 800a730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a734:	6006      	str	r6, [r0, #0]
 800a736:	60c6      	str	r6, [r0, #12]
 800a738:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a73a:	68f3      	ldr	r3, [r6, #12]
 800a73c:	b183      	cbz	r3, 800a760 <_Balloc+0x50>
 800a73e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a746:	b9b8      	cbnz	r0, 800a778 <_Balloc+0x68>
 800a748:	2101      	movs	r1, #1
 800a74a:	fa01 f605 	lsl.w	r6, r1, r5
 800a74e:	1d72      	adds	r2, r6, #5
 800a750:	0092      	lsls	r2, r2, #2
 800a752:	4620      	mov	r0, r4
 800a754:	f000 fb5a 	bl	800ae0c <_calloc_r>
 800a758:	b160      	cbz	r0, 800a774 <_Balloc+0x64>
 800a75a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a75e:	e00e      	b.n	800a77e <_Balloc+0x6e>
 800a760:	2221      	movs	r2, #33	; 0x21
 800a762:	2104      	movs	r1, #4
 800a764:	4620      	mov	r0, r4
 800a766:	f000 fb51 	bl	800ae0c <_calloc_r>
 800a76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a76c:	60f0      	str	r0, [r6, #12]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e4      	bne.n	800a73e <_Balloc+0x2e>
 800a774:	2000      	movs	r0, #0
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	6802      	ldr	r2, [r0, #0]
 800a77a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a77e:	2300      	movs	r3, #0
 800a780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a784:	e7f7      	b.n	800a776 <_Balloc+0x66>
 800a786:	bf00      	nop
 800a788:	0800c08a 	.word	0x0800c08a
 800a78c:	0800c111 	.word	0x0800c111

0800a790 <_Bfree>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a794:	4605      	mov	r5, r0
 800a796:	460c      	mov	r4, r1
 800a798:	b976      	cbnz	r6, 800a7b8 <_Bfree+0x28>
 800a79a:	2010      	movs	r0, #16
 800a79c:	f7ff ff8a 	bl	800a6b4 <malloc>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	6268      	str	r0, [r5, #36]	; 0x24
 800a7a4:	b920      	cbnz	r0, 800a7b0 <_Bfree+0x20>
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <_Bfree+0x3c>)
 800a7a8:	4809      	ldr	r0, [pc, #36]	; (800a7d0 <_Bfree+0x40>)
 800a7aa:	218a      	movs	r1, #138	; 0x8a
 800a7ac:	f000 fe12 	bl	800b3d4 <__assert_func>
 800a7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7b4:	6006      	str	r6, [r0, #0]
 800a7b6:	60c6      	str	r6, [r0, #12]
 800a7b8:	b13c      	cbz	r4, 800a7ca <_Bfree+0x3a>
 800a7ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7bc:	6862      	ldr	r2, [r4, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7c4:	6021      	str	r1, [r4, #0]
 800a7c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	0800c08a 	.word	0x0800c08a
 800a7d0:	0800c111 	.word	0x0800c111

0800a7d4 <__multadd>:
 800a7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d8:	690e      	ldr	r6, [r1, #16]
 800a7da:	4607      	mov	r7, r0
 800a7dc:	4698      	mov	r8, r3
 800a7de:	460c      	mov	r4, r1
 800a7e0:	f101 0014 	add.w	r0, r1, #20
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6805      	ldr	r5, [r0, #0]
 800a7e8:	b2a9      	uxth	r1, r5
 800a7ea:	fb02 8101 	mla	r1, r2, r1, r8
 800a7ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a7f2:	0c2d      	lsrs	r5, r5, #16
 800a7f4:	fb02 c505 	mla	r5, r2, r5, ip
 800a7f8:	b289      	uxth	r1, r1
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a800:	429e      	cmp	r6, r3
 800a802:	f840 1b04 	str.w	r1, [r0], #4
 800a806:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a80a:	dcec      	bgt.n	800a7e6 <__multadd+0x12>
 800a80c:	f1b8 0f00 	cmp.w	r8, #0
 800a810:	d022      	beq.n	800a858 <__multadd+0x84>
 800a812:	68a3      	ldr	r3, [r4, #8]
 800a814:	42b3      	cmp	r3, r6
 800a816:	dc19      	bgt.n	800a84c <__multadd+0x78>
 800a818:	6861      	ldr	r1, [r4, #4]
 800a81a:	4638      	mov	r0, r7
 800a81c:	3101      	adds	r1, #1
 800a81e:	f7ff ff77 	bl	800a710 <_Balloc>
 800a822:	4605      	mov	r5, r0
 800a824:	b928      	cbnz	r0, 800a832 <__multadd+0x5e>
 800a826:	4602      	mov	r2, r0
 800a828:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <__multadd+0x8c>)
 800a82a:	480e      	ldr	r0, [pc, #56]	; (800a864 <__multadd+0x90>)
 800a82c:	21b5      	movs	r1, #181	; 0xb5
 800a82e:	f000 fdd1 	bl	800b3d4 <__assert_func>
 800a832:	6922      	ldr	r2, [r4, #16]
 800a834:	3202      	adds	r2, #2
 800a836:	f104 010c 	add.w	r1, r4, #12
 800a83a:	0092      	lsls	r2, r2, #2
 800a83c:	300c      	adds	r0, #12
 800a83e:	f7fe f870 	bl	8008922 <memcpy>
 800a842:	4621      	mov	r1, r4
 800a844:	4638      	mov	r0, r7
 800a846:	f7ff ffa3 	bl	800a790 <_Bfree>
 800a84a:	462c      	mov	r4, r5
 800a84c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a850:	3601      	adds	r6, #1
 800a852:	f8c3 8014 	str.w	r8, [r3, #20]
 800a856:	6126      	str	r6, [r4, #16]
 800a858:	4620      	mov	r0, r4
 800a85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85e:	bf00      	nop
 800a860:	0800c100 	.word	0x0800c100
 800a864:	0800c111 	.word	0x0800c111

0800a868 <__hi0bits>:
 800a868:	0c03      	lsrs	r3, r0, #16
 800a86a:	041b      	lsls	r3, r3, #16
 800a86c:	b9d3      	cbnz	r3, 800a8a4 <__hi0bits+0x3c>
 800a86e:	0400      	lsls	r0, r0, #16
 800a870:	2310      	movs	r3, #16
 800a872:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a876:	bf04      	itt	eq
 800a878:	0200      	lsleq	r0, r0, #8
 800a87a:	3308      	addeq	r3, #8
 800a87c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a880:	bf04      	itt	eq
 800a882:	0100      	lsleq	r0, r0, #4
 800a884:	3304      	addeq	r3, #4
 800a886:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a88a:	bf04      	itt	eq
 800a88c:	0080      	lsleq	r0, r0, #2
 800a88e:	3302      	addeq	r3, #2
 800a890:	2800      	cmp	r0, #0
 800a892:	db05      	blt.n	800a8a0 <__hi0bits+0x38>
 800a894:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a898:	f103 0301 	add.w	r3, r3, #1
 800a89c:	bf08      	it	eq
 800a89e:	2320      	moveq	r3, #32
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	4770      	bx	lr
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	e7e4      	b.n	800a872 <__hi0bits+0xa>

0800a8a8 <__lo0bits>:
 800a8a8:	6803      	ldr	r3, [r0, #0]
 800a8aa:	f013 0207 	ands.w	r2, r3, #7
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	d00b      	beq.n	800a8ca <__lo0bits+0x22>
 800a8b2:	07da      	lsls	r2, r3, #31
 800a8b4:	d424      	bmi.n	800a900 <__lo0bits+0x58>
 800a8b6:	0798      	lsls	r0, r3, #30
 800a8b8:	bf49      	itett	mi
 800a8ba:	085b      	lsrmi	r3, r3, #1
 800a8bc:	089b      	lsrpl	r3, r3, #2
 800a8be:	2001      	movmi	r0, #1
 800a8c0:	600b      	strmi	r3, [r1, #0]
 800a8c2:	bf5c      	itt	pl
 800a8c4:	600b      	strpl	r3, [r1, #0]
 800a8c6:	2002      	movpl	r0, #2
 800a8c8:	4770      	bx	lr
 800a8ca:	b298      	uxth	r0, r3
 800a8cc:	b9b0      	cbnz	r0, 800a8fc <__lo0bits+0x54>
 800a8ce:	0c1b      	lsrs	r3, r3, #16
 800a8d0:	2010      	movs	r0, #16
 800a8d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a8d6:	bf04      	itt	eq
 800a8d8:	0a1b      	lsreq	r3, r3, #8
 800a8da:	3008      	addeq	r0, #8
 800a8dc:	071a      	lsls	r2, r3, #28
 800a8de:	bf04      	itt	eq
 800a8e0:	091b      	lsreq	r3, r3, #4
 800a8e2:	3004      	addeq	r0, #4
 800a8e4:	079a      	lsls	r2, r3, #30
 800a8e6:	bf04      	itt	eq
 800a8e8:	089b      	lsreq	r3, r3, #2
 800a8ea:	3002      	addeq	r0, #2
 800a8ec:	07da      	lsls	r2, r3, #31
 800a8ee:	d403      	bmi.n	800a8f8 <__lo0bits+0x50>
 800a8f0:	085b      	lsrs	r3, r3, #1
 800a8f2:	f100 0001 	add.w	r0, r0, #1
 800a8f6:	d005      	beq.n	800a904 <__lo0bits+0x5c>
 800a8f8:	600b      	str	r3, [r1, #0]
 800a8fa:	4770      	bx	lr
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	e7e8      	b.n	800a8d2 <__lo0bits+0x2a>
 800a900:	2000      	movs	r0, #0
 800a902:	4770      	bx	lr
 800a904:	2020      	movs	r0, #32
 800a906:	4770      	bx	lr

0800a908 <__i2b>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	460c      	mov	r4, r1
 800a90c:	2101      	movs	r1, #1
 800a90e:	f7ff feff 	bl	800a710 <_Balloc>
 800a912:	4602      	mov	r2, r0
 800a914:	b928      	cbnz	r0, 800a922 <__i2b+0x1a>
 800a916:	4b05      	ldr	r3, [pc, #20]	; (800a92c <__i2b+0x24>)
 800a918:	4805      	ldr	r0, [pc, #20]	; (800a930 <__i2b+0x28>)
 800a91a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a91e:	f000 fd59 	bl	800b3d4 <__assert_func>
 800a922:	2301      	movs	r3, #1
 800a924:	6144      	str	r4, [r0, #20]
 800a926:	6103      	str	r3, [r0, #16]
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	bf00      	nop
 800a92c:	0800c100 	.word	0x0800c100
 800a930:	0800c111 	.word	0x0800c111

0800a934 <__multiply>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	4614      	mov	r4, r2
 800a93a:	690a      	ldr	r2, [r1, #16]
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	429a      	cmp	r2, r3
 800a940:	bfb8      	it	lt
 800a942:	460b      	movlt	r3, r1
 800a944:	460d      	mov	r5, r1
 800a946:	bfbc      	itt	lt
 800a948:	4625      	movlt	r5, r4
 800a94a:	461c      	movlt	r4, r3
 800a94c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a950:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a954:	68ab      	ldr	r3, [r5, #8]
 800a956:	6869      	ldr	r1, [r5, #4]
 800a958:	eb0a 0709 	add.w	r7, sl, r9
 800a95c:	42bb      	cmp	r3, r7
 800a95e:	b085      	sub	sp, #20
 800a960:	bfb8      	it	lt
 800a962:	3101      	addlt	r1, #1
 800a964:	f7ff fed4 	bl	800a710 <_Balloc>
 800a968:	b930      	cbnz	r0, 800a978 <__multiply+0x44>
 800a96a:	4602      	mov	r2, r0
 800a96c:	4b42      	ldr	r3, [pc, #264]	; (800aa78 <__multiply+0x144>)
 800a96e:	4843      	ldr	r0, [pc, #268]	; (800aa7c <__multiply+0x148>)
 800a970:	f240 115d 	movw	r1, #349	; 0x15d
 800a974:	f000 fd2e 	bl	800b3d4 <__assert_func>
 800a978:	f100 0614 	add.w	r6, r0, #20
 800a97c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a980:	4633      	mov	r3, r6
 800a982:	2200      	movs	r2, #0
 800a984:	4543      	cmp	r3, r8
 800a986:	d31e      	bcc.n	800a9c6 <__multiply+0x92>
 800a988:	f105 0c14 	add.w	ip, r5, #20
 800a98c:	f104 0314 	add.w	r3, r4, #20
 800a990:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a994:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a998:	9202      	str	r2, [sp, #8]
 800a99a:	ebac 0205 	sub.w	r2, ip, r5
 800a99e:	3a15      	subs	r2, #21
 800a9a0:	f022 0203 	bic.w	r2, r2, #3
 800a9a4:	3204      	adds	r2, #4
 800a9a6:	f105 0115 	add.w	r1, r5, #21
 800a9aa:	458c      	cmp	ip, r1
 800a9ac:	bf38      	it	cc
 800a9ae:	2204      	movcc	r2, #4
 800a9b0:	9201      	str	r2, [sp, #4]
 800a9b2:	9a02      	ldr	r2, [sp, #8]
 800a9b4:	9303      	str	r3, [sp, #12]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d808      	bhi.n	800a9cc <__multiply+0x98>
 800a9ba:	2f00      	cmp	r7, #0
 800a9bc:	dc55      	bgt.n	800aa6a <__multiply+0x136>
 800a9be:	6107      	str	r7, [r0, #16]
 800a9c0:	b005      	add	sp, #20
 800a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c6:	f843 2b04 	str.w	r2, [r3], #4
 800a9ca:	e7db      	b.n	800a984 <__multiply+0x50>
 800a9cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9d0:	f1ba 0f00 	cmp.w	sl, #0
 800a9d4:	d020      	beq.n	800aa18 <__multiply+0xe4>
 800a9d6:	f105 0e14 	add.w	lr, r5, #20
 800a9da:	46b1      	mov	r9, r6
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a9e2:	f8d9 b000 	ldr.w	fp, [r9]
 800a9e6:	b2a1      	uxth	r1, r4
 800a9e8:	fa1f fb8b 	uxth.w	fp, fp
 800a9ec:	fb0a b101 	mla	r1, sl, r1, fp
 800a9f0:	4411      	add	r1, r2
 800a9f2:	f8d9 2000 	ldr.w	r2, [r9]
 800a9f6:	0c24      	lsrs	r4, r4, #16
 800a9f8:	0c12      	lsrs	r2, r2, #16
 800a9fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800a9fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa02:	b289      	uxth	r1, r1
 800aa04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa08:	45f4      	cmp	ip, lr
 800aa0a:	f849 1b04 	str.w	r1, [r9], #4
 800aa0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa12:	d8e4      	bhi.n	800a9de <__multiply+0xaa>
 800aa14:	9901      	ldr	r1, [sp, #4]
 800aa16:	5072      	str	r2, [r6, r1]
 800aa18:	9a03      	ldr	r2, [sp, #12]
 800aa1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	d01f      	beq.n	800aa66 <__multiply+0x132>
 800aa26:	6834      	ldr	r4, [r6, #0]
 800aa28:	f105 0114 	add.w	r1, r5, #20
 800aa2c:	46b6      	mov	lr, r6
 800aa2e:	f04f 0a00 	mov.w	sl, #0
 800aa32:	880a      	ldrh	r2, [r1, #0]
 800aa34:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa38:	fb09 b202 	mla	r2, r9, r2, fp
 800aa3c:	4492      	add	sl, r2
 800aa3e:	b2a4      	uxth	r4, r4
 800aa40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aa44:	f84e 4b04 	str.w	r4, [lr], #4
 800aa48:	f851 4b04 	ldr.w	r4, [r1], #4
 800aa4c:	f8be 2000 	ldrh.w	r2, [lr]
 800aa50:	0c24      	lsrs	r4, r4, #16
 800aa52:	fb09 2404 	mla	r4, r9, r4, r2
 800aa56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aa5a:	458c      	cmp	ip, r1
 800aa5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa60:	d8e7      	bhi.n	800aa32 <__multiply+0xfe>
 800aa62:	9a01      	ldr	r2, [sp, #4]
 800aa64:	50b4      	str	r4, [r6, r2]
 800aa66:	3604      	adds	r6, #4
 800aa68:	e7a3      	b.n	800a9b2 <__multiply+0x7e>
 800aa6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1a5      	bne.n	800a9be <__multiply+0x8a>
 800aa72:	3f01      	subs	r7, #1
 800aa74:	e7a1      	b.n	800a9ba <__multiply+0x86>
 800aa76:	bf00      	nop
 800aa78:	0800c100 	.word	0x0800c100
 800aa7c:	0800c111 	.word	0x0800c111

0800aa80 <__pow5mult>:
 800aa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa84:	4615      	mov	r5, r2
 800aa86:	f012 0203 	ands.w	r2, r2, #3
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	d007      	beq.n	800aaa0 <__pow5mult+0x20>
 800aa90:	4c25      	ldr	r4, [pc, #148]	; (800ab28 <__pow5mult+0xa8>)
 800aa92:	3a01      	subs	r2, #1
 800aa94:	2300      	movs	r3, #0
 800aa96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa9a:	f7ff fe9b 	bl	800a7d4 <__multadd>
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	10ad      	asrs	r5, r5, #2
 800aaa2:	d03d      	beq.n	800ab20 <__pow5mult+0xa0>
 800aaa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aaa6:	b97c      	cbnz	r4, 800aac8 <__pow5mult+0x48>
 800aaa8:	2010      	movs	r0, #16
 800aaaa:	f7ff fe03 	bl	800a6b4 <malloc>
 800aaae:	4602      	mov	r2, r0
 800aab0:	6270      	str	r0, [r6, #36]	; 0x24
 800aab2:	b928      	cbnz	r0, 800aac0 <__pow5mult+0x40>
 800aab4:	4b1d      	ldr	r3, [pc, #116]	; (800ab2c <__pow5mult+0xac>)
 800aab6:	481e      	ldr	r0, [pc, #120]	; (800ab30 <__pow5mult+0xb0>)
 800aab8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aabc:	f000 fc8a 	bl	800b3d4 <__assert_func>
 800aac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aac4:	6004      	str	r4, [r0, #0]
 800aac6:	60c4      	str	r4, [r0, #12]
 800aac8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aacc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aad0:	b94c      	cbnz	r4, 800aae6 <__pow5mult+0x66>
 800aad2:	f240 2171 	movw	r1, #625	; 0x271
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ff16 	bl	800a908 <__i2b>
 800aadc:	2300      	movs	r3, #0
 800aade:	f8c8 0008 	str.w	r0, [r8, #8]
 800aae2:	4604      	mov	r4, r0
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	f04f 0900 	mov.w	r9, #0
 800aaea:	07eb      	lsls	r3, r5, #31
 800aaec:	d50a      	bpl.n	800ab04 <__pow5mult+0x84>
 800aaee:	4639      	mov	r1, r7
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7ff ff1e 	bl	800a934 <__multiply>
 800aaf8:	4639      	mov	r1, r7
 800aafa:	4680      	mov	r8, r0
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff fe47 	bl	800a790 <_Bfree>
 800ab02:	4647      	mov	r7, r8
 800ab04:	106d      	asrs	r5, r5, #1
 800ab06:	d00b      	beq.n	800ab20 <__pow5mult+0xa0>
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	b938      	cbnz	r0, 800ab1c <__pow5mult+0x9c>
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff ff0f 	bl	800a934 <__multiply>
 800ab16:	6020      	str	r0, [r4, #0]
 800ab18:	f8c0 9000 	str.w	r9, [r0]
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	e7e4      	b.n	800aaea <__pow5mult+0x6a>
 800ab20:	4638      	mov	r0, r7
 800ab22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab26:	bf00      	nop
 800ab28:	0800c268 	.word	0x0800c268
 800ab2c:	0800c08a 	.word	0x0800c08a
 800ab30:	0800c111 	.word	0x0800c111

0800ab34 <__lshift>:
 800ab34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	460c      	mov	r4, r1
 800ab3a:	6849      	ldr	r1, [r1, #4]
 800ab3c:	6923      	ldr	r3, [r4, #16]
 800ab3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab42:	68a3      	ldr	r3, [r4, #8]
 800ab44:	4607      	mov	r7, r0
 800ab46:	4691      	mov	r9, r2
 800ab48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab4c:	f108 0601 	add.w	r6, r8, #1
 800ab50:	42b3      	cmp	r3, r6
 800ab52:	db0b      	blt.n	800ab6c <__lshift+0x38>
 800ab54:	4638      	mov	r0, r7
 800ab56:	f7ff fddb 	bl	800a710 <_Balloc>
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	b948      	cbnz	r0, 800ab72 <__lshift+0x3e>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	4b28      	ldr	r3, [pc, #160]	; (800ac04 <__lshift+0xd0>)
 800ab62:	4829      	ldr	r0, [pc, #164]	; (800ac08 <__lshift+0xd4>)
 800ab64:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab68:	f000 fc34 	bl	800b3d4 <__assert_func>
 800ab6c:	3101      	adds	r1, #1
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	e7ee      	b.n	800ab50 <__lshift+0x1c>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f100 0114 	add.w	r1, r0, #20
 800ab78:	f100 0210 	add.w	r2, r0, #16
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	4553      	cmp	r3, sl
 800ab80:	db33      	blt.n	800abea <__lshift+0xb6>
 800ab82:	6920      	ldr	r0, [r4, #16]
 800ab84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab88:	f104 0314 	add.w	r3, r4, #20
 800ab8c:	f019 091f 	ands.w	r9, r9, #31
 800ab90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab98:	d02b      	beq.n	800abf2 <__lshift+0xbe>
 800ab9a:	f1c9 0e20 	rsb	lr, r9, #32
 800ab9e:	468a      	mov	sl, r1
 800aba0:	2200      	movs	r2, #0
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	fa00 f009 	lsl.w	r0, r0, r9
 800aba8:	4302      	orrs	r2, r0
 800abaa:	f84a 2b04 	str.w	r2, [sl], #4
 800abae:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb2:	459c      	cmp	ip, r3
 800abb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800abb8:	d8f3      	bhi.n	800aba2 <__lshift+0x6e>
 800abba:	ebac 0304 	sub.w	r3, ip, r4
 800abbe:	3b15      	subs	r3, #21
 800abc0:	f023 0303 	bic.w	r3, r3, #3
 800abc4:	3304      	adds	r3, #4
 800abc6:	f104 0015 	add.w	r0, r4, #21
 800abca:	4584      	cmp	ip, r0
 800abcc:	bf38      	it	cc
 800abce:	2304      	movcc	r3, #4
 800abd0:	50ca      	str	r2, [r1, r3]
 800abd2:	b10a      	cbz	r2, 800abd8 <__lshift+0xa4>
 800abd4:	f108 0602 	add.w	r6, r8, #2
 800abd8:	3e01      	subs	r6, #1
 800abda:	4638      	mov	r0, r7
 800abdc:	612e      	str	r6, [r5, #16]
 800abde:	4621      	mov	r1, r4
 800abe0:	f7ff fdd6 	bl	800a790 <_Bfree>
 800abe4:	4628      	mov	r0, r5
 800abe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abea:	f842 0f04 	str.w	r0, [r2, #4]!
 800abee:	3301      	adds	r3, #1
 800abf0:	e7c5      	b.n	800ab7e <__lshift+0x4a>
 800abf2:	3904      	subs	r1, #4
 800abf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800abfc:	459c      	cmp	ip, r3
 800abfe:	d8f9      	bhi.n	800abf4 <__lshift+0xc0>
 800ac00:	e7ea      	b.n	800abd8 <__lshift+0xa4>
 800ac02:	bf00      	nop
 800ac04:	0800c100 	.word	0x0800c100
 800ac08:	0800c111 	.word	0x0800c111

0800ac0c <__mcmp>:
 800ac0c:	b530      	push	{r4, r5, lr}
 800ac0e:	6902      	ldr	r2, [r0, #16]
 800ac10:	690c      	ldr	r4, [r1, #16]
 800ac12:	1b12      	subs	r2, r2, r4
 800ac14:	d10e      	bne.n	800ac34 <__mcmp+0x28>
 800ac16:	f100 0314 	add.w	r3, r0, #20
 800ac1a:	3114      	adds	r1, #20
 800ac1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac2c:	42a5      	cmp	r5, r4
 800ac2e:	d003      	beq.n	800ac38 <__mcmp+0x2c>
 800ac30:	d305      	bcc.n	800ac3e <__mcmp+0x32>
 800ac32:	2201      	movs	r2, #1
 800ac34:	4610      	mov	r0, r2
 800ac36:	bd30      	pop	{r4, r5, pc}
 800ac38:	4283      	cmp	r3, r0
 800ac3a:	d3f3      	bcc.n	800ac24 <__mcmp+0x18>
 800ac3c:	e7fa      	b.n	800ac34 <__mcmp+0x28>
 800ac3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac42:	e7f7      	b.n	800ac34 <__mcmp+0x28>

0800ac44 <__mdiff>:
 800ac44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac48:	460c      	mov	r4, r1
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4617      	mov	r7, r2
 800ac52:	f7ff ffdb 	bl	800ac0c <__mcmp>
 800ac56:	1e05      	subs	r5, r0, #0
 800ac58:	d110      	bne.n	800ac7c <__mdiff+0x38>
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7ff fd57 	bl	800a710 <_Balloc>
 800ac62:	b930      	cbnz	r0, 800ac72 <__mdiff+0x2e>
 800ac64:	4b39      	ldr	r3, [pc, #228]	; (800ad4c <__mdiff+0x108>)
 800ac66:	4602      	mov	r2, r0
 800ac68:	f240 2132 	movw	r1, #562	; 0x232
 800ac6c:	4838      	ldr	r0, [pc, #224]	; (800ad50 <__mdiff+0x10c>)
 800ac6e:	f000 fbb1 	bl	800b3d4 <__assert_func>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7c:	bfa4      	itt	ge
 800ac7e:	463b      	movge	r3, r7
 800ac80:	4627      	movge	r7, r4
 800ac82:	4630      	mov	r0, r6
 800ac84:	6879      	ldr	r1, [r7, #4]
 800ac86:	bfa6      	itte	ge
 800ac88:	461c      	movge	r4, r3
 800ac8a:	2500      	movge	r5, #0
 800ac8c:	2501      	movlt	r5, #1
 800ac8e:	f7ff fd3f 	bl	800a710 <_Balloc>
 800ac92:	b920      	cbnz	r0, 800ac9e <__mdiff+0x5a>
 800ac94:	4b2d      	ldr	r3, [pc, #180]	; (800ad4c <__mdiff+0x108>)
 800ac96:	4602      	mov	r2, r0
 800ac98:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac9c:	e7e6      	b.n	800ac6c <__mdiff+0x28>
 800ac9e:	693e      	ldr	r6, [r7, #16]
 800aca0:	60c5      	str	r5, [r0, #12]
 800aca2:	6925      	ldr	r5, [r4, #16]
 800aca4:	f107 0114 	add.w	r1, r7, #20
 800aca8:	f104 0914 	add.w	r9, r4, #20
 800acac:	f100 0e14 	add.w	lr, r0, #20
 800acb0:	f107 0210 	add.w	r2, r7, #16
 800acb4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800acb8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800acbc:	46f2      	mov	sl, lr
 800acbe:	2700      	movs	r7, #0
 800acc0:	f859 3b04 	ldr.w	r3, [r9], #4
 800acc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800acc8:	fa1f f883 	uxth.w	r8, r3
 800accc:	fa17 f78b 	uxtah	r7, r7, fp
 800acd0:	0c1b      	lsrs	r3, r3, #16
 800acd2:	eba7 0808 	sub.w	r8, r7, r8
 800acd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800acda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800acde:	fa1f f888 	uxth.w	r8, r8
 800ace2:	141f      	asrs	r7, r3, #16
 800ace4:	454d      	cmp	r5, r9
 800ace6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acea:	f84a 3b04 	str.w	r3, [sl], #4
 800acee:	d8e7      	bhi.n	800acc0 <__mdiff+0x7c>
 800acf0:	1b2b      	subs	r3, r5, r4
 800acf2:	3b15      	subs	r3, #21
 800acf4:	f023 0303 	bic.w	r3, r3, #3
 800acf8:	3304      	adds	r3, #4
 800acfa:	3415      	adds	r4, #21
 800acfc:	42a5      	cmp	r5, r4
 800acfe:	bf38      	it	cc
 800ad00:	2304      	movcc	r3, #4
 800ad02:	4419      	add	r1, r3
 800ad04:	4473      	add	r3, lr
 800ad06:	469e      	mov	lr, r3
 800ad08:	460d      	mov	r5, r1
 800ad0a:	4565      	cmp	r5, ip
 800ad0c:	d30e      	bcc.n	800ad2c <__mdiff+0xe8>
 800ad0e:	f10c 0203 	add.w	r2, ip, #3
 800ad12:	1a52      	subs	r2, r2, r1
 800ad14:	f022 0203 	bic.w	r2, r2, #3
 800ad18:	3903      	subs	r1, #3
 800ad1a:	458c      	cmp	ip, r1
 800ad1c:	bf38      	it	cc
 800ad1e:	2200      	movcc	r2, #0
 800ad20:	441a      	add	r2, r3
 800ad22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad26:	b17b      	cbz	r3, 800ad48 <__mdiff+0x104>
 800ad28:	6106      	str	r6, [r0, #16]
 800ad2a:	e7a5      	b.n	800ac78 <__mdiff+0x34>
 800ad2c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad30:	fa17 f488 	uxtah	r4, r7, r8
 800ad34:	1422      	asrs	r2, r4, #16
 800ad36:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad3a:	b2a4      	uxth	r4, r4
 800ad3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad40:	f84e 4b04 	str.w	r4, [lr], #4
 800ad44:	1417      	asrs	r7, r2, #16
 800ad46:	e7e0      	b.n	800ad0a <__mdiff+0xc6>
 800ad48:	3e01      	subs	r6, #1
 800ad4a:	e7ea      	b.n	800ad22 <__mdiff+0xde>
 800ad4c:	0800c100 	.word	0x0800c100
 800ad50:	0800c111 	.word	0x0800c111

0800ad54 <__d2b>:
 800ad54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad58:	4689      	mov	r9, r1
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	ec57 6b10 	vmov	r6, r7, d0
 800ad60:	4690      	mov	r8, r2
 800ad62:	f7ff fcd5 	bl	800a710 <_Balloc>
 800ad66:	4604      	mov	r4, r0
 800ad68:	b930      	cbnz	r0, 800ad78 <__d2b+0x24>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	4b25      	ldr	r3, [pc, #148]	; (800ae04 <__d2b+0xb0>)
 800ad6e:	4826      	ldr	r0, [pc, #152]	; (800ae08 <__d2b+0xb4>)
 800ad70:	f240 310a 	movw	r1, #778	; 0x30a
 800ad74:	f000 fb2e 	bl	800b3d4 <__assert_func>
 800ad78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad80:	bb35      	cbnz	r5, 800add0 <__d2b+0x7c>
 800ad82:	2e00      	cmp	r6, #0
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	d028      	beq.n	800adda <__d2b+0x86>
 800ad88:	4668      	mov	r0, sp
 800ad8a:	9600      	str	r6, [sp, #0]
 800ad8c:	f7ff fd8c 	bl	800a8a8 <__lo0bits>
 800ad90:	9900      	ldr	r1, [sp, #0]
 800ad92:	b300      	cbz	r0, 800add6 <__d2b+0x82>
 800ad94:	9a01      	ldr	r2, [sp, #4]
 800ad96:	f1c0 0320 	rsb	r3, r0, #32
 800ad9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	40c2      	lsrs	r2, r0
 800ada2:	6163      	str	r3, [r4, #20]
 800ada4:	9201      	str	r2, [sp, #4]
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	61a3      	str	r3, [r4, #24]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bf14      	ite	ne
 800adae:	2202      	movne	r2, #2
 800adb0:	2201      	moveq	r2, #1
 800adb2:	6122      	str	r2, [r4, #16]
 800adb4:	b1d5      	cbz	r5, 800adec <__d2b+0x98>
 800adb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adba:	4405      	add	r5, r0
 800adbc:	f8c9 5000 	str.w	r5, [r9]
 800adc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adc4:	f8c8 0000 	str.w	r0, [r8]
 800adc8:	4620      	mov	r0, r4
 800adca:	b003      	add	sp, #12
 800adcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800add0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800add4:	e7d5      	b.n	800ad82 <__d2b+0x2e>
 800add6:	6161      	str	r1, [r4, #20]
 800add8:	e7e5      	b.n	800ada6 <__d2b+0x52>
 800adda:	a801      	add	r0, sp, #4
 800addc:	f7ff fd64 	bl	800a8a8 <__lo0bits>
 800ade0:	9b01      	ldr	r3, [sp, #4]
 800ade2:	6163      	str	r3, [r4, #20]
 800ade4:	2201      	movs	r2, #1
 800ade6:	6122      	str	r2, [r4, #16]
 800ade8:	3020      	adds	r0, #32
 800adea:	e7e3      	b.n	800adb4 <__d2b+0x60>
 800adec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adf4:	f8c9 0000 	str.w	r0, [r9]
 800adf8:	6918      	ldr	r0, [r3, #16]
 800adfa:	f7ff fd35 	bl	800a868 <__hi0bits>
 800adfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae02:	e7df      	b.n	800adc4 <__d2b+0x70>
 800ae04:	0800c100 	.word	0x0800c100
 800ae08:	0800c111 	.word	0x0800c111

0800ae0c <_calloc_r>:
 800ae0c:	b513      	push	{r0, r1, r4, lr}
 800ae0e:	434a      	muls	r2, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	9201      	str	r2, [sp, #4]
 800ae14:	f7fd fdec 	bl	80089f0 <_malloc_r>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	b118      	cbz	r0, 800ae24 <_calloc_r+0x18>
 800ae1c:	9a01      	ldr	r2, [sp, #4]
 800ae1e:	2100      	movs	r1, #0
 800ae20:	f7fd fd8d 	bl	800893e <memset>
 800ae24:	4620      	mov	r0, r4
 800ae26:	b002      	add	sp, #8
 800ae28:	bd10      	pop	{r4, pc}

0800ae2a <__ssputs_r>:
 800ae2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2e:	688e      	ldr	r6, [r1, #8]
 800ae30:	429e      	cmp	r6, r3
 800ae32:	4682      	mov	sl, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	4690      	mov	r8, r2
 800ae38:	461f      	mov	r7, r3
 800ae3a:	d838      	bhi.n	800aeae <__ssputs_r+0x84>
 800ae3c:	898a      	ldrh	r2, [r1, #12]
 800ae3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae42:	d032      	beq.n	800aeaa <__ssputs_r+0x80>
 800ae44:	6825      	ldr	r5, [r4, #0]
 800ae46:	6909      	ldr	r1, [r1, #16]
 800ae48:	eba5 0901 	sub.w	r9, r5, r1
 800ae4c:	6965      	ldr	r5, [r4, #20]
 800ae4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae56:	3301      	adds	r3, #1
 800ae58:	444b      	add	r3, r9
 800ae5a:	106d      	asrs	r5, r5, #1
 800ae5c:	429d      	cmp	r5, r3
 800ae5e:	bf38      	it	cc
 800ae60:	461d      	movcc	r5, r3
 800ae62:	0553      	lsls	r3, r2, #21
 800ae64:	d531      	bpl.n	800aeca <__ssputs_r+0xa0>
 800ae66:	4629      	mov	r1, r5
 800ae68:	f7fd fdc2 	bl	80089f0 <_malloc_r>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	b950      	cbnz	r0, 800ae86 <__ssputs_r+0x5c>
 800ae70:	230c      	movs	r3, #12
 800ae72:	f8ca 3000 	str.w	r3, [sl]
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7c:	81a3      	strh	r3, [r4, #12]
 800ae7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae86:	6921      	ldr	r1, [r4, #16]
 800ae88:	464a      	mov	r2, r9
 800ae8a:	f7fd fd4a 	bl	8008922 <memcpy>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	6126      	str	r6, [r4, #16]
 800ae9c:	6165      	str	r5, [r4, #20]
 800ae9e:	444e      	add	r6, r9
 800aea0:	eba5 0509 	sub.w	r5, r5, r9
 800aea4:	6026      	str	r6, [r4, #0]
 800aea6:	60a5      	str	r5, [r4, #8]
 800aea8:	463e      	mov	r6, r7
 800aeaa:	42be      	cmp	r6, r7
 800aeac:	d900      	bls.n	800aeb0 <__ssputs_r+0x86>
 800aeae:	463e      	mov	r6, r7
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	4641      	mov	r1, r8
 800aeb6:	f000 faf1 	bl	800b49c <memmove>
 800aeba:	68a3      	ldr	r3, [r4, #8]
 800aebc:	6822      	ldr	r2, [r4, #0]
 800aebe:	1b9b      	subs	r3, r3, r6
 800aec0:	4432      	add	r2, r6
 800aec2:	60a3      	str	r3, [r4, #8]
 800aec4:	6022      	str	r2, [r4, #0]
 800aec6:	2000      	movs	r0, #0
 800aec8:	e7db      	b.n	800ae82 <__ssputs_r+0x58>
 800aeca:	462a      	mov	r2, r5
 800aecc:	f000 fb00 	bl	800b4d0 <_realloc_r>
 800aed0:	4606      	mov	r6, r0
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d1e1      	bne.n	800ae9a <__ssputs_r+0x70>
 800aed6:	6921      	ldr	r1, [r4, #16]
 800aed8:	4650      	mov	r0, sl
 800aeda:	f7fd fd39 	bl	8008950 <_free_r>
 800aede:	e7c7      	b.n	800ae70 <__ssputs_r+0x46>

0800aee0 <_svfiprintf_r>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	4698      	mov	r8, r3
 800aee6:	898b      	ldrh	r3, [r1, #12]
 800aee8:	061b      	lsls	r3, r3, #24
 800aeea:	b09d      	sub	sp, #116	; 0x74
 800aeec:	4607      	mov	r7, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	4614      	mov	r4, r2
 800aef2:	d50e      	bpl.n	800af12 <_svfiprintf_r+0x32>
 800aef4:	690b      	ldr	r3, [r1, #16]
 800aef6:	b963      	cbnz	r3, 800af12 <_svfiprintf_r+0x32>
 800aef8:	2140      	movs	r1, #64	; 0x40
 800aefa:	f7fd fd79 	bl	80089f0 <_malloc_r>
 800aefe:	6028      	str	r0, [r5, #0]
 800af00:	6128      	str	r0, [r5, #16]
 800af02:	b920      	cbnz	r0, 800af0e <_svfiprintf_r+0x2e>
 800af04:	230c      	movs	r3, #12
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af0c:	e0d1      	b.n	800b0b2 <_svfiprintf_r+0x1d2>
 800af0e:	2340      	movs	r3, #64	; 0x40
 800af10:	616b      	str	r3, [r5, #20]
 800af12:	2300      	movs	r3, #0
 800af14:	9309      	str	r3, [sp, #36]	; 0x24
 800af16:	2320      	movs	r3, #32
 800af18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af20:	2330      	movs	r3, #48	; 0x30
 800af22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0cc <_svfiprintf_r+0x1ec>
 800af26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af2a:	f04f 0901 	mov.w	r9, #1
 800af2e:	4623      	mov	r3, r4
 800af30:	469a      	mov	sl, r3
 800af32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af36:	b10a      	cbz	r2, 800af3c <_svfiprintf_r+0x5c>
 800af38:	2a25      	cmp	r2, #37	; 0x25
 800af3a:	d1f9      	bne.n	800af30 <_svfiprintf_r+0x50>
 800af3c:	ebba 0b04 	subs.w	fp, sl, r4
 800af40:	d00b      	beq.n	800af5a <_svfiprintf_r+0x7a>
 800af42:	465b      	mov	r3, fp
 800af44:	4622      	mov	r2, r4
 800af46:	4629      	mov	r1, r5
 800af48:	4638      	mov	r0, r7
 800af4a:	f7ff ff6e 	bl	800ae2a <__ssputs_r>
 800af4e:	3001      	adds	r0, #1
 800af50:	f000 80aa 	beq.w	800b0a8 <_svfiprintf_r+0x1c8>
 800af54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af56:	445a      	add	r2, fp
 800af58:	9209      	str	r2, [sp, #36]	; 0x24
 800af5a:	f89a 3000 	ldrb.w	r3, [sl]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 80a2 	beq.w	800b0a8 <_svfiprintf_r+0x1c8>
 800af64:	2300      	movs	r3, #0
 800af66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af6e:	f10a 0a01 	add.w	sl, sl, #1
 800af72:	9304      	str	r3, [sp, #16]
 800af74:	9307      	str	r3, [sp, #28]
 800af76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af7a:	931a      	str	r3, [sp, #104]	; 0x68
 800af7c:	4654      	mov	r4, sl
 800af7e:	2205      	movs	r2, #5
 800af80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af84:	4851      	ldr	r0, [pc, #324]	; (800b0cc <_svfiprintf_r+0x1ec>)
 800af86:	f7f5 f933 	bl	80001f0 <memchr>
 800af8a:	9a04      	ldr	r2, [sp, #16]
 800af8c:	b9d8      	cbnz	r0, 800afc6 <_svfiprintf_r+0xe6>
 800af8e:	06d0      	lsls	r0, r2, #27
 800af90:	bf44      	itt	mi
 800af92:	2320      	movmi	r3, #32
 800af94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af98:	0711      	lsls	r1, r2, #28
 800af9a:	bf44      	itt	mi
 800af9c:	232b      	movmi	r3, #43	; 0x2b
 800af9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afa2:	f89a 3000 	ldrb.w	r3, [sl]
 800afa6:	2b2a      	cmp	r3, #42	; 0x2a
 800afa8:	d015      	beq.n	800afd6 <_svfiprintf_r+0xf6>
 800afaa:	9a07      	ldr	r2, [sp, #28]
 800afac:	4654      	mov	r4, sl
 800afae:	2000      	movs	r0, #0
 800afb0:	f04f 0c0a 	mov.w	ip, #10
 800afb4:	4621      	mov	r1, r4
 800afb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afba:	3b30      	subs	r3, #48	; 0x30
 800afbc:	2b09      	cmp	r3, #9
 800afbe:	d94e      	bls.n	800b05e <_svfiprintf_r+0x17e>
 800afc0:	b1b0      	cbz	r0, 800aff0 <_svfiprintf_r+0x110>
 800afc2:	9207      	str	r2, [sp, #28]
 800afc4:	e014      	b.n	800aff0 <_svfiprintf_r+0x110>
 800afc6:	eba0 0308 	sub.w	r3, r0, r8
 800afca:	fa09 f303 	lsl.w	r3, r9, r3
 800afce:	4313      	orrs	r3, r2
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	46a2      	mov	sl, r4
 800afd4:	e7d2      	b.n	800af7c <_svfiprintf_r+0x9c>
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	1d19      	adds	r1, r3, #4
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	9103      	str	r1, [sp, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bfbb      	ittet	lt
 800afe2:	425b      	neglt	r3, r3
 800afe4:	f042 0202 	orrlt.w	r2, r2, #2
 800afe8:	9307      	strge	r3, [sp, #28]
 800afea:	9307      	strlt	r3, [sp, #28]
 800afec:	bfb8      	it	lt
 800afee:	9204      	strlt	r2, [sp, #16]
 800aff0:	7823      	ldrb	r3, [r4, #0]
 800aff2:	2b2e      	cmp	r3, #46	; 0x2e
 800aff4:	d10c      	bne.n	800b010 <_svfiprintf_r+0x130>
 800aff6:	7863      	ldrb	r3, [r4, #1]
 800aff8:	2b2a      	cmp	r3, #42	; 0x2a
 800affa:	d135      	bne.n	800b068 <_svfiprintf_r+0x188>
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	1d1a      	adds	r2, r3, #4
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	9203      	str	r2, [sp, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	bfb8      	it	lt
 800b008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b00c:	3402      	adds	r4, #2
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0dc <_svfiprintf_r+0x1fc>
 800b014:	7821      	ldrb	r1, [r4, #0]
 800b016:	2203      	movs	r2, #3
 800b018:	4650      	mov	r0, sl
 800b01a:	f7f5 f8e9 	bl	80001f0 <memchr>
 800b01e:	b140      	cbz	r0, 800b032 <_svfiprintf_r+0x152>
 800b020:	2340      	movs	r3, #64	; 0x40
 800b022:	eba0 000a 	sub.w	r0, r0, sl
 800b026:	fa03 f000 	lsl.w	r0, r3, r0
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	4303      	orrs	r3, r0
 800b02e:	3401      	adds	r4, #1
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b036:	4826      	ldr	r0, [pc, #152]	; (800b0d0 <_svfiprintf_r+0x1f0>)
 800b038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b03c:	2206      	movs	r2, #6
 800b03e:	f7f5 f8d7 	bl	80001f0 <memchr>
 800b042:	2800      	cmp	r0, #0
 800b044:	d038      	beq.n	800b0b8 <_svfiprintf_r+0x1d8>
 800b046:	4b23      	ldr	r3, [pc, #140]	; (800b0d4 <_svfiprintf_r+0x1f4>)
 800b048:	bb1b      	cbnz	r3, 800b092 <_svfiprintf_r+0x1b2>
 800b04a:	9b03      	ldr	r3, [sp, #12]
 800b04c:	3307      	adds	r3, #7
 800b04e:	f023 0307 	bic.w	r3, r3, #7
 800b052:	3308      	adds	r3, #8
 800b054:	9303      	str	r3, [sp, #12]
 800b056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b058:	4433      	add	r3, r6
 800b05a:	9309      	str	r3, [sp, #36]	; 0x24
 800b05c:	e767      	b.n	800af2e <_svfiprintf_r+0x4e>
 800b05e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b062:	460c      	mov	r4, r1
 800b064:	2001      	movs	r0, #1
 800b066:	e7a5      	b.n	800afb4 <_svfiprintf_r+0xd4>
 800b068:	2300      	movs	r3, #0
 800b06a:	3401      	adds	r4, #1
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	4619      	mov	r1, r3
 800b070:	f04f 0c0a 	mov.w	ip, #10
 800b074:	4620      	mov	r0, r4
 800b076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b07a:	3a30      	subs	r2, #48	; 0x30
 800b07c:	2a09      	cmp	r2, #9
 800b07e:	d903      	bls.n	800b088 <_svfiprintf_r+0x1a8>
 800b080:	2b00      	cmp	r3, #0
 800b082:	d0c5      	beq.n	800b010 <_svfiprintf_r+0x130>
 800b084:	9105      	str	r1, [sp, #20]
 800b086:	e7c3      	b.n	800b010 <_svfiprintf_r+0x130>
 800b088:	fb0c 2101 	mla	r1, ip, r1, r2
 800b08c:	4604      	mov	r4, r0
 800b08e:	2301      	movs	r3, #1
 800b090:	e7f0      	b.n	800b074 <_svfiprintf_r+0x194>
 800b092:	ab03      	add	r3, sp, #12
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	462a      	mov	r2, r5
 800b098:	4b0f      	ldr	r3, [pc, #60]	; (800b0d8 <_svfiprintf_r+0x1f8>)
 800b09a:	a904      	add	r1, sp, #16
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7fd fda1 	bl	8008be4 <_printf_float>
 800b0a2:	1c42      	adds	r2, r0, #1
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	d1d6      	bne.n	800b056 <_svfiprintf_r+0x176>
 800b0a8:	89ab      	ldrh	r3, [r5, #12]
 800b0aa:	065b      	lsls	r3, r3, #25
 800b0ac:	f53f af2c 	bmi.w	800af08 <_svfiprintf_r+0x28>
 800b0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b2:	b01d      	add	sp, #116	; 0x74
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	ab03      	add	r3, sp, #12
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	462a      	mov	r2, r5
 800b0be:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <_svfiprintf_r+0x1f8>)
 800b0c0:	a904      	add	r1, sp, #16
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	f7fe f832 	bl	800912c <_printf_i>
 800b0c8:	e7eb      	b.n	800b0a2 <_svfiprintf_r+0x1c2>
 800b0ca:	bf00      	nop
 800b0cc:	0800c274 	.word	0x0800c274
 800b0d0:	0800c27e 	.word	0x0800c27e
 800b0d4:	08008be5 	.word	0x08008be5
 800b0d8:	0800ae2b 	.word	0x0800ae2b
 800b0dc:	0800c27a 	.word	0x0800c27a

0800b0e0 <__sfputc_r>:
 800b0e0:	6893      	ldr	r3, [r2, #8]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	b410      	push	{r4}
 800b0e8:	6093      	str	r3, [r2, #8]
 800b0ea:	da08      	bge.n	800b0fe <__sfputc_r+0x1e>
 800b0ec:	6994      	ldr	r4, [r2, #24]
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	db01      	blt.n	800b0f6 <__sfputc_r+0x16>
 800b0f2:	290a      	cmp	r1, #10
 800b0f4:	d103      	bne.n	800b0fe <__sfputc_r+0x1e>
 800b0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0fa:	f7fe bb05 	b.w	8009708 <__swbuf_r>
 800b0fe:	6813      	ldr	r3, [r2, #0]
 800b100:	1c58      	adds	r0, r3, #1
 800b102:	6010      	str	r0, [r2, #0]
 800b104:	7019      	strb	r1, [r3, #0]
 800b106:	4608      	mov	r0, r1
 800b108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <__sfputs_r>:
 800b10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b110:	4606      	mov	r6, r0
 800b112:	460f      	mov	r7, r1
 800b114:	4614      	mov	r4, r2
 800b116:	18d5      	adds	r5, r2, r3
 800b118:	42ac      	cmp	r4, r5
 800b11a:	d101      	bne.n	800b120 <__sfputs_r+0x12>
 800b11c:	2000      	movs	r0, #0
 800b11e:	e007      	b.n	800b130 <__sfputs_r+0x22>
 800b120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b124:	463a      	mov	r2, r7
 800b126:	4630      	mov	r0, r6
 800b128:	f7ff ffda 	bl	800b0e0 <__sfputc_r>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d1f3      	bne.n	800b118 <__sfputs_r+0xa>
 800b130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b134 <_vfiprintf_r>:
 800b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	460d      	mov	r5, r1
 800b13a:	b09d      	sub	sp, #116	; 0x74
 800b13c:	4614      	mov	r4, r2
 800b13e:	4698      	mov	r8, r3
 800b140:	4606      	mov	r6, r0
 800b142:	b118      	cbz	r0, 800b14c <_vfiprintf_r+0x18>
 800b144:	6983      	ldr	r3, [r0, #24]
 800b146:	b90b      	cbnz	r3, 800b14c <_vfiprintf_r+0x18>
 800b148:	f7fd fb26 	bl	8008798 <__sinit>
 800b14c:	4b89      	ldr	r3, [pc, #548]	; (800b374 <_vfiprintf_r+0x240>)
 800b14e:	429d      	cmp	r5, r3
 800b150:	d11b      	bne.n	800b18a <_vfiprintf_r+0x56>
 800b152:	6875      	ldr	r5, [r6, #4]
 800b154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b156:	07d9      	lsls	r1, r3, #31
 800b158:	d405      	bmi.n	800b166 <_vfiprintf_r+0x32>
 800b15a:	89ab      	ldrh	r3, [r5, #12]
 800b15c:	059a      	lsls	r2, r3, #22
 800b15e:	d402      	bmi.n	800b166 <_vfiprintf_r+0x32>
 800b160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b162:	f7fd fbdc 	bl	800891e <__retarget_lock_acquire_recursive>
 800b166:	89ab      	ldrh	r3, [r5, #12]
 800b168:	071b      	lsls	r3, r3, #28
 800b16a:	d501      	bpl.n	800b170 <_vfiprintf_r+0x3c>
 800b16c:	692b      	ldr	r3, [r5, #16]
 800b16e:	b9eb      	cbnz	r3, 800b1ac <_vfiprintf_r+0x78>
 800b170:	4629      	mov	r1, r5
 800b172:	4630      	mov	r0, r6
 800b174:	f7fe fb2c 	bl	80097d0 <__swsetup_r>
 800b178:	b1c0      	cbz	r0, 800b1ac <_vfiprintf_r+0x78>
 800b17a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b17c:	07dc      	lsls	r4, r3, #31
 800b17e:	d50e      	bpl.n	800b19e <_vfiprintf_r+0x6a>
 800b180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b184:	b01d      	add	sp, #116	; 0x74
 800b186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18a:	4b7b      	ldr	r3, [pc, #492]	; (800b378 <_vfiprintf_r+0x244>)
 800b18c:	429d      	cmp	r5, r3
 800b18e:	d101      	bne.n	800b194 <_vfiprintf_r+0x60>
 800b190:	68b5      	ldr	r5, [r6, #8]
 800b192:	e7df      	b.n	800b154 <_vfiprintf_r+0x20>
 800b194:	4b79      	ldr	r3, [pc, #484]	; (800b37c <_vfiprintf_r+0x248>)
 800b196:	429d      	cmp	r5, r3
 800b198:	bf08      	it	eq
 800b19a:	68f5      	ldreq	r5, [r6, #12]
 800b19c:	e7da      	b.n	800b154 <_vfiprintf_r+0x20>
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	0598      	lsls	r0, r3, #22
 800b1a2:	d4ed      	bmi.n	800b180 <_vfiprintf_r+0x4c>
 800b1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a6:	f7fd fbbb 	bl	8008920 <__retarget_lock_release_recursive>
 800b1aa:	e7e9      	b.n	800b180 <_vfiprintf_r+0x4c>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b0:	2320      	movs	r3, #32
 800b1b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ba:	2330      	movs	r3, #48	; 0x30
 800b1bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b380 <_vfiprintf_r+0x24c>
 800b1c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c4:	f04f 0901 	mov.w	r9, #1
 800b1c8:	4623      	mov	r3, r4
 800b1ca:	469a      	mov	sl, r3
 800b1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d0:	b10a      	cbz	r2, 800b1d6 <_vfiprintf_r+0xa2>
 800b1d2:	2a25      	cmp	r2, #37	; 0x25
 800b1d4:	d1f9      	bne.n	800b1ca <_vfiprintf_r+0x96>
 800b1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b1da:	d00b      	beq.n	800b1f4 <_vfiprintf_r+0xc0>
 800b1dc:	465b      	mov	r3, fp
 800b1de:	4622      	mov	r2, r4
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f7ff ff93 	bl	800b10e <__sfputs_r>
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	f000 80aa 	beq.w	800b342 <_vfiprintf_r+0x20e>
 800b1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1f0:	445a      	add	r2, fp
 800b1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 80a2 	beq.w	800b342 <_vfiprintf_r+0x20e>
 800b1fe:	2300      	movs	r3, #0
 800b200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b208:	f10a 0a01 	add.w	sl, sl, #1
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	9307      	str	r3, [sp, #28]
 800b210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b214:	931a      	str	r3, [sp, #104]	; 0x68
 800b216:	4654      	mov	r4, sl
 800b218:	2205      	movs	r2, #5
 800b21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21e:	4858      	ldr	r0, [pc, #352]	; (800b380 <_vfiprintf_r+0x24c>)
 800b220:	f7f4 ffe6 	bl	80001f0 <memchr>
 800b224:	9a04      	ldr	r2, [sp, #16]
 800b226:	b9d8      	cbnz	r0, 800b260 <_vfiprintf_r+0x12c>
 800b228:	06d1      	lsls	r1, r2, #27
 800b22a:	bf44      	itt	mi
 800b22c:	2320      	movmi	r3, #32
 800b22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b232:	0713      	lsls	r3, r2, #28
 800b234:	bf44      	itt	mi
 800b236:	232b      	movmi	r3, #43	; 0x2b
 800b238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23c:	f89a 3000 	ldrb.w	r3, [sl]
 800b240:	2b2a      	cmp	r3, #42	; 0x2a
 800b242:	d015      	beq.n	800b270 <_vfiprintf_r+0x13c>
 800b244:	9a07      	ldr	r2, [sp, #28]
 800b246:	4654      	mov	r4, sl
 800b248:	2000      	movs	r0, #0
 800b24a:	f04f 0c0a 	mov.w	ip, #10
 800b24e:	4621      	mov	r1, r4
 800b250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b254:	3b30      	subs	r3, #48	; 0x30
 800b256:	2b09      	cmp	r3, #9
 800b258:	d94e      	bls.n	800b2f8 <_vfiprintf_r+0x1c4>
 800b25a:	b1b0      	cbz	r0, 800b28a <_vfiprintf_r+0x156>
 800b25c:	9207      	str	r2, [sp, #28]
 800b25e:	e014      	b.n	800b28a <_vfiprintf_r+0x156>
 800b260:	eba0 0308 	sub.w	r3, r0, r8
 800b264:	fa09 f303 	lsl.w	r3, r9, r3
 800b268:	4313      	orrs	r3, r2
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	46a2      	mov	sl, r4
 800b26e:	e7d2      	b.n	800b216 <_vfiprintf_r+0xe2>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	1d19      	adds	r1, r3, #4
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	9103      	str	r1, [sp, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	bfbb      	ittet	lt
 800b27c:	425b      	neglt	r3, r3
 800b27e:	f042 0202 	orrlt.w	r2, r2, #2
 800b282:	9307      	strge	r3, [sp, #28]
 800b284:	9307      	strlt	r3, [sp, #28]
 800b286:	bfb8      	it	lt
 800b288:	9204      	strlt	r2, [sp, #16]
 800b28a:	7823      	ldrb	r3, [r4, #0]
 800b28c:	2b2e      	cmp	r3, #46	; 0x2e
 800b28e:	d10c      	bne.n	800b2aa <_vfiprintf_r+0x176>
 800b290:	7863      	ldrb	r3, [r4, #1]
 800b292:	2b2a      	cmp	r3, #42	; 0x2a
 800b294:	d135      	bne.n	800b302 <_vfiprintf_r+0x1ce>
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9203      	str	r2, [sp, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfb8      	it	lt
 800b2a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b2a6:	3402      	adds	r4, #2
 800b2a8:	9305      	str	r3, [sp, #20]
 800b2aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b390 <_vfiprintf_r+0x25c>
 800b2ae:	7821      	ldrb	r1, [r4, #0]
 800b2b0:	2203      	movs	r2, #3
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	f7f4 ff9c 	bl	80001f0 <memchr>
 800b2b8:	b140      	cbz	r0, 800b2cc <_vfiprintf_r+0x198>
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	eba0 000a 	sub.w	r0, r0, sl
 800b2c0:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c4:	9b04      	ldr	r3, [sp, #16]
 800b2c6:	4303      	orrs	r3, r0
 800b2c8:	3401      	adds	r4, #1
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d0:	482c      	ldr	r0, [pc, #176]	; (800b384 <_vfiprintf_r+0x250>)
 800b2d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d6:	2206      	movs	r2, #6
 800b2d8:	f7f4 ff8a 	bl	80001f0 <memchr>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d03f      	beq.n	800b360 <_vfiprintf_r+0x22c>
 800b2e0:	4b29      	ldr	r3, [pc, #164]	; (800b388 <_vfiprintf_r+0x254>)
 800b2e2:	bb1b      	cbnz	r3, 800b32c <_vfiprintf_r+0x1f8>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	3307      	adds	r3, #7
 800b2e8:	f023 0307 	bic.w	r3, r3, #7
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	9303      	str	r3, [sp, #12]
 800b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f2:	443b      	add	r3, r7
 800b2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f6:	e767      	b.n	800b1c8 <_vfiprintf_r+0x94>
 800b2f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	2001      	movs	r0, #1
 800b300:	e7a5      	b.n	800b24e <_vfiprintf_r+0x11a>
 800b302:	2300      	movs	r3, #0
 800b304:	3401      	adds	r4, #1
 800b306:	9305      	str	r3, [sp, #20]
 800b308:	4619      	mov	r1, r3
 800b30a:	f04f 0c0a 	mov.w	ip, #10
 800b30e:	4620      	mov	r0, r4
 800b310:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b314:	3a30      	subs	r2, #48	; 0x30
 800b316:	2a09      	cmp	r2, #9
 800b318:	d903      	bls.n	800b322 <_vfiprintf_r+0x1ee>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0c5      	beq.n	800b2aa <_vfiprintf_r+0x176>
 800b31e:	9105      	str	r1, [sp, #20]
 800b320:	e7c3      	b.n	800b2aa <_vfiprintf_r+0x176>
 800b322:	fb0c 2101 	mla	r1, ip, r1, r2
 800b326:	4604      	mov	r4, r0
 800b328:	2301      	movs	r3, #1
 800b32a:	e7f0      	b.n	800b30e <_vfiprintf_r+0x1da>
 800b32c:	ab03      	add	r3, sp, #12
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	462a      	mov	r2, r5
 800b332:	4b16      	ldr	r3, [pc, #88]	; (800b38c <_vfiprintf_r+0x258>)
 800b334:	a904      	add	r1, sp, #16
 800b336:	4630      	mov	r0, r6
 800b338:	f7fd fc54 	bl	8008be4 <_printf_float>
 800b33c:	4607      	mov	r7, r0
 800b33e:	1c78      	adds	r0, r7, #1
 800b340:	d1d6      	bne.n	800b2f0 <_vfiprintf_r+0x1bc>
 800b342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b344:	07d9      	lsls	r1, r3, #31
 800b346:	d405      	bmi.n	800b354 <_vfiprintf_r+0x220>
 800b348:	89ab      	ldrh	r3, [r5, #12]
 800b34a:	059a      	lsls	r2, r3, #22
 800b34c:	d402      	bmi.n	800b354 <_vfiprintf_r+0x220>
 800b34e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b350:	f7fd fae6 	bl	8008920 <__retarget_lock_release_recursive>
 800b354:	89ab      	ldrh	r3, [r5, #12]
 800b356:	065b      	lsls	r3, r3, #25
 800b358:	f53f af12 	bmi.w	800b180 <_vfiprintf_r+0x4c>
 800b35c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b35e:	e711      	b.n	800b184 <_vfiprintf_r+0x50>
 800b360:	ab03      	add	r3, sp, #12
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	462a      	mov	r2, r5
 800b366:	4b09      	ldr	r3, [pc, #36]	; (800b38c <_vfiprintf_r+0x258>)
 800b368:	a904      	add	r1, sp, #16
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7fd fede 	bl	800912c <_printf_i>
 800b370:	e7e4      	b.n	800b33c <_vfiprintf_r+0x208>
 800b372:	bf00      	nop
 800b374:	0800bf04 	.word	0x0800bf04
 800b378:	0800bf24 	.word	0x0800bf24
 800b37c:	0800bee4 	.word	0x0800bee4
 800b380:	0800c274 	.word	0x0800c274
 800b384:	0800c27e 	.word	0x0800c27e
 800b388:	08008be5 	.word	0x08008be5
 800b38c:	0800b10f 	.word	0x0800b10f
 800b390:	0800c27a 	.word	0x0800c27a

0800b394 <_read_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	; (800b3b4 <_read_r+0x20>)
 800b398:	4604      	mov	r4, r0
 800b39a:	4608      	mov	r0, r1
 800b39c:	4611      	mov	r1, r2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	602a      	str	r2, [r5, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f7f6 ff5a 	bl	800225c <_read>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_read_r+0x1e>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_read_r+0x1e>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	2000c320 	.word	0x2000c320

0800b3b8 <strnlen>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	4401      	add	r1, r0
 800b3be:	428a      	cmp	r2, r1
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	d101      	bne.n	800b3c8 <strnlen+0x10>
 800b3c4:	1a18      	subs	r0, r3, r0
 800b3c6:	bd10      	pop	{r4, pc}
 800b3c8:	781c      	ldrb	r4, [r3, #0]
 800b3ca:	3201      	adds	r2, #1
 800b3cc:	2c00      	cmp	r4, #0
 800b3ce:	d1f6      	bne.n	800b3be <strnlen+0x6>
 800b3d0:	e7f8      	b.n	800b3c4 <strnlen+0xc>
	...

0800b3d4 <__assert_func>:
 800b3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3d6:	4614      	mov	r4, r2
 800b3d8:	461a      	mov	r2, r3
 800b3da:	4b09      	ldr	r3, [pc, #36]	; (800b400 <__assert_func+0x2c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4605      	mov	r5, r0
 800b3e0:	68d8      	ldr	r0, [r3, #12]
 800b3e2:	b14c      	cbz	r4, 800b3f8 <__assert_func+0x24>
 800b3e4:	4b07      	ldr	r3, [pc, #28]	; (800b404 <__assert_func+0x30>)
 800b3e6:	9100      	str	r1, [sp, #0]
 800b3e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3ec:	4906      	ldr	r1, [pc, #24]	; (800b408 <__assert_func+0x34>)
 800b3ee:	462b      	mov	r3, r5
 800b3f0:	f000 f80e 	bl	800b410 <fiprintf>
 800b3f4:	f000 f89f 	bl	800b536 <abort>
 800b3f8:	4b04      	ldr	r3, [pc, #16]	; (800b40c <__assert_func+0x38>)
 800b3fa:	461c      	mov	r4, r3
 800b3fc:	e7f3      	b.n	800b3e6 <__assert_func+0x12>
 800b3fe:	bf00      	nop
 800b400:	20000010 	.word	0x20000010
 800b404:	0800c285 	.word	0x0800c285
 800b408:	0800c292 	.word	0x0800c292
 800b40c:	0800c2c0 	.word	0x0800c2c0

0800b410 <fiprintf>:
 800b410:	b40e      	push	{r1, r2, r3}
 800b412:	b503      	push	{r0, r1, lr}
 800b414:	4601      	mov	r1, r0
 800b416:	ab03      	add	r3, sp, #12
 800b418:	4805      	ldr	r0, [pc, #20]	; (800b430 <fiprintf+0x20>)
 800b41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41e:	6800      	ldr	r0, [r0, #0]
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	f7ff fe87 	bl	800b134 <_vfiprintf_r>
 800b426:	b002      	add	sp, #8
 800b428:	f85d eb04 	ldr.w	lr, [sp], #4
 800b42c:	b003      	add	sp, #12
 800b42e:	4770      	bx	lr
 800b430:	20000010 	.word	0x20000010

0800b434 <_fstat_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d07      	ldr	r5, [pc, #28]	; (800b454 <_fstat_r+0x20>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	f7f6 ff34 	bl	80022ae <_fstat>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d102      	bne.n	800b450 <_fstat_r+0x1c>
 800b44a:	682b      	ldr	r3, [r5, #0]
 800b44c:	b103      	cbz	r3, 800b450 <_fstat_r+0x1c>
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	bf00      	nop
 800b454:	2000c320 	.word	0x2000c320

0800b458 <_isatty_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d06      	ldr	r5, [pc, #24]	; (800b474 <_isatty_r+0x1c>)
 800b45c:	2300      	movs	r3, #0
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7f6 ff33 	bl	80022ce <_isatty>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_isatty_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_isatty_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	2000c320 	.word	0x2000c320

0800b478 <__ascii_mbtowc>:
 800b478:	b082      	sub	sp, #8
 800b47a:	b901      	cbnz	r1, 800b47e <__ascii_mbtowc+0x6>
 800b47c:	a901      	add	r1, sp, #4
 800b47e:	b142      	cbz	r2, 800b492 <__ascii_mbtowc+0x1a>
 800b480:	b14b      	cbz	r3, 800b496 <__ascii_mbtowc+0x1e>
 800b482:	7813      	ldrb	r3, [r2, #0]
 800b484:	600b      	str	r3, [r1, #0]
 800b486:	7812      	ldrb	r2, [r2, #0]
 800b488:	1e10      	subs	r0, r2, #0
 800b48a:	bf18      	it	ne
 800b48c:	2001      	movne	r0, #1
 800b48e:	b002      	add	sp, #8
 800b490:	4770      	bx	lr
 800b492:	4610      	mov	r0, r2
 800b494:	e7fb      	b.n	800b48e <__ascii_mbtowc+0x16>
 800b496:	f06f 0001 	mvn.w	r0, #1
 800b49a:	e7f8      	b.n	800b48e <__ascii_mbtowc+0x16>

0800b49c <memmove>:
 800b49c:	4288      	cmp	r0, r1
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	eb01 0402 	add.w	r4, r1, r2
 800b4a4:	d902      	bls.n	800b4ac <memmove+0x10>
 800b4a6:	4284      	cmp	r4, r0
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	d807      	bhi.n	800b4bc <memmove+0x20>
 800b4ac:	1e43      	subs	r3, r0, #1
 800b4ae:	42a1      	cmp	r1, r4
 800b4b0:	d008      	beq.n	800b4c4 <memmove+0x28>
 800b4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ba:	e7f8      	b.n	800b4ae <memmove+0x12>
 800b4bc:	4402      	add	r2, r0
 800b4be:	4601      	mov	r1, r0
 800b4c0:	428a      	cmp	r2, r1
 800b4c2:	d100      	bne.n	800b4c6 <memmove+0x2a>
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ce:	e7f7      	b.n	800b4c0 <memmove+0x24>

0800b4d0 <_realloc_r>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	4607      	mov	r7, r0
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	460e      	mov	r6, r1
 800b4d8:	b921      	cbnz	r1, 800b4e4 <_realloc_r+0x14>
 800b4da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4de:	4611      	mov	r1, r2
 800b4e0:	f7fd ba86 	b.w	80089f0 <_malloc_r>
 800b4e4:	b922      	cbnz	r2, 800b4f0 <_realloc_r+0x20>
 800b4e6:	f7fd fa33 	bl	8008950 <_free_r>
 800b4ea:	4625      	mov	r5, r4
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f0:	f000 f828 	bl	800b544 <_malloc_usable_size_r>
 800b4f4:	42a0      	cmp	r0, r4
 800b4f6:	d20f      	bcs.n	800b518 <_realloc_r+0x48>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	f7fd fa78 	bl	80089f0 <_malloc_r>
 800b500:	4605      	mov	r5, r0
 800b502:	2800      	cmp	r0, #0
 800b504:	d0f2      	beq.n	800b4ec <_realloc_r+0x1c>
 800b506:	4631      	mov	r1, r6
 800b508:	4622      	mov	r2, r4
 800b50a:	f7fd fa0a 	bl	8008922 <memcpy>
 800b50e:	4631      	mov	r1, r6
 800b510:	4638      	mov	r0, r7
 800b512:	f7fd fa1d 	bl	8008950 <_free_r>
 800b516:	e7e9      	b.n	800b4ec <_realloc_r+0x1c>
 800b518:	4635      	mov	r5, r6
 800b51a:	e7e7      	b.n	800b4ec <_realloc_r+0x1c>

0800b51c <__ascii_wctomb>:
 800b51c:	b149      	cbz	r1, 800b532 <__ascii_wctomb+0x16>
 800b51e:	2aff      	cmp	r2, #255	; 0xff
 800b520:	bf85      	ittet	hi
 800b522:	238a      	movhi	r3, #138	; 0x8a
 800b524:	6003      	strhi	r3, [r0, #0]
 800b526:	700a      	strbls	r2, [r1, #0]
 800b528:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b52c:	bf98      	it	ls
 800b52e:	2001      	movls	r0, #1
 800b530:	4770      	bx	lr
 800b532:	4608      	mov	r0, r1
 800b534:	4770      	bx	lr

0800b536 <abort>:
 800b536:	b508      	push	{r3, lr}
 800b538:	2006      	movs	r0, #6
 800b53a:	f000 f833 	bl	800b5a4 <raise>
 800b53e:	2001      	movs	r0, #1
 800b540:	f7f6 fe82 	bl	8002248 <_exit>

0800b544 <_malloc_usable_size_r>:
 800b544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b548:	1f18      	subs	r0, r3, #4
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfbc      	itt	lt
 800b54e:	580b      	ldrlt	r3, [r1, r0]
 800b550:	18c0      	addlt	r0, r0, r3
 800b552:	4770      	bx	lr

0800b554 <_raise_r>:
 800b554:	291f      	cmp	r1, #31
 800b556:	b538      	push	{r3, r4, r5, lr}
 800b558:	4604      	mov	r4, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	d904      	bls.n	800b568 <_raise_r+0x14>
 800b55e:	2316      	movs	r3, #22
 800b560:	6003      	str	r3, [r0, #0]
 800b562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b56a:	b112      	cbz	r2, 800b572 <_raise_r+0x1e>
 800b56c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b570:	b94b      	cbnz	r3, 800b586 <_raise_r+0x32>
 800b572:	4620      	mov	r0, r4
 800b574:	f000 f830 	bl	800b5d8 <_getpid_r>
 800b578:	462a      	mov	r2, r5
 800b57a:	4601      	mov	r1, r0
 800b57c:	4620      	mov	r0, r4
 800b57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b582:	f000 b817 	b.w	800b5b4 <_kill_r>
 800b586:	2b01      	cmp	r3, #1
 800b588:	d00a      	beq.n	800b5a0 <_raise_r+0x4c>
 800b58a:	1c59      	adds	r1, r3, #1
 800b58c:	d103      	bne.n	800b596 <_raise_r+0x42>
 800b58e:	2316      	movs	r3, #22
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	2001      	movs	r0, #1
 800b594:	e7e7      	b.n	800b566 <_raise_r+0x12>
 800b596:	2400      	movs	r4, #0
 800b598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b59c:	4628      	mov	r0, r5
 800b59e:	4798      	blx	r3
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	e7e0      	b.n	800b566 <_raise_r+0x12>

0800b5a4 <raise>:
 800b5a4:	4b02      	ldr	r3, [pc, #8]	; (800b5b0 <raise+0xc>)
 800b5a6:	4601      	mov	r1, r0
 800b5a8:	6818      	ldr	r0, [r3, #0]
 800b5aa:	f7ff bfd3 	b.w	800b554 <_raise_r>
 800b5ae:	bf00      	nop
 800b5b0:	20000010 	.word	0x20000010

0800b5b4 <_kill_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4d07      	ldr	r5, [pc, #28]	; (800b5d4 <_kill_r+0x20>)
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	4608      	mov	r0, r1
 800b5be:	4611      	mov	r1, r2
 800b5c0:	602b      	str	r3, [r5, #0]
 800b5c2:	f7f6 fe31 	bl	8002228 <_kill>
 800b5c6:	1c43      	adds	r3, r0, #1
 800b5c8:	d102      	bne.n	800b5d0 <_kill_r+0x1c>
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	b103      	cbz	r3, 800b5d0 <_kill_r+0x1c>
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	bd38      	pop	{r3, r4, r5, pc}
 800b5d2:	bf00      	nop
 800b5d4:	2000c320 	.word	0x2000c320

0800b5d8 <_getpid_r>:
 800b5d8:	f7f6 be1e 	b.w	8002218 <_getpid>
 800b5dc:	0000      	movs	r0, r0
	...

0800b5e0 <log>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	ed2d 8b02 	vpush	{d8}
 800b5e6:	ec55 4b10 	vmov	r4, r5, d0
 800b5ea:	f000 f841 	bl	800b670 <__ieee754_log>
 800b5ee:	4b1e      	ldr	r3, [pc, #120]	; (800b668 <log+0x88>)
 800b5f0:	eeb0 8a40 	vmov.f32	s16, s0
 800b5f4:	eef0 8a60 	vmov.f32	s17, s1
 800b5f8:	f993 3000 	ldrsb.w	r3, [r3]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	d01a      	beq.n	800b636 <log+0x56>
 800b600:	4622      	mov	r2, r4
 800b602:	462b      	mov	r3, r5
 800b604:	4620      	mov	r0, r4
 800b606:	4629      	mov	r1, r5
 800b608:	f7f5 fa98 	bl	8000b3c <__aeabi_dcmpun>
 800b60c:	b998      	cbnz	r0, 800b636 <log+0x56>
 800b60e:	2200      	movs	r2, #0
 800b610:	2300      	movs	r3, #0
 800b612:	4620      	mov	r0, r4
 800b614:	4629      	mov	r1, r5
 800b616:	f7f5 fa87 	bl	8000b28 <__aeabi_dcmpgt>
 800b61a:	b960      	cbnz	r0, 800b636 <log+0x56>
 800b61c:	2200      	movs	r2, #0
 800b61e:	2300      	movs	r3, #0
 800b620:	4620      	mov	r0, r4
 800b622:	4629      	mov	r1, r5
 800b624:	f7f5 fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 800b628:	b160      	cbz	r0, 800b644 <log+0x64>
 800b62a:	f7fc ff83 	bl	8008534 <__errno>
 800b62e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800b660 <log+0x80>
 800b632:	2322      	movs	r3, #34	; 0x22
 800b634:	6003      	str	r3, [r0, #0]
 800b636:	eeb0 0a48 	vmov.f32	s0, s16
 800b63a:	eef0 0a68 	vmov.f32	s1, s17
 800b63e:	ecbd 8b02 	vpop	{d8}
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	f7fc ff76 	bl	8008534 <__errno>
 800b648:	ecbd 8b02 	vpop	{d8}
 800b64c:	2321      	movs	r3, #33	; 0x21
 800b64e:	6003      	str	r3, [r0, #0]
 800b650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b654:	4805      	ldr	r0, [pc, #20]	; (800b66c <log+0x8c>)
 800b656:	f000 b9c7 	b.w	800b9e8 <nan>
 800b65a:	bf00      	nop
 800b65c:	f3af 8000 	nop.w
 800b660:	00000000 	.word	0x00000000
 800b664:	fff00000 	.word	0xfff00000
 800b668:	200001e0 	.word	0x200001e0
 800b66c:	0800c2c0 	.word	0x0800c2c0

0800b670 <__ieee754_log>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	ec51 0b10 	vmov	r0, r1, d0
 800b678:	ed2d 8b04 	vpush	{d8-d9}
 800b67c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b680:	b083      	sub	sp, #12
 800b682:	460d      	mov	r5, r1
 800b684:	da29      	bge.n	800b6da <__ieee754_log+0x6a>
 800b686:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b68a:	4303      	orrs	r3, r0
 800b68c:	ee10 2a10 	vmov	r2, s0
 800b690:	d10c      	bne.n	800b6ac <__ieee754_log+0x3c>
 800b692:	49cf      	ldr	r1, [pc, #828]	; (800b9d0 <__ieee754_log+0x360>)
 800b694:	2200      	movs	r2, #0
 800b696:	2300      	movs	r3, #0
 800b698:	2000      	movs	r0, #0
 800b69a:	f7f5 f8df 	bl	800085c <__aeabi_ddiv>
 800b69e:	ec41 0b10 	vmov	d0, r0, r1
 800b6a2:	b003      	add	sp, #12
 800b6a4:	ecbd 8b04 	vpop	{d8-d9}
 800b6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	da05      	bge.n	800b6bc <__ieee754_log+0x4c>
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	f7f4 fdf1 	bl	8000298 <__aeabi_dsub>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	e7ee      	b.n	800b69a <__ieee754_log+0x2a>
 800b6bc:	4bc5      	ldr	r3, [pc, #788]	; (800b9d4 <__ieee754_log+0x364>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f7f4 ffa2 	bl	8000608 <__aeabi_dmul>
 800b6c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b6c8:	460d      	mov	r5, r1
 800b6ca:	4ac3      	ldr	r2, [pc, #780]	; (800b9d8 <__ieee754_log+0x368>)
 800b6cc:	4295      	cmp	r5, r2
 800b6ce:	dd06      	ble.n	800b6de <__ieee754_log+0x6e>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	f7f4 fde2 	bl	800029c <__adddf3>
 800b6d8:	e7e1      	b.n	800b69e <__ieee754_log+0x2e>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e7f5      	b.n	800b6ca <__ieee754_log+0x5a>
 800b6de:	152c      	asrs	r4, r5, #20
 800b6e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b6e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b6e8:	441c      	add	r4, r3
 800b6ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b6ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b6f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b6fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b6fe:	ea42 0105 	orr.w	r1, r2, r5
 800b702:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b706:	2200      	movs	r2, #0
 800b708:	4bb4      	ldr	r3, [pc, #720]	; (800b9dc <__ieee754_log+0x36c>)
 800b70a:	f7f4 fdc5 	bl	8000298 <__aeabi_dsub>
 800b70e:	1cab      	adds	r3, r5, #2
 800b710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b714:	2b02      	cmp	r3, #2
 800b716:	4682      	mov	sl, r0
 800b718:	468b      	mov	fp, r1
 800b71a:	f04f 0200 	mov.w	r2, #0
 800b71e:	dc53      	bgt.n	800b7c8 <__ieee754_log+0x158>
 800b720:	2300      	movs	r3, #0
 800b722:	f7f5 f9d9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b726:	b1d0      	cbz	r0, 800b75e <__ieee754_log+0xee>
 800b728:	2c00      	cmp	r4, #0
 800b72a:	f000 8122 	beq.w	800b972 <__ieee754_log+0x302>
 800b72e:	4620      	mov	r0, r4
 800b730:	f7f4 ff00 	bl	8000534 <__aeabi_i2d>
 800b734:	a390      	add	r3, pc, #576	; (adr r3, 800b978 <__ieee754_log+0x308>)
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	f7f4 ff63 	bl	8000608 <__aeabi_dmul>
 800b742:	a38f      	add	r3, pc, #572	; (adr r3, 800b980 <__ieee754_log+0x310>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	4604      	mov	r4, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	4630      	mov	r0, r6
 800b74e:	4639      	mov	r1, r7
 800b750:	f7f4 ff5a 	bl	8000608 <__aeabi_dmul>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4620      	mov	r0, r4
 800b75a:	4629      	mov	r1, r5
 800b75c:	e7ba      	b.n	800b6d4 <__ieee754_log+0x64>
 800b75e:	a38a      	add	r3, pc, #552	; (adr r3, 800b988 <__ieee754_log+0x318>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	4650      	mov	r0, sl
 800b766:	4659      	mov	r1, fp
 800b768:	f7f4 ff4e 	bl	8000608 <__aeabi_dmul>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	2000      	movs	r0, #0
 800b772:	499b      	ldr	r1, [pc, #620]	; (800b9e0 <__ieee754_log+0x370>)
 800b774:	f7f4 fd90 	bl	8000298 <__aeabi_dsub>
 800b778:	4652      	mov	r2, sl
 800b77a:	4606      	mov	r6, r0
 800b77c:	460f      	mov	r7, r1
 800b77e:	465b      	mov	r3, fp
 800b780:	4650      	mov	r0, sl
 800b782:	4659      	mov	r1, fp
 800b784:	f7f4 ff40 	bl	8000608 <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f4 ff3a 	bl	8000608 <__aeabi_dmul>
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	b914      	cbnz	r4, 800b7a0 <__ieee754_log+0x130>
 800b79a:	4632      	mov	r2, r6
 800b79c:	463b      	mov	r3, r7
 800b79e:	e0a2      	b.n	800b8e6 <__ieee754_log+0x276>
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f7f4 fec7 	bl	8000534 <__aeabi_i2d>
 800b7a6:	a374      	add	r3, pc, #464	; (adr r3, 800b978 <__ieee754_log+0x308>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	4689      	mov	r9, r1
 800b7b0:	f7f4 ff2a 	bl	8000608 <__aeabi_dmul>
 800b7b4:	a372      	add	r3, pc, #456	; (adr r3, 800b980 <__ieee754_log+0x310>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	460d      	mov	r5, r1
 800b7be:	4640      	mov	r0, r8
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	f7f4 ff21 	bl	8000608 <__aeabi_dmul>
 800b7c6:	e0a7      	b.n	800b918 <__ieee754_log+0x2a8>
 800b7c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7cc:	f7f4 fd66 	bl	800029c <__adddf3>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4650      	mov	r0, sl
 800b7d6:	4659      	mov	r1, fp
 800b7d8:	f7f5 f840 	bl	800085c <__aeabi_ddiv>
 800b7dc:	ec41 0b18 	vmov	d8, r0, r1
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f7f4 fea7 	bl	8000534 <__aeabi_i2d>
 800b7e6:	ec53 2b18 	vmov	r2, r3, d8
 800b7ea:	ec41 0b19 	vmov	d9, r0, r1
 800b7ee:	ec51 0b18 	vmov	r0, r1, d8
 800b7f2:	f7f4 ff09 	bl	8000608 <__aeabi_dmul>
 800b7f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b7fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b7fe:	9301      	str	r3, [sp, #4]
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4680      	mov	r8, r0
 800b806:	4689      	mov	r9, r1
 800b808:	f7f4 fefe 	bl	8000608 <__aeabi_dmul>
 800b80c:	a360      	add	r3, pc, #384	; (adr r3, 800b990 <__ieee754_log+0x320>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	4606      	mov	r6, r0
 800b814:	460f      	mov	r7, r1
 800b816:	f7f4 fef7 	bl	8000608 <__aeabi_dmul>
 800b81a:	a35f      	add	r3, pc, #380	; (adr r3, 800b998 <__ieee754_log+0x328>)
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f7f4 fd3c 	bl	800029c <__adddf3>
 800b824:	4632      	mov	r2, r6
 800b826:	463b      	mov	r3, r7
 800b828:	f7f4 feee 	bl	8000608 <__aeabi_dmul>
 800b82c:	a35c      	add	r3, pc, #368	; (adr r3, 800b9a0 <__ieee754_log+0x330>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fd33 	bl	800029c <__adddf3>
 800b836:	4632      	mov	r2, r6
 800b838:	463b      	mov	r3, r7
 800b83a:	f7f4 fee5 	bl	8000608 <__aeabi_dmul>
 800b83e:	a35a      	add	r3, pc, #360	; (adr r3, 800b9a8 <__ieee754_log+0x338>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f4 fd2a 	bl	800029c <__adddf3>
 800b848:	4642      	mov	r2, r8
 800b84a:	464b      	mov	r3, r9
 800b84c:	f7f4 fedc 	bl	8000608 <__aeabi_dmul>
 800b850:	a357      	add	r3, pc, #348	; (adr r3, 800b9b0 <__ieee754_log+0x340>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	4680      	mov	r8, r0
 800b858:	4689      	mov	r9, r1
 800b85a:	4630      	mov	r0, r6
 800b85c:	4639      	mov	r1, r7
 800b85e:	f7f4 fed3 	bl	8000608 <__aeabi_dmul>
 800b862:	a355      	add	r3, pc, #340	; (adr r3, 800b9b8 <__ieee754_log+0x348>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f7f4 fd18 	bl	800029c <__adddf3>
 800b86c:	4632      	mov	r2, r6
 800b86e:	463b      	mov	r3, r7
 800b870:	f7f4 feca 	bl	8000608 <__aeabi_dmul>
 800b874:	a352      	add	r3, pc, #328	; (adr r3, 800b9c0 <__ieee754_log+0x350>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f7f4 fd0f 	bl	800029c <__adddf3>
 800b87e:	4632      	mov	r2, r6
 800b880:	463b      	mov	r3, r7
 800b882:	f7f4 fec1 	bl	8000608 <__aeabi_dmul>
 800b886:	460b      	mov	r3, r1
 800b888:	4602      	mov	r2, r0
 800b88a:	4649      	mov	r1, r9
 800b88c:	4640      	mov	r0, r8
 800b88e:	f7f4 fd05 	bl	800029c <__adddf3>
 800b892:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	3551      	adds	r5, #81	; 0x51
 800b89a:	431d      	orrs	r5, r3
 800b89c:	2d00      	cmp	r5, #0
 800b89e:	4680      	mov	r8, r0
 800b8a0:	4689      	mov	r9, r1
 800b8a2:	dd48      	ble.n	800b936 <__ieee754_log+0x2c6>
 800b8a4:	4b4e      	ldr	r3, [pc, #312]	; (800b9e0 <__ieee754_log+0x370>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	f7f4 feac 	bl	8000608 <__aeabi_dmul>
 800b8b0:	4652      	mov	r2, sl
 800b8b2:	465b      	mov	r3, fp
 800b8b4:	f7f4 fea8 	bl	8000608 <__aeabi_dmul>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	f7f4 fcea 	bl	800029c <__adddf3>
 800b8c8:	ec53 2b18 	vmov	r2, r3, d8
 800b8cc:	f7f4 fe9c 	bl	8000608 <__aeabi_dmul>
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	4689      	mov	r9, r1
 800b8d4:	b964      	cbnz	r4, 800b8f0 <__ieee754_log+0x280>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4630      	mov	r0, r6
 800b8dc:	4639      	mov	r1, r7
 800b8de:	f7f4 fcdb 	bl	8000298 <__aeabi_dsub>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4650      	mov	r0, sl
 800b8e8:	4659      	mov	r1, fp
 800b8ea:	f7f4 fcd5 	bl	8000298 <__aeabi_dsub>
 800b8ee:	e6d6      	b.n	800b69e <__ieee754_log+0x2e>
 800b8f0:	a321      	add	r3, pc, #132	; (adr r3, 800b978 <__ieee754_log+0x308>)
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	ec51 0b19 	vmov	r0, r1, d9
 800b8fa:	f7f4 fe85 	bl	8000608 <__aeabi_dmul>
 800b8fe:	a320      	add	r3, pc, #128	; (adr r3, 800b980 <__ieee754_log+0x310>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	ec51 0b19 	vmov	r0, r1, d9
 800b90c:	f7f4 fe7c 	bl	8000608 <__aeabi_dmul>
 800b910:	4642      	mov	r2, r8
 800b912:	464b      	mov	r3, r9
 800b914:	f7f4 fcc2 	bl	800029c <__adddf3>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4630      	mov	r0, r6
 800b91e:	4639      	mov	r1, r7
 800b920:	f7f4 fcba 	bl	8000298 <__aeabi_dsub>
 800b924:	4652      	mov	r2, sl
 800b926:	465b      	mov	r3, fp
 800b928:	f7f4 fcb6 	bl	8000298 <__aeabi_dsub>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4620      	mov	r0, r4
 800b932:	4629      	mov	r1, r5
 800b934:	e7d9      	b.n	800b8ea <__ieee754_log+0x27a>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4650      	mov	r0, sl
 800b93c:	4659      	mov	r1, fp
 800b93e:	f7f4 fcab 	bl	8000298 <__aeabi_dsub>
 800b942:	ec53 2b18 	vmov	r2, r3, d8
 800b946:	f7f4 fe5f 	bl	8000608 <__aeabi_dmul>
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	2c00      	cmp	r4, #0
 800b950:	f43f af23 	beq.w	800b79a <__ieee754_log+0x12a>
 800b954:	a308      	add	r3, pc, #32	; (adr r3, 800b978 <__ieee754_log+0x308>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	ec51 0b19 	vmov	r0, r1, d9
 800b95e:	f7f4 fe53 	bl	8000608 <__aeabi_dmul>
 800b962:	a307      	add	r3, pc, #28	; (adr r3, 800b980 <__ieee754_log+0x310>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	4604      	mov	r4, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	ec51 0b19 	vmov	r0, r1, d9
 800b970:	e727      	b.n	800b7c2 <__ieee754_log+0x152>
 800b972:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b9c8 <__ieee754_log+0x358>
 800b976:	e694      	b.n	800b6a2 <__ieee754_log+0x32>
 800b978:	fee00000 	.word	0xfee00000
 800b97c:	3fe62e42 	.word	0x3fe62e42
 800b980:	35793c76 	.word	0x35793c76
 800b984:	3dea39ef 	.word	0x3dea39ef
 800b988:	55555555 	.word	0x55555555
 800b98c:	3fd55555 	.word	0x3fd55555
 800b990:	df3e5244 	.word	0xdf3e5244
 800b994:	3fc2f112 	.word	0x3fc2f112
 800b998:	96cb03de 	.word	0x96cb03de
 800b99c:	3fc74664 	.word	0x3fc74664
 800b9a0:	94229359 	.word	0x94229359
 800b9a4:	3fd24924 	.word	0x3fd24924
 800b9a8:	55555593 	.word	0x55555593
 800b9ac:	3fe55555 	.word	0x3fe55555
 800b9b0:	d078c69f 	.word	0xd078c69f
 800b9b4:	3fc39a09 	.word	0x3fc39a09
 800b9b8:	1d8e78af 	.word	0x1d8e78af
 800b9bc:	3fcc71c5 	.word	0x3fcc71c5
 800b9c0:	9997fa04 	.word	0x9997fa04
 800b9c4:	3fd99999 	.word	0x3fd99999
	...
 800b9d0:	c3500000 	.word	0xc3500000
 800b9d4:	43500000 	.word	0x43500000
 800b9d8:	7fefffff 	.word	0x7fefffff
 800b9dc:	3ff00000 	.word	0x3ff00000
 800b9e0:	3fe00000 	.word	0x3fe00000
 800b9e4:	00000000 	.word	0x00000000

0800b9e8 <nan>:
 800b9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9f0 <nan+0x8>
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	00000000 	.word	0x00000000
 800b9f4:	7ff80000 	.word	0x7ff80000

0800b9f8 <_init>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	bf00      	nop
 800b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fe:	bc08      	pop	{r3}
 800ba00:	469e      	mov	lr, r3
 800ba02:	4770      	bx	lr

0800ba04 <_fini>:
 800ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba06:	bf00      	nop
 800ba08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0a:	bc08      	pop	{r3}
 800ba0c:	469e      	mov	lr, r3
 800ba0e:	4770      	bx	lr
